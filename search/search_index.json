{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Critical Making Studio CMCI STUDIO at CU Boulder \u00b6 Nothing is a mistake. There's no win and no fail, there's only make. ~ John Cage Critical Making Studio is the foundational experience enabling students to realize their full potential as creative citizens in CMCI STUDIO. Central to the studio are four courses, Critical Making 1 and 2 (Fall), and Critical Making 3 and 4 (Spring), in which students enter into an experience as transformative and diverse as the participants themselves; all unique threads woven into whole cloth, informing the very fabric of studio culture. The courses aim to ground students in making as a deeply personal practice and ongoing journey in life thereafter, resulting in creative citizens capable of realizing that which they can envision utilizing a combination of their talents, intellect, abilities, creative faculties, and support networks. The studio experience is made possible by 24 hr, 7 days a week, access to a state-of-the-art rapid prototyping shop, media editing suite, and studio workspaces that can be transformed into a variety of configurations supporting activities such as artistic performances and special events. Additionally, access to fellow students, faculty, and industry partners provides an unparalleled educational experience and support network for developing transformative solutions spanning a variety of creative industries. Critical Making 3 & 4 \u00b6 Critical Making Studio 3 & 4 are second semester project-based studio courses that provide a foundation in the creative process of making with new and emerging digital and physical technologies responsible for shaping and reshaping the world around us. In these courses students work towards becoming fluent across digital and physical creative practices used in the development of new products and services. This includes building skills in physical computing and virtual reality technologies, tools, and workflows to design and prototype branded and experience driven products. Date and Time: Critical Making Studio 3 (BD Group) - Tuesdays, 9 am - 12 pm Critical Making Studio 4 (UX Group) - Wednesdays, 9 am - 12 pm Instructor: RJ Duran rj.duran@colorado.edu Slack: @rjduran. #cmstudio on cmcistudio.slack.com Office hours by appointment. Feel free to reach out to me via slack or email. Syllabus: CM 3 Syllabus CM 4 Syllabus See what we're up to! Follow us @criticalmakingstudio and @cmci.studio . Course Resources \u00b6 This website is the primary resource for all critical making studio courses. Most of the resources used in the courses are divided up into sections that can be found on the left sidebar. Think of these resources as maps containing many possible tools that could help you accomplish your work and from which you will need to choose some to learn and work with. There are pros and cons to any tool but all have a set of functionalities and a purpose. As with any tool and any kind of personal creative process you are free to choose anything that works for you. Course Workload \u00b6 The critical making courses are 3 credit hours each. You should expect to dedicate at least 2-3 hours per credit hour. This translates into a 6-9 hours per week. Consider 6 hours a minimum expectation for one studio course and plan accordingly with your other studio courses. Assignments for the course consist of project-based and process oriented blog posts as well as weekly research, readings, and making . Many of which will be decided each week in class. In general, anything with deliverables is \"due\" the following week by the start of class time. Refer to the Course Deliverables section for more information. The courses are organized in three 5 week phases . Each phase consists of a series of instructor led project-driven topics structured as workshops and studio work sessions covering digital and physical making. It is expected that all students are active participants in each session. Course Deliverables \u00b6 Critical making courses are project based and largely driven by student research areas spanning experience design and/or brand design. As such, each deliverable is expected to vary based on the project parameters and requirements. The following outlines the general criteria for course deliverables throughout the semester. Blog Posts \u00b6 A minimum of 5 posts published to your Critical Making blog . Medium is widely used by most students but any blogging platform / website may be used. Posts can be distributed throughout the semester at any interval. Decide on an interval that works for you and try to follow it. For example, every 2 weeks. Posts are to be submitted via slack #cmstudio . It is recommended that a post includes a variety of media and content to support the subject matter. For example: text, images, video, graphics, photos, mockups, screen captures, tutorials, 3d model viewers (sketchfab), sketches, code, gifs, references, etc. Anything that is required to effectively communicate the details of a project, process, prototype, or idea. The subject matter is of your choosing. Ideally, it falls in line with your interests, research area, project, creative process, etc. For example, you might consider doing a series of tutorials on a topic that interests you or a process/workflow you are currently exploring through the course. Refer back to the Fall semester deliverables for examples of weekly assignments and projects. Posts should be written to the best of your abilities and for a public audience. The post and any accompanying visual content (images, video) will likely be shared on social media. All blog posts are to be submitted by May 2, 2019 (last day of classes). Final Project Proposal \u00b6 Submit a final project proposal anytime before Friday March 22nd (The Friday before Spring Break). The earlier the better so you have time to ask questions, order any supplies you may need, etc. Your proposal should be formatted as a blog post on your critical making blog with all supporting media contained within the post. Deliverable: A new or updated proposal posted to your blog. It should include the following: Project Title Project Summary ~ 1 page max What is it? What problem(s) are you solving? What will it do? How will it work? Key components of your project What resources, skills, and technologies are needed to realize it? ~ Materials, 3d models, CAD, 3d Printing, Electronics, Arduino, Sensors/Devices, Processing, Touch Designer, Unity, HTC VIVE, etc Milestones you have hit thus far and what you plan to do in order to realize it in the weeks following Spring Break. If you need to order some parts, what do you need? What questions do you have? Where do you feel you are lacking in skill and need assistance? Share the URL to your post on slack #cmstudio. Final Project \u00b6 The final project produced will be presented at the Spring Showcase on Wednesday May 1st, 2019 at 5pm . Final project blog post due by 11:59pm Monday May 6th (Monday of Finals Week) . Documentation is to be submitted the form of a blog post with all supporting media necessary to explain the project development and outcomes. The general criteria outlined above applies to this final post. I highly suggest preparing a presentation of some kind (slides, video, experience). Be sure to include links to past blog posts and any resources used in the process. What problem did you set out to solve? What is your project all about? How did you accomplish your goals? What resources did you make use of? What challenges did you encounter and how did you overcome them? What worked? What didn't? If this is a part of a larger long-term project, what milestones did you hit? What's next for this project? (Future Work) What are your major takeaways? What did you learn / discover? Note: The final project proposal blog post and final blog post are in addition to the previously described posts. In total, you should have a minimum of 7 blog posts for the semester. Failure to submit all blog posts for this studio will result in a failing grade. Share the URL to your post on slack #cmstudio. Week 1: Overview \u00b6 Jan 15 / Jan 16 Hello 2019! Syllabus Schedule Assignments / Projects Tools of Critical Making - Documenting, Evaluating, Testing, Mapping Research Maps & Frameworks Course Themes This is a list of just a few of the themes we will explore in the weeks ahead. What comes to mind when considering these technologies as things you are likely to encounter in everyday life? Physical Computing Internet of Things VR / AR / MR / Spatial Computing Interactive and Immersive Digital / Physical Experiences Parametric Design Digital Fabrication Automation Robots AI, Machine Learning Various Projects / Products / Possibilities What kinds of projects or ideas move / inspire / intrigue you? Seeing Spaces (Map) by Bret Victor Brixels by Breakfast NY - Platform Tech Minimalist Greeting Robot - Like a plant... but not. Hellcouch - Simple & Fun CNC Machines DIY CNC Wire Bending Machine Delta 3D Printer for Ceramics ( Zibes ) Tinkerkit Braccio Robot Arm , IK Unity Asset - Low cost robot arm kit and Unity asset to control from VR. Dripping Machine for Ceramics Claude Monet\u2019s Immersive VR Experience / Developer Surreal World by Matt Isola Google Earth WebVR by Matt Isola VR Maze by Jim Murphy The Wave VR WITHIN Improbable Studios Project One Studio / Instagram Vvoxstudio / Volvoxlabs / Instagram Moment Factory (Lab) Softlab / Instagram Respons_ve / Instagram Field.io / Field.io Research: Journery into VR / Instagram Symmetry Labs / Instagram Project Inspiration Creative Applications Autodesk Pier 9 Residency Projects 50 of the most important Raspberry Pi Sensors and Components Maps Design thinking origin story plus some of the people who made it all happen - A great map showing the history and evolution of design thinking. Look at the pdf near the end of the article. Envisioning Horizons 2013 Map - An emerging tech map / research done by Envisioning . Age of Entanglement by Neri Oxman - An outstanding article and map / chart (The Krebs Cycle of Creativity). Tim Rodenbroeker - Input / Output Map Bauhaus Curriculum / Bauhaus || The School of Everything Upcoming Events & Opportunities Adobe Creative Jam - Jan 17th, Free. Signup and attend. STUDIO Open House - Thursday, Jan 24th from 4 pm - 8 pm. Plan to attend and show work. BLDG 61 Show: Maker Made - Application Deadline: Jan 26th, 2019. Instructables Epilog X Contest - Jan 7 - Apr 1. Want your very own laser cutter? Submit a project by the deadline. Week 1 Questions Think about the weeks ahead and how they can help you advance a project you are currently working on or investigate a tech stack you are interested in diving deeper into. The best way to succeed / learn in critical making is by asking questions and taking action (aka building something every week). Think in terms of devices, prototypes, and/or experiences as they relate to your other courses. Spend some time this week researching the course themes above and produce a mind map of your interests and ideas. Think about if / where your interests intersect with the technologies we might be exploring and create a map defining the space of possibilities. Whats your question? Post your map to your blog. Week 1 Readings Isaac Asimov: How to Never Run Out of Ideas Again 35 years ago, Isaac Asimov was asked by the Star to predict the world of 2019. Here is what he wrote Phase 1: Physical Computing \u00b6 Week 2: Intro to Arduino \u00b6 Jan 22 / Jan 23 Arduino is an open-source hardware and software platform for building digital devices and interactive objects that can sense and control objects in the physical and digital world. Inputs (Sensors) -> Behavior (Software) -> Outputs (Action) You can think about this type of device (microcontroller) as the interface between the physical and digital world. It allows you to translate physical phenomena into digital information and act upon it with software (code) to produce a kind of digital or physical output such as flashing a light or turning a motor. The Arduino and connected devices can be thought of as LEGOS or building blocks to construct complex electro-mechanical, interactive, and responsive systems. Hardware Official Arduino Boards Arduino Uno Specs Arduino Uno Pinout Guide There are many different shapes and sizes of Arduino's available, how do you choose hardware for a project? Look for a guide such as the Arduino Comparison Guide by Sparkfun to start. Decide what your project will do and what inputs and outputs it has. Also take into consideration how you plan to use the Arduino. Does it use data from the physical world? Does it need to display information? Do you need everything available in the board or can you get away with a smaller/cheaper/less capable one? How much do you have to spend on the project? Look at the cost of supplies. Luckily most Arduinos are cheap but components and devices can add up. Software Arduino IDE - Download and Install. Arduino Language Reference Serial Monitor (for monitoring board input and output) - Tools > Serial Monitor Built In Examples Blink - Uses a LED Button - Uses a Button AnalogReadSerial - Uses a Knob AnalogInOutSerial - Uses a Knob to dim LED with Pulse Width Modulation (PWM) Resources Learning Basic Electronics Learning Arduino Arduino Based Projects - Start here for project inspiration. Arduino Prototyping Techniques More Projects hardwareux - A great instagram account showcasing projects built with hardware. Stringent, the $15 Wall Plotter Pacman Costumes Upcoming Events & Opportunities Processing Community Day Denver - February 9th, 2019 Week 2 Questions This week I invite you to go deeper than what we cover in class. Continue to work with some of the built in examples that begin to incorporate more hardware or keep it basic and see what you can do with just buttons, knobs, and LEDs. Try out new circuit combinations building off the examples and see what happens. Begin to seek out project examples related to your interests in physical computing so far. Research 3-4 Arduino based physical computing project examples that you find intriguing and related to your project interests and goals. What parts do they use? How much does it all cost? Where do you get all the parts? Is there a \"Bill of Materials\" (aka BOM) for the project? Post your research to your blog. Week 2 Readings Getting Started with Arduino and Genuino UNO The importance of hardware-software integration\u200a\u2014\u200adesigning the Withings scales 5 Things UX Designers Need to Know About Designing Wearables Week 3: Input / Output Devices \u00b6 Jan 29 / Jan 30 Arduino Review Breadboards, Wires Describing Circuits: Breadboard View, Schematic View, Block Diagram View Autodesk TinkerCAD Circuit Simulator - A great tool for learning how to build circuits without the hardware. Great for prototyping. Digital vs Physical IO Photoresistor (Physical) -> Arduino -> LCD Display (Physical) Button (Physical) -> Arduino -> USB (Serial Port) -> Processing Sketch (Digital) Button (Physical) -> Arduino -> RGB LED (Physical) Exercise: Sketch out two more digital/physical, physical/physical, or physical/digital signal flows with input and output devices. Sensor Kits 37-to-1 Sensors Kit Explained Datasheets A datasheet is like the user manual for the device. Most are written for a design engineer or technician. For example, look at the datasheet for a Photocell . It contains information about how the device operates and how it was tested by the manufacturer. Other datasheets, such as the Sparkfun Redboard are a bit more visual and easier to read. If you don't know what a part or device is: Step 1: look around for a part number on the device itself or the package it came in or look similar looking things in the area. Perhaps another part has a number on it. Step 2: Google it. If you still can't ID something try to describe it to google. If all else fails, phone a friend. Input Devices Potentiometers - Another name for this is \"Variable Resistors\". Trimpot (Knob) Joystick (Playstation Joystick) Slide Pot (Slider) Buttons / Switches Light Sensor (Photoresistor) Distance / Motion / Proximity Accelerometer Temperature & Many More! Output Devices Light Emitting Diodes (LEDs) RGB LEDs Single/Multiple LEDs Adafruit NeoPixels LCD Display Motors Motors and Selecting the Right One Servo Motors If you are interested in motors, start with trying to hook up and program a servo motor. Adafruit Lesson 14. Servo Motors Hobby Servo Tutorial Sparkfun Servo - Generic High Torque Continuous Rotation (Standard Size) How to use Servo (TinkerCAD Circuits Simulator) Stepper Motors Getting Started with Stepper Motors Relays A relay allows you to control high power AC devices such as a lamp or power strip with a low power digital device / microcontroller such as an Arduino or Raspberry Pi. Beefcake Relay Kit / Assembly Instructions Relay Shield v2.0 / Assembly Instructions Cthulhu Shield - An open source sensory substitution/sensory augmentation development platform for Arduino. Basically, this device allos you to interact with electronics using your toungue. Resources Learning Basic Electronics Opportunities Global Access 2030 (GA2030) - Information in Slack #cmstudio. Week 3 Questions This week I invite you to again go deeper than what we cover in class and/or begin looking at how to build a project based on some of your research from last week. Choose one or more input devices and output devices to explore. You can always count on simple interactions such as button presses and LED flashes as reliable modes of input and output but eventually you might find yourself looking for other devices to build interactive systems. Read the article How Arduino Sensors Actually Work to learn more about various types of devices and their uses. Build and document your experience working with the Arduino and input/output devices of your choosing. What did you build? How does it work? Record a short video demonstrating your project / explorations. Include a summary and circuit diagrams to enable another person to follow your instructions and build their own version. You can use a tool like Fritzing or TinkerCAD Circuits to create a diagram or simulation. Post your project / research to your blog. Week 3 Media Arduino Inputs - Great overview of Inputs, Sensors, and Applications. Arduino Outputs - Great overview of Outputs and Applications. Instructables Arduino Class: Input/Ouput - A great guide to input and output devices in both hardware and simulation via TinkerCAD Circuits. Highly recommend if you need more practice with Arduino basics and don't have all the hardware at hand. The Edge Podcast by Bantam Tools - A new podcast by the Bantam Tools folks about digital fabrication, design, and making things. Week 4: Intro to Raspberry Pi \u00b6 Feb 5 / Feb 6 Discussion about Maps / Projects / Research Status Updates Global Access 2030 (GA2030) - Any interest? If so, lets talk. Books: Code, Electronics, Computers Code: The Hidden Language of Computer Hardware and Software - A great introduction to code, computers, electronics and how they work together to shape the computational landscape we inhabit. Raspberry Pi A Raspberry Pi is a fully functional single-board computer capable of running various Linux distributions (aka Operating Systems). It's used for all kinds of IoT / connected physical computing applications where internet connectivity, bluetooth, HDMI, audio, or more advanced hardware is required. Workshop: Setup and Configure a Raspberry Pi Different versions. Raspberry Pi 3, Zero, A+, etc. What are the differences? Why use one over another? Pros/Cons? Complete Raspberry Pi comparison chart Whats the difference between Raspberry Pi and Arduino? What do you do with a Raspberry Pi? Raspberry Pi Setup Tutorial Download Raspbian (Lite = No Desktop Environment, Smaller Download. Desktop = GUI Environment, Larger Download) Format and prepare MicroSD card Setup RPi (w/ Command Line Interface. No GUI.) Manually setup Wifi connection, access via SSH, and access via VNC (for headless display) Projects / Devices Make a web frame with Raspberry Pi in 30 minutes Magic Mirror - Original source code for the Mirror in the studio. Want to make your own version? Octoprint DIY Alexa Enabled Device DIY Alexa (AVS) / Raspberry Pi Device How to Build Your Own Amazon Echo with a Raspberry Pi Development Kits for AVS Project Alias / Fast Company Press - Thanks Karen! Media Servers (ie. Roku, Apple TV, etc) Home Devices (ie. Amazon Alexa, Google Home, etc) Dronebot Workshop - Great resource for various in depth tutorials. MeArm v1.0 Hackster Walkthrough Ball Balancing PID System - Intriguing project all around. MagPi Magazine / 50 Great Projects w/ Raspberry Pi Resoures Learning Raspberry Pi Week 4 Questions This week I invite you to revisit your maps / project ideas and ask if and where devices like the Raspberry Pi, Arduino, or another type of single-board computer or device may support the development of that which you envision. Like most, if not all, tools encountered in creative work, these are a means to an end. If these tools resonate with you and/or suport a project you are developing, begin to identify how they will be used and to what end. Identify to 2-3 projects that are closely related to the areas of interest you have in your maps and projects. What about these projects do you consider significant or exemplary? What elements will you build off of to realize your vision? Post your project progress and research to your blog. Week 4 Media The Internet as Material: Empowering the Next Phase of Connected Hardware Innovation - Ayah Bdeir - Solid 2014 / Little Bits Eames: The Architect & The Painter - Must watch documentary about the powerful design duo, Charles and Ray Eames. Aristotle for Everybody: Difficult Thought Made Easy by Mortimer J. Adler Aristotle's Four Causes Week 5: Work Session \u00b6 Feb 12 / Feb 13 Phase 2: The XR Continuum \u00b6 Week 6: Intro to VR \u00b6 Feb 19 / Feb 20 Project Updates / Discussion XR Discussion - Industry, Frameworks, Tools, Use Cases, Getting Started VR Tools: Unity, SteamVR , HTC Vive, Visual Studio X Reality (aka The XR Continum) X Reality (XR or Cross Reality) consists of technology-mediated experiences that combine digital and biological realities. It encompasses a wide spectrum of hardware and software, including sensory interfaces, applications, and infrastructures, that enable content creation for virtual reality (VR) , mixed reality (MR) , augmented reality (AR) , cinematic reality (CR), and more. With these tools, users generate new forms of reality by bringing digital objects into the physical world and bringing physical world objects into the digital world. ( Wikipedia ) Virtual Reality (VR) Virtual? Augmented? Mixed? The Reality of why \u201cxR\u201d is the perfect catchall Exploring the Virtuality Continuum and its terminology The Ultimate Guide for XR Evangelists - If you only read one of these articles. Read this one. XR is a new way to consider the reality continuum Reality\u2013virtuality continuum Unity Manual: XR Hardware Popular VR HMD's (Late 2017, Early 2018) HTC Vive (Primarily PC Based Development, VR Capable Hardware Required) Oculus (Cross Platform Development, VR Capable Hardware Required) Samsung Gear VR (Cross Platform Development, Mobile Based) Google Daydream (Cross Platform Development, Mobile Based) Next Gen HMD's (Trends: Increased Resolution and Performance, Portable, Wireless, Untethered, App Ecosystems) Occipital Bridge (Smartphone powered HMD with spatial tracking) Vive Pro - Just announced at CES 2018 Oculus Go / Mi VR Standalone (Xiaomi) (Cheap, Smartphone Powered, Social VR) Daydream StandloneVR Magic Leap One (Creator Edition) / Verge , Rolling Stone Vive Pro, Vive Pro Eyes The State of VR Hardware, GPU's, and Rendering Technology VR Hardware - Screens, Cameras, Sensors, Computers, Controllers, Cables, Trackers Vive Trackers , Valve 'Knuckles' , VIVE Accessories Teslasuit - Full body haptic suit PC = 1, Apple = 0 ( The Latest Gaming Laptops from CES 2018 , Apple hardware still isn't quite there yet... , Apple External Graphics Development Kit ) NVIDIA VR Supported GPU's Goodbye Uncanny Valley - A great overview of computer graphics, rendering technologies, and a spectrum of works exploring the future of the CG medium. Software Tools, Tools, Tools - There is no shortage of tools out there. Here are a few lists to start with. The Big List of Virtual Reality Production Resources VR-Awesome VR, AR and Mixed Reality Resources Reality Capture 3D Scanning w/ Structure Sensor Photogrammetry WebVR A-Frame WebVR Experiments WebVR Rocks Architecture VR Sketch - Plugin for Sketchup IrisVR Examples Hypercube - Immersive 360 Video Within - Immersive Storytelling Space VR - Put your eyes up in space Training / Simulation: VR Hospital Operating Room, Factory Floor, Power Plant, Emergency Situations Social VR Sansar High Fidelity Project Nourished - Thanks Diamond! Bigscreen VR - A movie theatre in your HMD Industries VIVE X Portfolio - Emerging VR based startups / industries supported by HTC Vive What Is 5G Good For? A Futuristic Fashion Show With Magic Leap Has The Answer Creative tools and workflows for immersive content creation (pdf) - An industry report by ImmerseUK.org featuring case studies, workflows, and more. Apple Glasses - Recent roundup of rumors about potential Apple products. Taken with a grain of salt while still informative and telling of the state of the emerging tech. Week 6 Questions Locate at least one piece of content (article, video, podcast, research paper, etc) that discusses any aspects of the XR continuum you find intriquing. Sumarize the information and provide your thoughts on its application to a project you have in mind and/or disucss its larger implications for your area of interest (Brand or UX). What questions arise in reponse to the content? How does this technology paradigm impact your anticipated or chosen line of work? How are others exploring the technology and applying it? What questions arise about the current platforms, tools, and workflows? Seek out 2-3 examples of XR experiences and place them on the XR spectrum. In the process, if you discover new tools that enable you to further your project vision, sumarize what they are and how to use them. Identify a few key resources to get started. What do you find exemplary about these experiences? What are their characterisitics and features? What justifies their placement on the spectrum (ie. how do they relate to other types of experiences)? Post your project / research to your blog. Week 6 Media AR Will Spark The Next Big Tech Platform\u2014call It Mirrorworld by Kevin Kelly - Thanks Karen! Everyone should read this. Voices of VR Podcast - Great podcast discussing the many facets of VR. Start with the top 10 episodes . Game UX Summit \u201917 | Dylan Urquidi Unity Labs | XR UX: Today & Tomorrow - A great overview of UX related problems in XR applications. The UX of VR - A curated list of resources to help you on your journey into the User Experience of Virtual Reality. VR as Possibility Space - Technological innovation without humanitarian evolution = dystopian future. VR And AR Mark The Greatest Revolution In The History Of UX/UI Design - Thanks Jonas! Good discussion about aspects of VR/AR relating to UX and UI design. Week 7: Unity \u00b6 Feb 26 / Feb 27 Install Unity Download and Install Unity Step 1: Install Unity Hub - This is a small application for managing multiple versions of Unity. Install this app then proceed to signup for an account and install Unity. Step 2: Install Unity Personal Edition (2018.3.6f1) - Note this is a large install (~5.6 GB). Make sure you are on a fast connection or it will take a long time. Step 3: Launch Unity - Make a new 3D project and begin experimenting with the environment. Getting Started Learning Unity Unity Manual Week 8: Unity / TouchDesigner \u00b6 Mar 5 / Mar 6 Next 2 Weeks Visit MEDIUM Labs at 10am on Friday March 15th I'll be out of town week 10. No class. Final project proposals due by Friday March 22nd Project Updates / Discussion Setup VR Area / Walk through HTC VIVE Setup VR Tools: Unity, SteamVR Runtime , HTC Vive, Visual Studio IDE TouchDesigner HTC Vive Setup How to setup HTC Vive SteamVR Plugin - It's easier to import via Asset store within Unity. Windows 10 only. SteamVR Plugin Documentation [Basics] Getting Started With SteamVR Tools for Prototyping Interactivity A sampling of tools that can be used to quickly prototype interactivity using a variety of mobile devices and communication prototcols such as UDP, DMX, and Open Sound Control (OSC). In the case of Blynk , this incorporates connected hardware solutions. ZIG SIM - Mobile app that exposes device sensor data and transmits over OSC or JSON. ZIG Indicator - Desktop companion app to ZIG SIM that visualizes device sensor data. TouchOSC - Mobile app that enables custom controllers that transmit over OSC. Blynk - IoT platform with mobile app based user experience Game Controllers XBX One and PS4 controllers can be easily connected to Touch Designer or Unity for alternative control of an experience. In Touch Designer: Use the Joystick CHOP. PS4 controllers are accessible on the \"Wireless\" source and XBOX One controllers are avvessible on \"Player 1..4\" sources. In Unity: You have to setup mapping for a controller How To Map Xbox & PS4 Controllers Assets CGTrader Unity Asset Store Free Assets Mega List of 200 Free Unity Assets Free3D Unity Tutorials Unity Tutorials Beginners Guide to Getting Started with Unity - Quick intro tutorial to Unity TouchDesigner Tutorials I've mentioned this tool before. It's worth starting to get familiar with it for some of your work. It's a pretty comprehensive visual programming environment that can work with many types of media and input / output tools such as cameras, kinect, touch controllers, mobile dvices, hardware, lighting, and web based systems. Check out the learning resources I've put together under Learning TouchDesigner . Week 8 Media VR Interface Design Pre-Visualisation Methods by Michael Alger - A great research based video covering several topics relevant to designing VR interfaces. Highly recommend. Be sure to look at video description for a list of references and cooresponding writeup document. 100 Interactive Projects in 100 Days - A great set of projects and experiemnts in learning various technologies for building interactive experiences. Week 9: Work Session \u00b6 Mar 12 / Mar 13 This week we will have a VR work session with Unity and any related programs / topics you are needing or wanting to discuss for your projects. Come with questions. Learning Unity There is a dedicated section called Learning Unity in the left sidebar that includes instructions for using Unity with SteamVR . It includes instructions for setting up a Unity project that has a Player object (you), teleportation functionality, and object interaction (picking up and throwing) functionality. These are a few of the most common types of interactions you might design into your VR experiences. Character Modeling and Rigging Mixamo - This is an Adobe tool that allows you to design characters and animate them. You can export them as FBX files and import into a Unity scene. There are a few parameters to adjust to do this correctly so watch the tutorials below. How to Import Mixamo Animations in Unity Import Mixamo Characters to Unity 2017 Mixamo FAQ - Upload and rig 3D characters Adobe Fuse - This is an Adobe CC tool that allows you to design and customize characters at the body level - head, torso, legs, and arms. It's no longer in development since it's being replaced by Mixamo but it may still be useful if it runs on your machine. It still offers features that Mixamo doesn't yet such as integration with Photoshop. Models can be exported from Fuse and imported to Mixamo for rigging and animation. Mudbox - This is an Autodesk tool that enables you to model characters and objects. Importing Models How to create a Mixamo Rig with Mudbox and 3ds Max - Good tutorial about designing and rigging a model from Mudbox with Mixamo. 3ds Max is used to texture and visualize the rigged model from Mixamo. ZBrush - This is another character modeling tool similar to Mudbox. You can download a 45 day trial if you want to experiment with it. Autodesk AREA - A repository of 3d models to use. Week 9 Media The VR Glossary Digital Bodies - VR, AR, and the Future of Learning Week 10: Work Session \u00b6 Mar 19 / Mar 20 This week I will be out of town. Use the time to work on projects / proposals. Send me any questions via Slack. Final Project Proposals Due by end of week. Spring Break (No Class) \u00b6 Mar 25 - Mar 29 Phase 3: Final Projects \u00b6 Week 11 \u00b6 Apr 2 / Apr 3 Week 12 \u00b6 Apr 9 / Apr 10 Week 13 \u00b6 Apr 16 / Apr 17 Week 14 \u00b6 Apr 23 / Apr 24 Week 15: Studio Showcase \u00b6 Apr 30 / May 1 CM Studio Showcase Wednesday May 1st, 2019 5 pm to 6:30pm :)","title":"Spring 2019"},{"location":"#critical-making-studio-cmci-studio-at-cu-boulder","text":"Nothing is a mistake. There's no win and no fail, there's only make. ~ John Cage Critical Making Studio is the foundational experience enabling students to realize their full potential as creative citizens in CMCI STUDIO. Central to the studio are four courses, Critical Making 1 and 2 (Fall), and Critical Making 3 and 4 (Spring), in which students enter into an experience as transformative and diverse as the participants themselves; all unique threads woven into whole cloth, informing the very fabric of studio culture. The courses aim to ground students in making as a deeply personal practice and ongoing journey in life thereafter, resulting in creative citizens capable of realizing that which they can envision utilizing a combination of their talents, intellect, abilities, creative faculties, and support networks. The studio experience is made possible by 24 hr, 7 days a week, access to a state-of-the-art rapid prototyping shop, media editing suite, and studio workspaces that can be transformed into a variety of configurations supporting activities such as artistic performances and special events. Additionally, access to fellow students, faculty, and industry partners provides an unparalleled educational experience and support network for developing transformative solutions spanning a variety of creative industries.","title":"Critical Making Studio CMCI STUDIO at CU Boulder"},{"location":"#critical-making-3-4","text":"Critical Making Studio 3 & 4 are second semester project-based studio courses that provide a foundation in the creative process of making with new and emerging digital and physical technologies responsible for shaping and reshaping the world around us. In these courses students work towards becoming fluent across digital and physical creative practices used in the development of new products and services. This includes building skills in physical computing and virtual reality technologies, tools, and workflows to design and prototype branded and experience driven products. Date and Time: Critical Making Studio 3 (BD Group) - Tuesdays, 9 am - 12 pm Critical Making Studio 4 (UX Group) - Wednesdays, 9 am - 12 pm Instructor: RJ Duran rj.duran@colorado.edu Slack: @rjduran. #cmstudio on cmcistudio.slack.com Office hours by appointment. Feel free to reach out to me via slack or email. Syllabus: CM 3 Syllabus CM 4 Syllabus See what we're up to! Follow us @criticalmakingstudio and @cmci.studio .","title":"Critical Making 3 &amp; 4"},{"location":"#course-resources","text":"This website is the primary resource for all critical making studio courses. Most of the resources used in the courses are divided up into sections that can be found on the left sidebar. Think of these resources as maps containing many possible tools that could help you accomplish your work and from which you will need to choose some to learn and work with. There are pros and cons to any tool but all have a set of functionalities and a purpose. As with any tool and any kind of personal creative process you are free to choose anything that works for you.","title":"Course Resources"},{"location":"#course-workload","text":"The critical making courses are 3 credit hours each. You should expect to dedicate at least 2-3 hours per credit hour. This translates into a 6-9 hours per week. Consider 6 hours a minimum expectation for one studio course and plan accordingly with your other studio courses. Assignments for the course consist of project-based and process oriented blog posts as well as weekly research, readings, and making . Many of which will be decided each week in class. In general, anything with deliverables is \"due\" the following week by the start of class time. Refer to the Course Deliverables section for more information. The courses are organized in three 5 week phases . Each phase consists of a series of instructor led project-driven topics structured as workshops and studio work sessions covering digital and physical making. It is expected that all students are active participants in each session.","title":"Course Workload"},{"location":"#course-deliverables","text":"Critical making courses are project based and largely driven by student research areas spanning experience design and/or brand design. As such, each deliverable is expected to vary based on the project parameters and requirements. The following outlines the general criteria for course deliverables throughout the semester.","title":"Course Deliverables"},{"location":"#blog-posts","text":"A minimum of 5 posts published to your Critical Making blog . Medium is widely used by most students but any blogging platform / website may be used. Posts can be distributed throughout the semester at any interval. Decide on an interval that works for you and try to follow it. For example, every 2 weeks. Posts are to be submitted via slack #cmstudio . It is recommended that a post includes a variety of media and content to support the subject matter. For example: text, images, video, graphics, photos, mockups, screen captures, tutorials, 3d model viewers (sketchfab), sketches, code, gifs, references, etc. Anything that is required to effectively communicate the details of a project, process, prototype, or idea. The subject matter is of your choosing. Ideally, it falls in line with your interests, research area, project, creative process, etc. For example, you might consider doing a series of tutorials on a topic that interests you or a process/workflow you are currently exploring through the course. Refer back to the Fall semester deliverables for examples of weekly assignments and projects. Posts should be written to the best of your abilities and for a public audience. The post and any accompanying visual content (images, video) will likely be shared on social media. All blog posts are to be submitted by May 2, 2019 (last day of classes).","title":"Blog Posts"},{"location":"#final-project-proposal","text":"Submit a final project proposal anytime before Friday March 22nd (The Friday before Spring Break). The earlier the better so you have time to ask questions, order any supplies you may need, etc. Your proposal should be formatted as a blog post on your critical making blog with all supporting media contained within the post. Deliverable: A new or updated proposal posted to your blog. It should include the following: Project Title Project Summary ~ 1 page max What is it? What problem(s) are you solving? What will it do? How will it work? Key components of your project What resources, skills, and technologies are needed to realize it? ~ Materials, 3d models, CAD, 3d Printing, Electronics, Arduino, Sensors/Devices, Processing, Touch Designer, Unity, HTC VIVE, etc Milestones you have hit thus far and what you plan to do in order to realize it in the weeks following Spring Break. If you need to order some parts, what do you need? What questions do you have? Where do you feel you are lacking in skill and need assistance? Share the URL to your post on slack #cmstudio.","title":"Final Project Proposal"},{"location":"#final-project","text":"The final project produced will be presented at the Spring Showcase on Wednesday May 1st, 2019 at 5pm . Final project blog post due by 11:59pm Monday May 6th (Monday of Finals Week) . Documentation is to be submitted the form of a blog post with all supporting media necessary to explain the project development and outcomes. The general criteria outlined above applies to this final post. I highly suggest preparing a presentation of some kind (slides, video, experience). Be sure to include links to past blog posts and any resources used in the process. What problem did you set out to solve? What is your project all about? How did you accomplish your goals? What resources did you make use of? What challenges did you encounter and how did you overcome them? What worked? What didn't? If this is a part of a larger long-term project, what milestones did you hit? What's next for this project? (Future Work) What are your major takeaways? What did you learn / discover? Note: The final project proposal blog post and final blog post are in addition to the previously described posts. In total, you should have a minimum of 7 blog posts for the semester. Failure to submit all blog posts for this studio will result in a failing grade. Share the URL to your post on slack #cmstudio.","title":"Final Project"},{"location":"#week-1-overview","text":"Jan 15 / Jan 16 Hello 2019! Syllabus Schedule Assignments / Projects Tools of Critical Making - Documenting, Evaluating, Testing, Mapping Research Maps & Frameworks Course Themes This is a list of just a few of the themes we will explore in the weeks ahead. What comes to mind when considering these technologies as things you are likely to encounter in everyday life? Physical Computing Internet of Things VR / AR / MR / Spatial Computing Interactive and Immersive Digital / Physical Experiences Parametric Design Digital Fabrication Automation Robots AI, Machine Learning Various Projects / Products / Possibilities What kinds of projects or ideas move / inspire / intrigue you? Seeing Spaces (Map) by Bret Victor Brixels by Breakfast NY - Platform Tech Minimalist Greeting Robot - Like a plant... but not. Hellcouch - Simple & Fun CNC Machines DIY CNC Wire Bending Machine Delta 3D Printer for Ceramics ( Zibes ) Tinkerkit Braccio Robot Arm , IK Unity Asset - Low cost robot arm kit and Unity asset to control from VR. Dripping Machine for Ceramics Claude Monet\u2019s Immersive VR Experience / Developer Surreal World by Matt Isola Google Earth WebVR by Matt Isola VR Maze by Jim Murphy The Wave VR WITHIN Improbable Studios Project One Studio / Instagram Vvoxstudio / Volvoxlabs / Instagram Moment Factory (Lab) Softlab / Instagram Respons_ve / Instagram Field.io / Field.io Research: Journery into VR / Instagram Symmetry Labs / Instagram Project Inspiration Creative Applications Autodesk Pier 9 Residency Projects 50 of the most important Raspberry Pi Sensors and Components Maps Design thinking origin story plus some of the people who made it all happen - A great map showing the history and evolution of design thinking. Look at the pdf near the end of the article. Envisioning Horizons 2013 Map - An emerging tech map / research done by Envisioning . Age of Entanglement by Neri Oxman - An outstanding article and map / chart (The Krebs Cycle of Creativity). Tim Rodenbroeker - Input / Output Map Bauhaus Curriculum / Bauhaus || The School of Everything Upcoming Events & Opportunities Adobe Creative Jam - Jan 17th, Free. Signup and attend. STUDIO Open House - Thursday, Jan 24th from 4 pm - 8 pm. Plan to attend and show work. BLDG 61 Show: Maker Made - Application Deadline: Jan 26th, 2019. Instructables Epilog X Contest - Jan 7 - Apr 1. Want your very own laser cutter? Submit a project by the deadline. Week 1 Questions Think about the weeks ahead and how they can help you advance a project you are currently working on or investigate a tech stack you are interested in diving deeper into. The best way to succeed / learn in critical making is by asking questions and taking action (aka building something every week). Think in terms of devices, prototypes, and/or experiences as they relate to your other courses. Spend some time this week researching the course themes above and produce a mind map of your interests and ideas. Think about if / where your interests intersect with the technologies we might be exploring and create a map defining the space of possibilities. Whats your question? Post your map to your blog. Week 1 Readings Isaac Asimov: How to Never Run Out of Ideas Again 35 years ago, Isaac Asimov was asked by the Star to predict the world of 2019. Here is what he wrote","title":"Week 1: Overview"},{"location":"#phase-1-physical-computing","text":"","title":"Phase 1: Physical Computing"},{"location":"#week-2-intro-to-arduino","text":"Jan 22 / Jan 23 Arduino is an open-source hardware and software platform for building digital devices and interactive objects that can sense and control objects in the physical and digital world. Inputs (Sensors) -> Behavior (Software) -> Outputs (Action) You can think about this type of device (microcontroller) as the interface between the physical and digital world. It allows you to translate physical phenomena into digital information and act upon it with software (code) to produce a kind of digital or physical output such as flashing a light or turning a motor. The Arduino and connected devices can be thought of as LEGOS or building blocks to construct complex electro-mechanical, interactive, and responsive systems. Hardware Official Arduino Boards Arduino Uno Specs Arduino Uno Pinout Guide There are many different shapes and sizes of Arduino's available, how do you choose hardware for a project? Look for a guide such as the Arduino Comparison Guide by Sparkfun to start. Decide what your project will do and what inputs and outputs it has. Also take into consideration how you plan to use the Arduino. Does it use data from the physical world? Does it need to display information? Do you need everything available in the board or can you get away with a smaller/cheaper/less capable one? How much do you have to spend on the project? Look at the cost of supplies. Luckily most Arduinos are cheap but components and devices can add up. Software Arduino IDE - Download and Install. Arduino Language Reference Serial Monitor (for monitoring board input and output) - Tools > Serial Monitor Built In Examples Blink - Uses a LED Button - Uses a Button AnalogReadSerial - Uses a Knob AnalogInOutSerial - Uses a Knob to dim LED with Pulse Width Modulation (PWM) Resources Learning Basic Electronics Learning Arduino Arduino Based Projects - Start here for project inspiration. Arduino Prototyping Techniques More Projects hardwareux - A great instagram account showcasing projects built with hardware. Stringent, the $15 Wall Plotter Pacman Costumes Upcoming Events & Opportunities Processing Community Day Denver - February 9th, 2019 Week 2 Questions This week I invite you to go deeper than what we cover in class. Continue to work with some of the built in examples that begin to incorporate more hardware or keep it basic and see what you can do with just buttons, knobs, and LEDs. Try out new circuit combinations building off the examples and see what happens. Begin to seek out project examples related to your interests in physical computing so far. Research 3-4 Arduino based physical computing project examples that you find intriguing and related to your project interests and goals. What parts do they use? How much does it all cost? Where do you get all the parts? Is there a \"Bill of Materials\" (aka BOM) for the project? Post your research to your blog. Week 2 Readings Getting Started with Arduino and Genuino UNO The importance of hardware-software integration\u200a\u2014\u200adesigning the Withings scales 5 Things UX Designers Need to Know About Designing Wearables","title":"Week 2: Intro to Arduino"},{"location":"#week-3-input-output-devices","text":"Jan 29 / Jan 30 Arduino Review Breadboards, Wires Describing Circuits: Breadboard View, Schematic View, Block Diagram View Autodesk TinkerCAD Circuit Simulator - A great tool for learning how to build circuits without the hardware. Great for prototyping. Digital vs Physical IO Photoresistor (Physical) -> Arduino -> LCD Display (Physical) Button (Physical) -> Arduino -> USB (Serial Port) -> Processing Sketch (Digital) Button (Physical) -> Arduino -> RGB LED (Physical) Exercise: Sketch out two more digital/physical, physical/physical, or physical/digital signal flows with input and output devices. Sensor Kits 37-to-1 Sensors Kit Explained Datasheets A datasheet is like the user manual for the device. Most are written for a design engineer or technician. For example, look at the datasheet for a Photocell . It contains information about how the device operates and how it was tested by the manufacturer. Other datasheets, such as the Sparkfun Redboard are a bit more visual and easier to read. If you don't know what a part or device is: Step 1: look around for a part number on the device itself or the package it came in or look similar looking things in the area. Perhaps another part has a number on it. Step 2: Google it. If you still can't ID something try to describe it to google. If all else fails, phone a friend. Input Devices Potentiometers - Another name for this is \"Variable Resistors\". Trimpot (Knob) Joystick (Playstation Joystick) Slide Pot (Slider) Buttons / Switches Light Sensor (Photoresistor) Distance / Motion / Proximity Accelerometer Temperature & Many More! Output Devices Light Emitting Diodes (LEDs) RGB LEDs Single/Multiple LEDs Adafruit NeoPixels LCD Display Motors Motors and Selecting the Right One Servo Motors If you are interested in motors, start with trying to hook up and program a servo motor. Adafruit Lesson 14. Servo Motors Hobby Servo Tutorial Sparkfun Servo - Generic High Torque Continuous Rotation (Standard Size) How to use Servo (TinkerCAD Circuits Simulator) Stepper Motors Getting Started with Stepper Motors Relays A relay allows you to control high power AC devices such as a lamp or power strip with a low power digital device / microcontroller such as an Arduino or Raspberry Pi. Beefcake Relay Kit / Assembly Instructions Relay Shield v2.0 / Assembly Instructions Cthulhu Shield - An open source sensory substitution/sensory augmentation development platform for Arduino. Basically, this device allos you to interact with electronics using your toungue. Resources Learning Basic Electronics Opportunities Global Access 2030 (GA2030) - Information in Slack #cmstudio. Week 3 Questions This week I invite you to again go deeper than what we cover in class and/or begin looking at how to build a project based on some of your research from last week. Choose one or more input devices and output devices to explore. You can always count on simple interactions such as button presses and LED flashes as reliable modes of input and output but eventually you might find yourself looking for other devices to build interactive systems. Read the article How Arduino Sensors Actually Work to learn more about various types of devices and their uses. Build and document your experience working with the Arduino and input/output devices of your choosing. What did you build? How does it work? Record a short video demonstrating your project / explorations. Include a summary and circuit diagrams to enable another person to follow your instructions and build their own version. You can use a tool like Fritzing or TinkerCAD Circuits to create a diagram or simulation. Post your project / research to your blog. Week 3 Media Arduino Inputs - Great overview of Inputs, Sensors, and Applications. Arduino Outputs - Great overview of Outputs and Applications. Instructables Arduino Class: Input/Ouput - A great guide to input and output devices in both hardware and simulation via TinkerCAD Circuits. Highly recommend if you need more practice with Arduino basics and don't have all the hardware at hand. The Edge Podcast by Bantam Tools - A new podcast by the Bantam Tools folks about digital fabrication, design, and making things.","title":"Week 3: Input / Output Devices"},{"location":"#week-4-intro-to-raspberry-pi","text":"Feb 5 / Feb 6 Discussion about Maps / Projects / Research Status Updates Global Access 2030 (GA2030) - Any interest? If so, lets talk. Books: Code, Electronics, Computers Code: The Hidden Language of Computer Hardware and Software - A great introduction to code, computers, electronics and how they work together to shape the computational landscape we inhabit. Raspberry Pi A Raspberry Pi is a fully functional single-board computer capable of running various Linux distributions (aka Operating Systems). It's used for all kinds of IoT / connected physical computing applications where internet connectivity, bluetooth, HDMI, audio, or more advanced hardware is required. Workshop: Setup and Configure a Raspberry Pi Different versions. Raspberry Pi 3, Zero, A+, etc. What are the differences? Why use one over another? Pros/Cons? Complete Raspberry Pi comparison chart Whats the difference between Raspberry Pi and Arduino? What do you do with a Raspberry Pi? Raspberry Pi Setup Tutorial Download Raspbian (Lite = No Desktop Environment, Smaller Download. Desktop = GUI Environment, Larger Download) Format and prepare MicroSD card Setup RPi (w/ Command Line Interface. No GUI.) Manually setup Wifi connection, access via SSH, and access via VNC (for headless display) Projects / Devices Make a web frame with Raspberry Pi in 30 minutes Magic Mirror - Original source code for the Mirror in the studio. Want to make your own version? Octoprint DIY Alexa Enabled Device DIY Alexa (AVS) / Raspberry Pi Device How to Build Your Own Amazon Echo with a Raspberry Pi Development Kits for AVS Project Alias / Fast Company Press - Thanks Karen! Media Servers (ie. Roku, Apple TV, etc) Home Devices (ie. Amazon Alexa, Google Home, etc) Dronebot Workshop - Great resource for various in depth tutorials. MeArm v1.0 Hackster Walkthrough Ball Balancing PID System - Intriguing project all around. MagPi Magazine / 50 Great Projects w/ Raspberry Pi Resoures Learning Raspberry Pi Week 4 Questions This week I invite you to revisit your maps / project ideas and ask if and where devices like the Raspberry Pi, Arduino, or another type of single-board computer or device may support the development of that which you envision. Like most, if not all, tools encountered in creative work, these are a means to an end. If these tools resonate with you and/or suport a project you are developing, begin to identify how they will be used and to what end. Identify to 2-3 projects that are closely related to the areas of interest you have in your maps and projects. What about these projects do you consider significant or exemplary? What elements will you build off of to realize your vision? Post your project progress and research to your blog. Week 4 Media The Internet as Material: Empowering the Next Phase of Connected Hardware Innovation - Ayah Bdeir - Solid 2014 / Little Bits Eames: The Architect & The Painter - Must watch documentary about the powerful design duo, Charles and Ray Eames. Aristotle for Everybody: Difficult Thought Made Easy by Mortimer J. Adler Aristotle's Four Causes","title":"Week 4: Intro to Raspberry Pi"},{"location":"#week-5-work-session","text":"Feb 12 / Feb 13","title":"Week 5: Work Session"},{"location":"#phase-2-the-xr-continuum","text":"","title":"Phase 2: The XR Continuum"},{"location":"#week-6-intro-to-vr","text":"Feb 19 / Feb 20 Project Updates / Discussion XR Discussion - Industry, Frameworks, Tools, Use Cases, Getting Started VR Tools: Unity, SteamVR , HTC Vive, Visual Studio X Reality (aka The XR Continum) X Reality (XR or Cross Reality) consists of technology-mediated experiences that combine digital and biological realities. It encompasses a wide spectrum of hardware and software, including sensory interfaces, applications, and infrastructures, that enable content creation for virtual reality (VR) , mixed reality (MR) , augmented reality (AR) , cinematic reality (CR), and more. With these tools, users generate new forms of reality by bringing digital objects into the physical world and bringing physical world objects into the digital world. ( Wikipedia ) Virtual Reality (VR) Virtual? Augmented? Mixed? The Reality of why \u201cxR\u201d is the perfect catchall Exploring the Virtuality Continuum and its terminology The Ultimate Guide for XR Evangelists - If you only read one of these articles. Read this one. XR is a new way to consider the reality continuum Reality\u2013virtuality continuum Unity Manual: XR Hardware Popular VR HMD's (Late 2017, Early 2018) HTC Vive (Primarily PC Based Development, VR Capable Hardware Required) Oculus (Cross Platform Development, VR Capable Hardware Required) Samsung Gear VR (Cross Platform Development, Mobile Based) Google Daydream (Cross Platform Development, Mobile Based) Next Gen HMD's (Trends: Increased Resolution and Performance, Portable, Wireless, Untethered, App Ecosystems) Occipital Bridge (Smartphone powered HMD with spatial tracking) Vive Pro - Just announced at CES 2018 Oculus Go / Mi VR Standalone (Xiaomi) (Cheap, Smartphone Powered, Social VR) Daydream StandloneVR Magic Leap One (Creator Edition) / Verge , Rolling Stone Vive Pro, Vive Pro Eyes The State of VR Hardware, GPU's, and Rendering Technology VR Hardware - Screens, Cameras, Sensors, Computers, Controllers, Cables, Trackers Vive Trackers , Valve 'Knuckles' , VIVE Accessories Teslasuit - Full body haptic suit PC = 1, Apple = 0 ( The Latest Gaming Laptops from CES 2018 , Apple hardware still isn't quite there yet... , Apple External Graphics Development Kit ) NVIDIA VR Supported GPU's Goodbye Uncanny Valley - A great overview of computer graphics, rendering technologies, and a spectrum of works exploring the future of the CG medium. Software Tools, Tools, Tools - There is no shortage of tools out there. Here are a few lists to start with. The Big List of Virtual Reality Production Resources VR-Awesome VR, AR and Mixed Reality Resources Reality Capture 3D Scanning w/ Structure Sensor Photogrammetry WebVR A-Frame WebVR Experiments WebVR Rocks Architecture VR Sketch - Plugin for Sketchup IrisVR Examples Hypercube - Immersive 360 Video Within - Immersive Storytelling Space VR - Put your eyes up in space Training / Simulation: VR Hospital Operating Room, Factory Floor, Power Plant, Emergency Situations Social VR Sansar High Fidelity Project Nourished - Thanks Diamond! Bigscreen VR - A movie theatre in your HMD Industries VIVE X Portfolio - Emerging VR based startups / industries supported by HTC Vive What Is 5G Good For? A Futuristic Fashion Show With Magic Leap Has The Answer Creative tools and workflows for immersive content creation (pdf) - An industry report by ImmerseUK.org featuring case studies, workflows, and more. Apple Glasses - Recent roundup of rumors about potential Apple products. Taken with a grain of salt while still informative and telling of the state of the emerging tech. Week 6 Questions Locate at least one piece of content (article, video, podcast, research paper, etc) that discusses any aspects of the XR continuum you find intriquing. Sumarize the information and provide your thoughts on its application to a project you have in mind and/or disucss its larger implications for your area of interest (Brand or UX). What questions arise in reponse to the content? How does this technology paradigm impact your anticipated or chosen line of work? How are others exploring the technology and applying it? What questions arise about the current platforms, tools, and workflows? Seek out 2-3 examples of XR experiences and place them on the XR spectrum. In the process, if you discover new tools that enable you to further your project vision, sumarize what they are and how to use them. Identify a few key resources to get started. What do you find exemplary about these experiences? What are their characterisitics and features? What justifies their placement on the spectrum (ie. how do they relate to other types of experiences)? Post your project / research to your blog. Week 6 Media AR Will Spark The Next Big Tech Platform\u2014call It Mirrorworld by Kevin Kelly - Thanks Karen! Everyone should read this. Voices of VR Podcast - Great podcast discussing the many facets of VR. Start with the top 10 episodes . Game UX Summit \u201917 | Dylan Urquidi Unity Labs | XR UX: Today & Tomorrow - A great overview of UX related problems in XR applications. The UX of VR - A curated list of resources to help you on your journey into the User Experience of Virtual Reality. VR as Possibility Space - Technological innovation without humanitarian evolution = dystopian future. VR And AR Mark The Greatest Revolution In The History Of UX/UI Design - Thanks Jonas! Good discussion about aspects of VR/AR relating to UX and UI design.","title":"Week 6: Intro to VR"},{"location":"#week-7-unity","text":"Feb 26 / Feb 27 Install Unity Download and Install Unity Step 1: Install Unity Hub - This is a small application for managing multiple versions of Unity. Install this app then proceed to signup for an account and install Unity. Step 2: Install Unity Personal Edition (2018.3.6f1) - Note this is a large install (~5.6 GB). Make sure you are on a fast connection or it will take a long time. Step 3: Launch Unity - Make a new 3D project and begin experimenting with the environment. Getting Started Learning Unity Unity Manual","title":"Week 7: Unity"},{"location":"#week-8-unity-touchdesigner","text":"Mar 5 / Mar 6 Next 2 Weeks Visit MEDIUM Labs at 10am on Friday March 15th I'll be out of town week 10. No class. Final project proposals due by Friday March 22nd Project Updates / Discussion Setup VR Area / Walk through HTC VIVE Setup VR Tools: Unity, SteamVR Runtime , HTC Vive, Visual Studio IDE TouchDesigner HTC Vive Setup How to setup HTC Vive SteamVR Plugin - It's easier to import via Asset store within Unity. Windows 10 only. SteamVR Plugin Documentation [Basics] Getting Started With SteamVR Tools for Prototyping Interactivity A sampling of tools that can be used to quickly prototype interactivity using a variety of mobile devices and communication prototcols such as UDP, DMX, and Open Sound Control (OSC). In the case of Blynk , this incorporates connected hardware solutions. ZIG SIM - Mobile app that exposes device sensor data and transmits over OSC or JSON. ZIG Indicator - Desktop companion app to ZIG SIM that visualizes device sensor data. TouchOSC - Mobile app that enables custom controllers that transmit over OSC. Blynk - IoT platform with mobile app based user experience Game Controllers XBX One and PS4 controllers can be easily connected to Touch Designer or Unity for alternative control of an experience. In Touch Designer: Use the Joystick CHOP. PS4 controllers are accessible on the \"Wireless\" source and XBOX One controllers are avvessible on \"Player 1..4\" sources. In Unity: You have to setup mapping for a controller How To Map Xbox & PS4 Controllers Assets CGTrader Unity Asset Store Free Assets Mega List of 200 Free Unity Assets Free3D Unity Tutorials Unity Tutorials Beginners Guide to Getting Started with Unity - Quick intro tutorial to Unity TouchDesigner Tutorials I've mentioned this tool before. It's worth starting to get familiar with it for some of your work. It's a pretty comprehensive visual programming environment that can work with many types of media and input / output tools such as cameras, kinect, touch controllers, mobile dvices, hardware, lighting, and web based systems. Check out the learning resources I've put together under Learning TouchDesigner . Week 8 Media VR Interface Design Pre-Visualisation Methods by Michael Alger - A great research based video covering several topics relevant to designing VR interfaces. Highly recommend. Be sure to look at video description for a list of references and cooresponding writeup document. 100 Interactive Projects in 100 Days - A great set of projects and experiemnts in learning various technologies for building interactive experiences.","title":"Week 8: Unity / TouchDesigner"},{"location":"#week-9-work-session","text":"Mar 12 / Mar 13 This week we will have a VR work session with Unity and any related programs / topics you are needing or wanting to discuss for your projects. Come with questions. Learning Unity There is a dedicated section called Learning Unity in the left sidebar that includes instructions for using Unity with SteamVR . It includes instructions for setting up a Unity project that has a Player object (you), teleportation functionality, and object interaction (picking up and throwing) functionality. These are a few of the most common types of interactions you might design into your VR experiences. Character Modeling and Rigging Mixamo - This is an Adobe tool that allows you to design characters and animate them. You can export them as FBX files and import into a Unity scene. There are a few parameters to adjust to do this correctly so watch the tutorials below. How to Import Mixamo Animations in Unity Import Mixamo Characters to Unity 2017 Mixamo FAQ - Upload and rig 3D characters Adobe Fuse - This is an Adobe CC tool that allows you to design and customize characters at the body level - head, torso, legs, and arms. It's no longer in development since it's being replaced by Mixamo but it may still be useful if it runs on your machine. It still offers features that Mixamo doesn't yet such as integration with Photoshop. Models can be exported from Fuse and imported to Mixamo for rigging and animation. Mudbox - This is an Autodesk tool that enables you to model characters and objects. Importing Models How to create a Mixamo Rig with Mudbox and 3ds Max - Good tutorial about designing and rigging a model from Mudbox with Mixamo. 3ds Max is used to texture and visualize the rigged model from Mixamo. ZBrush - This is another character modeling tool similar to Mudbox. You can download a 45 day trial if you want to experiment with it. Autodesk AREA - A repository of 3d models to use. Week 9 Media The VR Glossary Digital Bodies - VR, AR, and the Future of Learning","title":"Week 9: Work Session"},{"location":"#week-10-work-session","text":"Mar 19 / Mar 20 This week I will be out of town. Use the time to work on projects / proposals. Send me any questions via Slack. Final Project Proposals Due by end of week.","title":"Week 10: Work Session"},{"location":"#spring-break-no-class","text":"Mar 25 - Mar 29","title":"Spring Break (No Class)"},{"location":"#phase-3-final-projects","text":"","title":"Phase 3: Final Projects"},{"location":"#week-11","text":"Apr 2 / Apr 3","title":"Week 11"},{"location":"#week-12","text":"Apr 9 / Apr 10","title":"Week 12"},{"location":"#week-13","text":"Apr 16 / Apr 17","title":"Week 13"},{"location":"#week-14","text":"Apr 23 / Apr 24","title":"Week 14"},{"location":"#week-15-studio-showcase","text":"Apr 30 / May 1 CM Studio Showcase Wednesday May 1st, 2019 5 pm to 6:30pm :)","title":"Week 15: Studio Showcase"},{"location":"books/","text":"Local Libraries \u00b6 CU Boulder Library Catalog (Chinook) Boulder Public Library Technical Publishers \u00b6 Awesome Book Authoring Packt Publishing , Free Tech Ebook of the Day O'Reilly Safari Apress The Pragmatic Bookshelf Code, Electronics, Computers \u00b6 Code: The Hidden Language of Computer Hardware and Software Encyclopedia of Electronic Components Volume 1: Resistors, Capacitors, Inductors, Switches, Encoders, Relays, Transistors Encyclopedia of Electronic Components Volume 2: LEDs, LCDs, Audio, Thyristors, Digital Logic, and Amplification Encyclopedia of Electronic Components Volume 3: Sensors for Location, Presence, Proximity, Orientation, Oscillation, Force, Load, Human Input, Liquid ... Light, Heat, Sound, and Electricity Creative Coding \u00b6 Processing: A Programming Handbook for Visual Designers and Artists Generative Design: Visualize, Program, and Create with Processing - ( Website , Code ) The Nature of Code: Simulating Natural Systems with Processing - ( Free Version ) The Computational Beauty of Nature: Computer Explorations of Fractals, Chaos, Complex Systems, and Adaptation Industrial Design \u00b6 The Industrial Design Reference & Specification Book: Everything Industrial Designers Need to Know The Design of Everyday Things: Revised and Expanded Edition Making It: Manufacturing Techniques for Product Design Stuff Matters: Exploring the Marvelous Materials That Shape Our Man-Made World The Industrial Design Reader Graphic Design \u00b6 Graphic Design: The New Basics: Second Edition, Revised and Expanded 3D Printing \u00b6 Printing Things: Visions and Essentials for 3D Printing Visualizing Mathematics with 3D Printing Materials \u00b6 Stuff Matters: Exploring the Marvelous Materials That Shape Our Man-Made World Materials for Design Materials and Design, Third Edition: The Art and Science of Material Selection in Product Design Transmaterial: A Catalog of Materials That Redefine our Physical Environment Manufacturing \u00b6 Manufacturing Processes for Design Professionals Fundamentals of Modern Manufacturing: Materials, Processes, and Systems Media Arts \u00b6 The New Media Reader Form+Code in Design, Art, and Architecture","title":"Books"},{"location":"books/#local-libraries","text":"CU Boulder Library Catalog (Chinook) Boulder Public Library","title":"Local Libraries"},{"location":"books/#technical-publishers","text":"Awesome Book Authoring Packt Publishing , Free Tech Ebook of the Day O'Reilly Safari Apress The Pragmatic Bookshelf","title":"Technical Publishers"},{"location":"books/#code-electronics-computers","text":"Code: The Hidden Language of Computer Hardware and Software Encyclopedia of Electronic Components Volume 1: Resistors, Capacitors, Inductors, Switches, Encoders, Relays, Transistors Encyclopedia of Electronic Components Volume 2: LEDs, LCDs, Audio, Thyristors, Digital Logic, and Amplification Encyclopedia of Electronic Components Volume 3: Sensors for Location, Presence, Proximity, Orientation, Oscillation, Force, Load, Human Input, Liquid ... Light, Heat, Sound, and Electricity","title":"Code, Electronics, Computers"},{"location":"books/#creative-coding","text":"Processing: A Programming Handbook for Visual Designers and Artists Generative Design: Visualize, Program, and Create with Processing - ( Website , Code ) The Nature of Code: Simulating Natural Systems with Processing - ( Free Version ) The Computational Beauty of Nature: Computer Explorations of Fractals, Chaos, Complex Systems, and Adaptation","title":"Creative Coding"},{"location":"books/#industrial-design","text":"The Industrial Design Reference & Specification Book: Everything Industrial Designers Need to Know The Design of Everyday Things: Revised and Expanded Edition Making It: Manufacturing Techniques for Product Design Stuff Matters: Exploring the Marvelous Materials That Shape Our Man-Made World The Industrial Design Reader","title":"Industrial Design"},{"location":"books/#graphic-design","text":"Graphic Design: The New Basics: Second Edition, Revised and Expanded","title":"Graphic Design"},{"location":"books/#3d-printing","text":"Printing Things: Visions and Essentials for 3D Printing Visualizing Mathematics with 3D Printing","title":"3D Printing"},{"location":"books/#materials","text":"Stuff Matters: Exploring the Marvelous Materials That Shape Our Man-Made World Materials for Design Materials and Design, Third Edition: The Art and Science of Material Selection in Product Design Transmaterial: A Catalog of Materials That Redefine our Physical Environment","title":"Materials"},{"location":"books/#manufacturing","text":"Manufacturing Processes for Design Professionals Fundamentals of Modern Manufacturing: Materials, Processes, and Systems","title":"Manufacturing"},{"location":"books/#media-arts","text":"The New Media Reader Form+Code in Design, Art, and Architecture","title":"Media Arts"},{"location":"cc/","text":"IDEs and Applications \u00b6 Processing OpenFrameworks Cinder Max/MSP/Jitter vvvv Structure Synth OpenSCAD Context Free Touch Designer Pure Data Web Based \u00b6 WebGL , Does my browser support WebGL? , WebGL Report three.js , Learning Three.js D3.js p5.js , p5.js web editor , A free-to-use classrooms system for p5.js CreateJS ChartJS WebVR Paper.js Planck.js GLSL \u00b6 Sandboxes \u00b6 Shadertoy GLSL Sandbox glslb.in Basics \u00b6 The Book of Shaders , TBoS Editor Pixel Shaders Shadershop stackgl - Open Source Software Ecosystem for WebGL. Shader School - Based on stackgl. Start here. WebGL Workshop - Based on stackgl. The sequel to shader-school: Learn the WebGL API Physics / Motion \u00b6 Physics Simulations UX In Motion","title":"Creative Coding"},{"location":"cc/#ides-and-applications","text":"Processing OpenFrameworks Cinder Max/MSP/Jitter vvvv Structure Synth OpenSCAD Context Free Touch Designer Pure Data","title":"IDEs and Applications"},{"location":"cc/#web-based","text":"WebGL , Does my browser support WebGL? , WebGL Report three.js , Learning Three.js D3.js p5.js , p5.js web editor , A free-to-use classrooms system for p5.js CreateJS ChartJS WebVR Paper.js Planck.js","title":"Web Based"},{"location":"cc/#glsl","text":"","title":"GLSL"},{"location":"cc/#sandboxes","text":"Shadertoy GLSL Sandbox glslb.in","title":"Sandboxes"},{"location":"cc/#basics","text":"The Book of Shaders , TBoS Editor Pixel Shaders Shadershop stackgl - Open Source Software Ecosystem for WebGL. Shader School - Based on stackgl. Start here. WebGL Workshop - Based on stackgl. The sequel to shader-school: Learn the WebGL API","title":"Basics"},{"location":"cc/#physics-motion","text":"Physics Simulations UX In Motion","title":"Physics / Motion"},{"location":"fall-2018/","text":"Critical Making Studio CMCI STUDIO at CU Boulder \u00b6 Nothing is a mistake. There's no win and no fail, there's only make. ~ John Cage Critical Making Studio is the foundational experience enabling students to realize their full potential as creative citizens in CMCI STUDIO. Central to the studio are four courses, Critical Making 1 and 2 (Fall), and Critical Making 3 and 4 (Spring), in which students enter into an experience as transformative and diverse as the participants themselves; all unique threads woven into whole cloth, informing the very fabric of studio culture. The courses aim to ground students in making as a deeply personal practice and ongoing journey in life thereafter, resulting in creative citizens capable of realizing that which they can envision utilizing a combination of their talents, intellect, abilities, creative faculties, and support networks. The studio experience is made possible by 24 hr, 7 days a week, access to a state-of-the-art rapid prototyping shop, media editing suite, and studio workspaces that can be transformed into a variety of configurations supporting activities such as artistic performances and special events. Additionally, access to fellow students, faculty, and industry partners provides an unparalleled educational experience and support network for developing transformative solutions spanning a variety of creative industries. Critical Making 1 & 2 \u00b6 Critical Making Studio 1 & 2 are first semester project-based studio courses that provide a foundation in the creative process of making with new and emerging digital and physical technologies responsible for shaping and reshaping the world around us. In these courses students work towards becoming fluent across digital and physical creative practices used in the development of new products and services. This includes developing project documentation, building skills in modern web development tools and workflows, 2D/3D modeling using Computer-Aided Design (CAD) tools such as Rhino and Autodesk Fusion 360, and leveraging digital fabrication tools and materials such as 3D printing and CNC machining to produce physical prototypes. Date and Time: Critical Making Studio 1 (BD Group) - Tuesdays, 9 am - 12 pm Critical Making Studio 2 (UX Group) - Wednesdays, 9 am - 12 pm Instructor: RJ Duran rj.duran@colorado.edu Slack: @rjduran. #cmstudio on cmcistudio.slack.com Office hours by appointment. Feel free to reach out to me via slack or email. Syllabus: CM 1 Syllabus CM 2 Syllabus See what we're up to! Follow us @criticalmakingstudio and @cmci.studio . Course Resources \u00b6 This website is the primary resource for all critical making studio courses. Most of the resources used in the courses are divided up into sections that can be found on the left sidebar. Think of these resources as maps containing many possible tools that could help you accomplish your work and from which you will need to choose some to learn and work with. There are pros and cons to any tool but all have a set of functionalities and a purpose. As with any tool and any kind of personal creative process you are free to choose anything that works for you as long as the work gets done. As we move through the phases of the course feel free to recommend, add, and update the tools we and you find useful. Also, note that anything specific and relevant to an assignment or project will be listed out under the assignment or project deliverables. Workload \u00b6 The critical making courses are 3 credit hours each. You should expect to dedicate at least 2-3 hours per credit hour. This translates into a 6-9 hours per week. Consider 6 hours a minimum expectation for one studio course and plan accordingly with your other studio courses. Assignments given each week are \"due\" the following week by the start of class time. Important: Assignments are not graded but projects are. Completing all assignments is HIGHLY recommended. It may be difficult to complete projects on time if you don't complete assignments on time. Projects are assigned in the 3rd week of each phase and due by 11:59pm on the date specified in the project deliverables. Projects can be thought of as a more developed assignment as they will build on the skills acquired in the phase. Phase 1: Going Digital \u00b6 Week 1: Intro to Critical Making, Project Management, Documentation \u00b6 Aug 28 / Aug 29 Introductions ( Slides ) Course Website / Schedule / Workload / Resources Project Management Tools BLDG61 Boulder Library Makerspace Emerging Technology MIT Technology Review - 10 Breakthrough Technologies 2018 Google I/O 2018 Recap Examples of Creative Work / Documentation of Process Creative Applications IDEO Sarah Jones - Artist / Illustrator Jonathan Harris - Today Mike Winklemann aka Beeple Ash Thorp Bradley Munkowitz aka Gmunk UVA The Made Shop - Adobe Remix (2013) - Denver Based Shop Legwork Studio - Denver Based Agency Meow Wolf Otherlab Tycho Olafur Eliasson The Mill Breakfast NY Pioneer Works Subrosa Mullenlowe Autodesk Pier 9 Residency Projects Creativity, Vulnerability, Practice, Making How to build your creative confidence - David Kelley @ TED 2012 The power of vulnerability - Brene Brown (June 2010 at TEDxHouston) We Make Things (Video) Ira Glass and the Creative Gap All Artists Must Overcome , On Being Creative (Video) Other (Creative) Resources / Projects Designspiration Behance Grey Scale Gorilla - Cinema4D Motion Graphics Tutorials Assignment 0: Setup a \"Maker Blog\" \u00b6 A place to document your work for Critical Making. This can be a part of your current portfolio website or a separate website or blog. Regardless of where it exists, you need to have a place for sharing your work using images, video, and text. Everyone in STCM has a Medium blog they are working out of for RE Studio. You are free to use this as your CM blog if you wish. You may want to make use of post categories for your different types of posts in this case. For example, tag a post with \"Critical Making\". Examples from last year: Sarah Safranski Jim Murphy Matt Isola Nikki Cavalier Nick Balderston . Examples of similar sites: Chikara Inamura (HTMAA 2014) Matt Keeter (HTMAA 2011) Christos Tzamos(HTMAA 2014) Zach Seibold (HTMAA 2014) Merav Gazit (HTMAA 2014) Dorota Orlof (FAB Academy 2018 Barcelona) Assignment 1: Final Project Concept \u00b6 Create a \"model\" (sketch, raster, vector, 2D, 3D, render, animate, simulate, etc.) of a possible final project. The word \"model\" is meant to be understood as any kind of digital or physical representation of an idea or concept you are excited about pursuing in your course of study in critical making. Possible examples: websites, web applications, objects, artifacts, products, digital-physical experiences, installations, performances, platforms, artworks, tools, machines, devices, etc. Begin to think about the various concepts, tools, and technologies associated with your brand design or UX studio courses and how they may inform the development of such a project. Deliverable: Post your concept on your blog and share a link to it via Slack #cmstudio before the next class. Include images, video, text, sketches, etc that support your (big) idea. We will discuss your concepts in class next week. Optional: You might consider recording a short video describing your project using a screen capture tool such as Screencast-o-matic or from your phone if it makes sense. If you do this, create a Youtube account, upload your video, then embed the video in your blog post. CM1 [Tues]: Due Sept 4 CM2 [Wed]: Due Sept 5 Week 2: MacOS/Terminal, Web Development I \u00b6 Sept 4 / Sept 5 The next few weeks will be about current web development paradigms and practices -- getting comfortable with programming for the web, learning how to use web development tools and workflows to solve problems, and building a personal practice around using these technologies for projects. If you are curious about the history of electronics, computers, computer science, programming, and the Internet, check out the Histories section. I strongly advise you to start getting familiar with the various histories and technological underpinnings of the technologies you use every day. Remember, it's also about building awareness and understanding about the systems that run our world. These resources are meant to work through at your own speed and as you begin to ask deeper questions about why something works and how something works. In the weeks ahead you will begin to build your web development skills inside and outside of class. We will approach each language and weekly topic with simplicity in mind and focus on understanding fundamental concepts. To build advanced skills with the tools we discuss you will need to dedicate time outside of class for further study and for building projects. We will approach topics in a hands-on workshop format so be prepared to dive in. The Web What is the Web? What is its purpose? The big idea: The purpose of building websites and web applications is to make an idea accessible to one or more people through the Internet. How does it work? -- Recall what you saw in RE Studio Week 1 starting on Slide 25. What is it made of? -- Hardware, Software, Servers, Domains, Protocols, Stacks, Languages, Frameworks, Browsers, APIs, Tools, Modules, Databases, Ports, Data, Information, CMSes (Wordpress, Squarespace, Wix, etc), etc. The Industry What is web development in 2018? What does a web developer do? How do you build web development skills? (HINT: Practice, practice, practice) Stacks Front-End = HTML, CSS, Javascript, Design, Interactivity, Responsive Back-End = Ruby, Python, PHP, Node, MySQL, PostgreSQL, MongoDB, Dev Ops Full-Stack = Front-End + Back-End + DevOps + Design Good Reads Read through each one. Click on the links. Read about the tech. Take a breath. Begin to understand how things connect - make a map if you need to. Don't get overwhelmed. Make a list of the technologies you read about. Try some of them out in your sandbox. Front End, Back End, Full Stack\u2014What Does it All Mean? Front-End vs Back-End vs Full-Stack on Udacity A Guide to Becoming a Full-Stack Developer in 2017 - If you only read one of these, read this one. How it feels to learn JavaScript in 2016 - Read through this and see if you can begin to make sense of the current development ecosystem. (Note: Its complex and a little bit insane but this guy makes a good (fun) read of it.) Development Environment Lets jump into it. Tools, tools and more tools. Working with web technologies requires constant learning of programming languages, tools, and workflows. The only constant is change. Especially to existing and widely used code bases (ie. anything open source). In this field you never stop learning and you are always practicing. Text Editors TextEdit - Default editor on MacOS ASCII vs Binary Files Atom - Free editor by Github Atom Packages Atom Flight Manual My Atom Setup - Includes list of packages I have installed. Visual Studio Code (VSCode) - Free editor by Microsoft Terminal How I use terminal (themes, .bash_profile, etc) Learning Terminal Git - Version control tool Github - Website that hosts git repositories Node.js / npm Local Development Server - There are several ways to work with a local web server. Some are simpler than others to setup and configure. Its mostly a matter of personal preference and project preference which local web server option you use. You can refer to the cm-code/live-servers repo for simple examples. Chrome Browser Chrome Dev Tools (Inspector for debugging). Access via: View > Developer > Developer Tools within Chrome. Languages In the resources here you can find some learning pathways for building skills with these tools. Make time to read through the basics of all the languages and try things out. Most importantly, seek to apply the skills you are learning towards projects. HTML / Learning HTML & CSS CSS Javascript / Learning Javascript Node.js We will only talk about Node.js briefly in order to install Node and npm. We will go deeper into how it works in the weeks ahead. In Class Examples We will work through these things in class so you have a good foundation to experiment with web languages. Terminal Location on MacOS: Applications/Utilities/Terminal.app Whats the difference between terminal applications (/usr/bin) and MacOS .app applications? How do you display hidden files on MacOS? Look here Customize your Terminal in Terminal > Preferences. It helps to make the text larger on most screens. Common commands: cd, ls, mkdir, rmdir, rm, mv, cp, pwd, man, touch . Think of all these commands as tiny applications that have no GUI. They are very old and have been around since the start of Unix based systems (Read this to learn more: Looking back at OS X's origins ). Look at MacOS/Linux/Unix Command Line Cheat Sheet to see more information about common commands. Working with directories and files: cd <folder> - Goto into a folder cd .. - Go up one level cd ../<folder> - Go up one level (to parent folder) and into a child folder cd ../.. - Go up two levels etc Tab completion - When you start typing in a terminal you can hit tab to complete the command if the file or folder you are going to use is available. If you hit Tab twice, you will see the contents of a folder. Git You will likely not have Git installed on your machine. You will know if you have it or not when you type git into the Terminal. You may be prompted to install XCode Developer Tools in doing so. You have two options to install git: Install the XCode Developer tools or download the installer from git-scm . After installing it the git command should work in the Terminal. Github Workflow Make Repo on Github. If you check the box to add a README file it will include a README.md file in the repo. This is the main information file shown when you goto the repo URL. Markdown = text file with special syntax that gets converted into HTML. Review Markdown Cheatsheet . Command Line Cheat Sheet by git-tower - This one is great! Clone Repo: git clone <repo url> . For Example, git clone git@github.com:rjduran/cm-sandbox.git . Note the URL and its use of \"git\" or \"https\". Use \"https\" to start. You need to go through the Github tutorial below to connect to Github via SSH. Make some changes: (Using text editor of some kind - Atom, vi, TextEdit, notepad) Stage the changes: git add index.html Commit the changes: git commit -m \"my message describing changes\" Push the changes: git push Pro tip: After setting up your Github account, read through Connecting to Github with SSH to setup your system to connect securely to Github and not require you to enter your username and password credentials each time you push changes. Download and install Node.js, npm, and live-server (Step 1 of assignment below). Places to look to for help Stackoverflow - The most used development community / forum. At some point you will use this. Its a great place to ask good questions and answer things you know about. Assignment 2: Build a Sandbox \u00b6 Create a local development workspace (aka sandbox ) to prototype with HTML, CSS, and JS. By the end of this you should have something that looks like my cm-sandbox repo. What is the purpose of this? To become familiar with the file types, languages, and how they work together. At a fundamental level this approach to experimentation establishes good development practices and efficient workflows. It also supports hands-on learning, which is the only way to improve as a programmer. As a programmer you want to be in control of your code, tools, workflow, and system. ( Don't let the computer control you. ). Tip Pro Tip: Setup a working directory for all programming projects (For Example, /Users/username/code ). This directory then becomes your goto location for anything having to do with code, programming, cloning repos from github, experimenting with new tools and software, and more. This is precisely how I organize my system. Download and install Node.js and live-server . (we will do this part in class). Verify node and npm are installed via Terminal: node -v && npm -v . You should see two version numbers matching what you installed. Install live-server globally: npm install -g live-server If you have done all this correctly you should be able to download a zip of (or clone the) cm-code git repo and run the hello-live-server example via Terminal. Create a Github account and make a repository for your web project (as demonstrated in class). You can name the repo anything you want. For example, \"cm-sandbox\". Clone a copy of this repository to your machine via Terminal. git clone <repo-url> . Setup your machine to make use of a local development folder and local development server (See tip above and Step 1). Create 3 files in your web project repository folder (ie. the project \"folder\" or \"repo\" you created and then cloned from Github in step 3). index.html - ( quick boilerplate ) style.css script.js Launch your local development server ( live-server ) and code editor of choice (ex. Atom or VSCode) and make some changes to the files in your web project. Remember the purpose of a local development environment is to \"simulate\" how the code will perform when uploaded to another web server. Create a basic html page using validated markup (Hint: Using a tool like FreeFormatter , check that your code works as expected.) Add some css selectors to your style.css file. Optional: Add some basic Javascript functionality to your script.js file. Commit the file changes to your Github repo. Note your repo URL and include it in your post. Deliverables: A 1 min video screen capture demonstrating your sandbox environment and development folder structure. Include a link to your Github repo and embed the video in your blog post. Share the URL to your post on slack #cmstudio. Look into using a screen capture tool such as Screencast-o-matic to document your workflow. Upload your video to youtube or vimeo. Optional (but highly recommended): A writeup on your blog about your learning experience. What hurdles did you encounter and how did you overcome them? What worked and what didn't? What new tools did you try? How would you explain what you've done to someone that doesn't know anything about web development and the tools used? CM1 [Tues]: Due Sept 11 CM2 [Wed]: Due Sept 12 Resources: Version Control (Git / Github) Github Tutorial (10 mins) - Non command line (Terminal) tutorial. Git - The Simple Guide - Command line based tutorial. Connecting to Github with SSH Git & Github Tutorial on Udacity - Command line based tutorial. Start a new git repository git/github guide a minimal tutorial The most important git commands Git Immersion - Advanced Tutorial. Work through this once you get the hang of working on the command line. Command Line Cheat Sheet by git-tower - This one is great! Version Control Workflow Cheat Sheet for Git (git0tower) Terminal Learning Terminal - A learning pathway for beginners How to use Terminal on Mac , How to use a Terminal on Windows MacOS/Linux/Unix Command Line Cheat Sheet , Mac Terminal Cheat Sheet , Another Cheat Sheet How to show hidden files and folders including ~/Library on a Mac - The benefit of doing this is you can see whats actually on your machine. By default, MacOS and Windows systems hide lots of stuff. To be a master of your machine(s) you need to begin learning whats hidden just under the surface. Markdown Mastering Markdown Markdown Docs Markdown Cheatsheet How to write a great README for your GitHub project - These are only examples. Not all projects need every detail in the readme as described. The contents of a readme really depend on the type of project and audience. In general, its good to enable someone else to download and run your code if you are sharing it to Github. Awesome README - A massive list of README examples and resources. Week 3: Web Development II \u00b6 Sept 11 / Sept 12 Terminal Review Git/Github Review What are the steps to working with a git repo? ( Hint: Look at the Github Workflow (above) in the notes from last week. ) How else can you use git repos? Do you need to use Github? Web Development 101 Web Languages (HTML/CSS/JS) Learning HTML & CSS Learning Javascript Responsive Development - Desktop/Mobile, Media Queries, CSS/JS Frameworks, etc Daily CSS Design In Class Examples Question: How do you go about building a website or web application from scratch? In general, the process and timeline from idea to a functioning live site that matches the needs of all parties (client / users / etc) can vary greatly based on a host of factors such as design cycles, development timelines, paying/non-paying clients, branding, UX research, site complexity, money, and more. On top of that, all design / development shops, agencies, freelancers and any creative parties involved with the process typically have their own way of working. There are different standards adopted or created by the various parties and it's common for some tool sets to change project by project and year by year. In many ways, it's still such a craft and creative process to bring websites and applications to life. To better understand the process, these are a few questions you may want to ask when starting: Decide what you are going to build. What is the idea? What will the website (or application) do? What is it's purpose? Who is it for? What kind of website it it? Ecommerce? Personal? Portfolio? Blog? Album? Game? Social Media Platform? (Again, whats the purpose of it?) What does it look like? Branding? UX? Sketch, sketch, and more sketching (like on paper or wireframe tools or Sketch ) Decide how you are going to build it. What tools will you need to use to realize the idea? What is the domain? Where is it hosted? Build from ground up or use a theme or template? What CSS and/or JS libraries will be used (if any)? To CMS or not to CMS? Decide how a person may use it. Who is the audience? What platforms will it be accessed on? This will influence what the tech needs are. Decide what kind of content it has. Or at least what content will be aggregated over time. Give all relevant content a place. What kind of data is collected and used? Timeline What's the timeline from start to finish? Is a website ever finished? Money -- What's your time worth? What happens after the site is live? Maintenance cycles? There are probably other things to consider but this is a good starter list. Here's an article that really distills it down a bit -- How to Make a Website in 2018 . As you progress in your understanding about web design and development, think about the questions that come up for you and how you might proceed. Lets make something! You now (should) have a development environment to test HTML, CSS, and Javascript. If you don't, review what we did last week and/or clone my sandbox environment from github . At a basic level all you need is a single index.html file to render a webpage. All the CSS and JS you may have can exist inside the same file embedded within <style>...</style> and <script>...</script> elements. It only becomes important to separate the 3 types of code when a project becomes too large to manage within a single file. Best practices, modularity, and the need for regular maintenance have led developers towards a current approach of establishing and using style guides or coding standards . Lets play with some HTML and CSS in our live-server based environment. Example: Add some code to your Github project (repo) Clone your project from Github (Terminal) Open the project folder in Atom (text editor) Make some changes to the index.html file in Atom. Save the file. Add and Commit the changes to your repo with a message ( git add index.html and git commit -m \"my message about the changes\" ) Push the changes to the Github. ( git push ) Repeat What does each file type consist of? HTML = Document Structure CSS = Visual Identity JS = Interactivity (We will get more into this next week) Questions: How do you define document structure with HTML h1, h2, p, ul, li, div elements? What are CSS selectors and how do they relate to HTML elements? What is the difference between embedded and linked CSS and how do you use both types? Example: The Grid git clone https://github.com/rjduran/cm-grid-project.git - Project 1: Building Hypertexts \u00b6 Design and build a hypertextual storytelling experience (aka a website) that allows the user to make a series of choices leading them down a rabbit hole of possibilities. It's up to you how your experience begins, progresses and ends, if it ends at all, or if its something that can be experienced forever. Note the word game is used loosely below. What is Hypertext? What is Digital Storytelling? Implementation: Develop a storyline / narrative to base your experience or game on. It doesn't have to be extremely complex. If you are having trouble with this part, try out a storyline generator tool and start sketching it out. Think about other web based experiences you have encountered and how you navigated through the information presented. Read the 1st chapter of the book Finite and Infinite Games by James Carse (pdf) . It's awesome. Construct navigation pathways through your storyline using any number of linked pages. Hint: This is essential a Hypertext based experience. This is why HTML is called Hyper-Text Markup Language. It is the defacto standard for building connections between information objects. There should be some kind of main home page (index.html) that displays options for a user to choose from. Each subsequent page will present further options while guiding the user down a path from start to finish. Where the user ends up is up to you. When thinking about a game as the type of experience being put forth, here are a few examples of adventure games where the user has choices to make that determine the outcome (win / lose / infinite play / no outcome). Don't worry, these are just examples. I don't expect you to build a fully developed 3d world or program anything as complex as these games are. Stick with simple HTML pages that link together. Zork I Oregon Trail Myst Everything - Feat Alan Watts Sim City Create your own adventure game (HTML) This one is the most like what I would expect you build from a functional perspective. Although I bet you can do it in a much more visually pleasing way. Establish a simple visual language and implement it in CSS -- color, typography, images, layouts, etc. If you have a hard time with color palettes, explore some color palette tools . You may also choose to make something entirely image driven, in this case, explore whats possible visually with images -- dimensions, color, contrast, etc. A page can consist of any type of content you want to tell the story or provide clues for a user to make a choice. Basically every choice someone makes will be a link to another html file. Possible content: quotes, video, text, images, gifs, animations, graphics, sounds, interactive elements (via p5.js ) This is all possible without using Javascript (unless you are using p5.js for any part of it). Your website (game) could be built using entirely HTML and CSS. Organize your CSS into one or more files to make use of the styles across each html file. Explore the use of Grid and Flexbox layouts (see resources below). Feel free to explore any CSS libraries that deal with animations and interactivity (see resources below). Keep it simple. Have fun! Deliverables: A 2-3 min video screen capture demonstrating your project in action. It can be running in your local server to demonstrate or you can upload it to a server and provide the URL. Create a Github repo for the project so others can clone it and try it out on their systems. Include a link to your Github repo and embed the video in your blog post. Share the URL to your post on slack #cmstudio. Look into using a screen capture tool such as Screencast-o-matic to document your workflow. Upload your video to youtube or vimeo. A writeup on your blog about your learning experience. What hurdles did you encounter and how did you overcome them? What worked and what didn't? What new tools did you try? CM1 [Tues]: Due by 11:59pm Sept 18 CM2 [Wed]: Due by 11:59pm Sept 19 Resources: Tools - Visual, Sound, Animation The web design process: creating the visual design Tone Generator Tool Animated GIFs Animate.css Flapper Font Awesome , Font Awesome Cheat Sheet - For easily adding icons to HTML elements Top 9 Animation Libraries Easing Functions Cheat Sheet Anime.js Twine - Twine is an open-source tool for telling interactive, nonlinear stories Inspiration Finite and Infinite Games by James Carse , pdf Synaptic Stimuli Data is Nature Grid and Flexbox Understanding the CSS Box Model The New Layout Standard For The Web: CSS Grid, Flexbox And Box Alignment How To Approach CSS layouts in 2017\u200a\u2014\u200aand beyond. Don\u2019t Overthink It Grids The ultimate CSS battle: Grid vs Flexbox How to Efficiently Master the CSS Grid\u200a\u2014\u200ain a Jiffy Grid Layouts / Tools Realizing common layouts using CSS Grid Layout Grid by Example Interactive Flexbox Cheat Sheet Interactive Grid Cheat Sheet Phase 2: Web Applications, Libraries, Frameworks \u00b6 Week 4: Computational Thinking, Javascript I \u00b6 Sept 18 / Sept 19 Project 1 Due by 11:59pm. Submit via #cmstudio. I'd like for everyone to try out each others projects. Clone each project repos and play with them. See Part 2 of Assignment 3 . Questions on workflow and tools? My Atom Setup I've been starting to use VSCode more lately because of automatic code completion for almost any language I use. It's especially nice for Javascript out of the box. Computational Thinking Computational thinking is the thought process involved in formulating a problem and expressing its solution(s) in such a way that a computer\u2014human or machine\u2014can effectively carry out. ( Wikipedia ) Question: How does one think like a programmer or computer scientist? How to think like a programmer\u200a\u2014\u200alessons in problem solving Exploring Computational Thinking by Google - Read this overview. How can I learn to think like a computer programmer? - Read through the first response. What is Pseudocode? Question: How can I get better at programming / thinking / making / problem solving this way? Lots of practice. Look to solve as many problems as you can using programming (and in the process practice computational thinking). Try out as many different languages, libraries and frameworks as you can. Read books. Read / work through tutorials. Watch videos. Think about what kind of learner you are and how you navigate resources when learning new skills. Start with the resources in Learning Javascript . Related to the above discussion about programming and such, here are a few things to read if you are concerned with needing to have a strong background in math to accomplish anything with Javascript or another programming language. I hope this also addresses the question of \"What amount and kind of math would you need to use to improve as a programmer?\" And I use the word \"improve\" because its a practice like other forms of making and creativity. Which takes time to practice and master. You Don't Have to Be Good at Math to Learn to Code Learning to code: do I need to be good at maths? \"How much math do I need to know to program?\"\" Not That Much, Actually. Does Math Help Programming Or Programming Help Math? Javascript JavaScript is a programming language for the web. It makes things interactive and fun! Question: When should Javascript be used? I hope some of these articles begin to paint the picture of why and when you would use Javascript. You Know You Should Use JavaScript When\u2026 The Five Top Reasons to Use JavaScript When do developers use JavaScript and why? Choosing Programming Languages: The Right Tool For The Job (C#, Python, Node.js) Question: How to use JS with HTML / CSS? Put it inside a <script> tag within the <head> tag inside your index.html file. Placement in <head> tag vs the end of <body> tag. Why? Stackoverflow Discussion on Pros and Cons Embedded vs Linked (ie. JS code inside a script tag or in a linked script.js file). Linked: <script type=\"text/javascript\" src=\"script.js\"></script> Question: How can I work interactively with it and within the browser? Chrome Developer Tools > Console and console.log() are your best friend when debugging JS code. Here is a great intro tutorial explaining how and why to use the console. How To Use the JavaScript Developer Console DOM (Document Object Model) The DOM is a standard object model and programming interface created by the browser when a webpage is loaded. It is essentially your HTML page but in a different format now accessible through a browser based programming interface and language (Javascript). In general, JS can manipulate (get, change, add, delete) any part of the DOM. Here's a great image of the DOM Try opening the Chrome Developer Console and typing document or window . What does it return? How does it relate to the DOM image above? Some things you can use JS for: Change / Remove HTML elements in the DOM / on the page Change and add CSS styles to elements Read and change element attributes (href, src, alt, and more) Create new HTML elements and insert them into the DOM / page Attach event listeners to elements (click, keypress, submit) Language Fundamentals Variables Numbers Operators Booleans Strings Conditionals Loops Functions Arrays The language has many built in Objects that contain methods (aka functions) and properties. We will talk more about Objects next week so you don't need to know much about them yet. Just know that everything you get a reference to in Javascript is essentially an Object of some kind and contains data in the form of Key-Value pairs. The reference below is a great place to go to look up how new types of Objects work. Javascript Reference Before attempting the assignment below, work through the videos in the following playlist. It will provide more guided practice in the JS language and will cover the topics above. The playlist totals about 2 hrs in duration if you go through them all with an average video length of 6 mins. JavaScript DOM Tutorial Series (Video Playlist) Assignment 3: Javascripting \u00b6 Tip Pro Tip 1: Clone your cm-sandbox repo as a starting point or create a new repo (project) on Github then clone that repo. See instructions here for cloning a repo into a folder with a different name . If you make a new project folder to work out of you need to setup the same basic files as before -- index.html, style.css, and script.js. (Do you see the time-saving benefit of setting up a project \"template\" to start from?) Pro Tip 2: The Chrome Developer Tools > Console and console.log() are your best friend when debugging JS code. This assignment consists of two parts: Part 1 : Using this repo as a starting point, write some code that allows you to get familiar with the interplay of JS and HTML by inspecting and manipulating the DOM in the following ways. Note all the code you enter can be placed in the script section of the index.html file at the end of the body tag. Alternatively, you can use a linked script.js file. After setting up your project environment and launching a live server in the folder, open the Chrome Developer tools Console and enter: document . You will get a representation of the entire HTML document as an object. The document object is the top level object in the DOM. Read through this list of Properties and Methods to begin understanding what is available within the console and use this as a reference for the following tasks. Getting Elements Get a reference to all the paragraph (p) tags in the document. Hint: Look at getElementsByTagName() Get a reference to a paragraph tag with a specific id of \"second\". Hint: Look at getElementById() Get a reference to a all paragraph tags with a class of \"first\". Hint: Look at getElementsByClassName() Get a reference to an element or elements within another element. For example, if you have an unordered list (ul) with several list items (li), how do you select a specific li and display it's contents to the console? Changing Elements Change the text within the previously selected list item (li) to \"Greetings List Item! I'm a string from another planet!\". Change the text of a specific paragraph to a different string of text. Use an Ipsum generator tool to create new placeholder text that you insert using Javascript. Removing Elements Clear the contents of the paragraph with an id of \"empty-me\". Clear the contents of the set of paragraphs with class \"empty-us\". Remove the div with a specific id of \"section3\". Adding Elements Create a new anchor tag that links to your blog and insert it just after the paragraph tag in the div with an id of \"about\". Append a new div anywhere in the document and give it an id of your choice. Insert a paragraph with some content into the div using javascript. Add a new list item to the sidebar ul that links to your new div so you can click and scroll to it. Event Listeners Make an event listener for any h2 element that triggers an alert() when you click it. Set the alert message to \"Hey Hey Hey!\". Make an event listener that triggers a change in the text of a specific paragraph with the id \"change-me\". Part 2 : Clone and analyze a classmates Project 1 results and formulate a list of 3-5 questions about things you notice it does or doesn't do that you might want or expect it to do based on the subject matter. What questions arise about the functionality, user experience, interactivity? Where do you see room for improvement with Javascript? For example, could it use animation or transitions between visual elements or pages? What might an alternative navigation structure look like? Would you need a different interface design for different types of users and/or device types? You can think of these questions as problems you want or need to solve potentially using JS. Some solutions may be CSS or content based. Include this list along with the project chosen to critique in your blog post writeup. If you can see how JS might begin to address some of your questions, describe the steps you would take to solve the problem. You don't need to write any code to implement solutions for this part unless you want to and are motivated to do so. Deliverables: A blog post containing a brief writeup for both parts and a link to your Github repo containing your Javascript explorations from Part 1. Include a short description in the README.md file of the repo with any specifics about the code you experimented with. Look at the Markdown resources for Week 2 if you haven't used the Markdown language yet. Share the URL to your post on slack #cmstudio. CM1 [Tues]: Due Sept 25 CM2 [Wed]: Due Sept 26 Resources: Students - A list of everyone in class and their websites and github accounts. The Console How To Use the JavaScript Developer Console The DOM What is the DOM? (Video) The HTML DOM Core Interfaces in the DOM Document Object Properties and Methods DOM Tree Visualization Example on CodePen Language Javascript.com by Pluralsignt Javascript Basics (P5.js Wiki Reference) - This is a great quick-ish overview of the JS language and how to use it in general and in combination with a great creative coding library called p5.js . Javascript Reference Examples W3 How-To Examples - A great set of how-to examples for various web topics. CSS Navigation Bars - This is what the cm-javascripting code is based on. Week 5: Javascript II \u00b6 Sept 25 / Sept 26 This week : CM Work Session - Friday, Sept 28 9am - 12pm. I'll be at the studio for anyone that needs extra help on assignments and projects. JS Week 4 Review JS DOM Tutorial - Bookorama App (by Net Ninja) Your workflow. What's new? Questions about JS in general, tools, etc Creative Coding Creative Coding is a type of computer programming in which the goal is to create something expressive instead of something functional. It is used to create live visuals and for VJing, as well as creating visual art and design, art installations, projections and projection mapping, sound art, advertising, product prototypes, and much more. ( Source: Wikipedia ) Tim Rodenbroeker - Designer / Programmer exploring branding w/ code WOVNS - Digital Fabrics Platform Nervous System What is creative coding? - Bite size intro to creative coding and generative design Dan Shiffman - Codeland - Creative Coding: An art and code showcase - NYC 2017 - Great overview of a bunch of creative coding / media arts projects built using Processing. Awesome Creative Coding - Carefully curated list of awesome creative coding resources primarily for beginners/intermediates. If you are interested in these topics, check out some more resources from Critical Making Fall 2017 . Interactivity Events & Event Listeners How to work with events - Element changes, Key presses, Mouse movements Events and the DOM cm-javascripting JS Timing Events - Learn more here about how to make events that trigger in time. More Language Fundamentals Functions What are functions and how do they work? Example: 1 2 3 4 5 function sayHello() { console . log ( \"hello\" ); } sayHello (); // Call the function. Prints \"hello\" Example of a function with return type: 1 2 3 4 5 6 7 function add ( a , b ) { return a + b ; } var a = 1 ; var b = 3 ; var c = add ( a , b ); // results in c = 4 Objects What are Objects and how do they work? Debugging: Using typeof . typeof \"a string\" Objects Quick Reference JavaScript Object Notation (JSON) - A syntax for storing and exchanging data. Javascript Built-In Object Reference Eloquent Javascript - This is a great book to learn more about the language and how to use Objects. Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // empty object var obj = {}; // object with three key/value pairs var obj = { 1 : \"A\" , 2 : \"B\" , 3 : \"C\" }; // object with three string key/value pairs var obj = { \"A\" : \"Letter A\" , \"B\" : \"Letter B\" , \"c\" : \"Letter c\" }; // object with two objects within it var obj = { \"A\" : { 1 : \"my first object\" }, \"B\" : { 1 : \"my second object\" } }; Arrays What are Arrays and how do they work? Arrays Quick Reference Array vs Set vs Map vs Object\u200a\u2014\u200aReal-time use cases in Javascript (ES6/ES7) Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 // empty array var myArray = []; // array with 3 integer values in it var myArray = [ 1 , 2 , 3 ]; // array with 3 string values in it var myArray = [ \"critical\" , \"making\" , \"studio\" ]; // array with 3 objects in it. Each object contains two key/value pairs. var myArray = [ { \"A\" : \"letter A\" , \"B\" : \"letter B\" }, { 1 : \"yes\" , 2 : \"no\" }, { \"firstName\" : \"daft\" , \"lastName\" : \"punk\" } ]; JS Libraries and Frameworks Library A library is a collection of code containing objects, functions, and methods that you can use in an application or project. Examples: jQuery - Library for simplifying front-end / client-side Javascript. p5.js - Library for creating 2D/3D interactive browser based experiences. Three.js - Three.js is a cross-browser JavaScript library and Application Programming Interface used to create and display animated 3D computer graphics in a web browser. Three.js uses WebGL . What is WebGL? (Video) WebGL Tutorial - 3D Rendering in the Web Browser with WebGL (Video) A-Frame - A web framework for building virtual reality experiences. Uses Three.js under the hood. D3.js - Data Visualization Library Framework A framework can be everything you use in application development. It can be a library, a collection of many libraries, a collection of scripts, or any piece of software you need to create your application. Framework is just a very vague term. It's best to think about a framework as something that is mostly ready to use out of the box. Just add content and configure it to work. Examples: Bootstrap - Front-End CSS/JS Library/Framework Express - Node.js Web Application Framework Discussion: Library vs Framework JS Library vs Framework Video on Udacity What is the difference between a framework and a library? Examples / Work Session Using jQuery with the DOM Setup a index.html file to use jQuery How to target elements using jQuery? How to handle events using jQuery? Using p5.js - Work through Getting Started and Pick a few examples to get familiar with. Set them up in a sandbox directory to experiment. Assignment 4: Interactive and Dynamic Javascripting \u00b6 Choose one option: Option 1: Build an interactive and dynamic website using \"vanilla\" Javascript or a helper library such as jQuery. Use your Project 1 code as a starting point or start from scratch with a different concept. Perhaps your final project concept will require interactive and dynamic elements -- identity those elements and work on coding some of them using JS. Take this opportunity to gain an understanding of how to build interactive and dynamic features into your website experience. Option 2: Build a browser-based experiment using a 2D/3D Javascript library such as p5.js or three.js . Choose to start from scratch or use the examples are a starting point (this is why they exist!). Mash up a few examples and see what you end up with. Deliverables: A blog post containing a brief writeup for your project or experiment. Include in your writeup any hurdles you encountered and how you overcame them? What worked and what didn't? What new tools did you try? Be sure to include a github repo to any code you worked on with instructions for its use in the README.md file. Use a screen capture tool such as Screencast-o-matic to document your workflow / demo your project. Upload your video to youtube or vimeo and embed in your post. Using a screen capture tool is one of the best methods for sharing interactive and dynamic experiences. Share the URL to your post on slack #cmstudio. CM1 [Tues]: Due Oct 2 CM2 [Wed]: Due Oct 3 Resources Eloquent Javascript - This is a great book to learn more about JS language fundamentals. Read Ch 1-6 and Ch 13-15 to review and go deeper into the concepts we've touched on this phase. jQuery CDN Draggable.js - A fun JS library we found during class that makes dragging things fun. chrome experiments - Various JS libraries and experiments built with JS JS Timing Events Programming Terminology - A Wikipedia for Programming, Computer Science, and Much More. Don't know a term? Look here. Templating Engines / Languages - I mentioned Pug.js and Handlebars.js. Week 6: Node.js \u00b6 Oct 2 / Oct 3 JS Week 5 Review Share your assignment 4 Your workflow. What's new? Questions about JS in general, tools, etc Node.js Node.js is a platform built on Chrome's JavaScript runtime for easily building fast and scalable network applications. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices. Node.js is an open source, cross-platform runtime environment for developing server-side and networking applications. Node.js applications are written in JavaScript, and can be run within the Node.js runtime on OS X, Microsoft Windows, and Linux. Node.js also provides a rich library of various JavaScript modules which simplifies the development of web applications using Node.js to a great extent. ( Node.js Introduction - Tutorials Point ) Node.js = Runtime Environment + JavaScript Library Ok... So what is Node REALLY doing? In short, Node replaces the functionality of a server. This essentially means you can build your own custom server to process requests and serve responses any way you want. Cool eh!? Some common applications of Node.js are a blogging platforms (Medium), Project Management / Note Taking (Trello), Chat Applications (Slack), Text Editors (Atom, VSCode) Collaborative Document Editing (Similar to Google Docs), Static Site Generators, Building Command Line Tools, Real-time Data Monitoring Systems, building APIs, handling authentication server-side, and more! Server Overview What\u2019s the cloud? Client/Server Relations Whats a Request? Whats a Response? Install Node.js FYI: We did this in Week 2 . You don't need to do it again. If you haven't done it, do it before class. Download LTS pkg and run the installer. When installer is complete, open Terminal and type node -v . You will see a version number matching what you downloaded. Type npm -v and you will see a npm version number as well. You're ready to go! What is Node.js and what can you do with it? Why The Hell Would I Use Node.js? A Case-by-Case Tutorial What exactly is Node.js? What is Node.js? The JavaScript runtime explained 10 Reasons to Use Node.js 10 best Node.js App Examples / 12 Apps Written with Node.js tl;dr: Paypal, Netflix, Trello, Uber, LinkedIn, Walmart, Ebay, Medium, Groupon, NASA, Yahoo, Mozilla, and more What does a basic application look like with Node? Example: Hello World Example: Basic Server How does it work? Understanding the package.json file Setup a Node project and pacakge file with npm init or npm init -y . The node_modules folder What is npm ? Global vs local install. npm install -g <packagename> vs npm install <packagename> How to run a Node app? node app.js Pro Tip: As you begin working on a Node application you likely notice that you need to constantly stop and restart the node runtime via terminal. Wouldn't it be nice if there was a tool to do this for you automagically? There is! It's called nodemon . Just type npm install nodemon -g to install and run your app by using nodemon app.js . Getting started with Node Feel free to work through these exercises to get a better understanding of the pieces of npm and node. To dig deeper, explore the learning node section and work through the tutorials. hello-npm hello-node hello-p5 - This makes use of Node.js to serve a p5.js sketch. This is similar to running live-server in a folder with a p5.js sketch in it. Express.js Framework Express is a minimal and flexible Node.js web application framework that provides a robust set of features for web and mobile applications. To Install: npm install express What is Express.js and what can I do with it? What does a basic application look like with Express? How does it work? Getting started with Express hello-express Applications of Node Node can be used to build web applications that connect various types of digital technologies together. For example, browser based VR experiences + physical hardware sensors and devices, inter-application communication, chat servers, connected magic mirror and mobile devices, and more. Building smart, connected and distributed devices (IoT) Connected VR Experiences (Node.js + Express + Unity) WebVR Experiences (A-Frame + Node.js + Express) Connected Drawing Application (P5.js + Node.js + Express) Connected Digital-Physical Experiences (Physical (Hardware + Sensors) + Digital and Immersive (A-Frame or Unity)) Robots! Drones ( Skycatch / Drones, Data and Node.js: A Skycatch Story )! Static Site Generators Project 2: Build an Ipsum Generator \u00b6 Using this tutorial as a starting point, build your very own \" Lorem Ipsum \" Generator application using Node.js and Express. Implementation: Choose a subject matter that interests you as a basis for your generator. It can be as practical or eccentric as you like. Your work should include and extend the main functionality covered in tutorial in some way. For example, you might choose to focus on implementing a responsive layout using media queries, adding to the form element and writing some JavaScript to process the combination of new options, or explore interactivity through event listeners with or without helper libraries. Establish basic visual styles that support the concept. Explore typefaces, color palettes, layouts, and images. Explore creative ways of styling the form and generated text. You may choose to make the site responsive using CSS media queries to deliver an exceptional user experience across mobile and desktop devices. Attempt to use front-end Javascript using jQuery or jQuery UI to manage interactive and dynamic elements. You may also use a CSS library such as Animate.css , Hover.css , or similar JS libraries such as Anime.js , Bounce.js , or Animsition to help integrate animations and transitions of elements or pages if your concept requires it. Inspect other types of Ipsum generators to see how they work. What features, beyond choosing # paragraphs to generate, do you notice? Here are a few examples: Samuel L Jackson Lorem Ipsum , Khaled Ipsum , Harder Better Faster Ipsum , Gangsta Lorem ipsum , Wikipsum , HTML-ipsum , JS Ipsum , and many more . Explore other form elements such as checkboxes and drop down input elements as options for customizing the text that gets generated. Hint: Look at the Samuel L Jackson Lorem Ipsum generator and see whats added when toggling on/off the options. Notice that as you are working with strings of text, it's possible to include other types of strings of text that happen to also be html tags. Is a lorem ipsum generator limited to generating only text? I think not! ( Hint: Check out Lorem Picsum ). What else could you think to do with this kind of tool? Your application should reside in a dedicated Github repository that can be cloned by anyone. Inspect the file and folder structure found in shia-ipsum as an example. Be sure to include a README.md with instructions about how to run your application given a basic understanding of the Terminal, Node.js, and npm. Also, be sure to inspect the .gitignore file. The purpose of this file is to tell git which files or folders to ignore in a project. You want to be sure to add the node_modules folder to this ignore file. You never want to commit the node_modules folder to a repo since it contains all the source files for any modules you are using in a project, which can cause the repo to be extremely large. Github has issues with very large repos and will let you know if you are above their limit or just disable your Github account. A .DS_Store file is another unnecessary file to commit to a repo. Not as critical but not needed for anything. Optional: It's not required but if you are interested in deploying a Node.js application on a server for other people to access with a dedicated domain, you can read more about how to do this in Application Deployment section of Learning Node.js . This is a more advanced workflow so be prepared to spend some time with it. Once you go through it however you should have a much better understanding of how servers are setup and how they work. Deliverables: A 2-3 min video screen capture demonstrating your project in action. It can be running locally to demonstrate or you can deploy it to a host like Heroku or Digital Ocean and provide the URL. Embed the video using either Youtube or Vimeo in your blog post. Create a Github repo for the project so others can clone it and try it out on their systems. Include a link to your Github repo in your blog post. A writeup on your blog about your learning experience and creative process. What hurdles did you encounter and how did you overcome them? What worked and what didn't? What new tools or techniques (ie. commenting code) did you try or practice? Share the URL to your post on slack #cmstudio. CM1 [Tues]: Due by 11:59pm Oct 9 CM2 [Wed]: Due by 11:59pm Oct 10 References Shiffman Tutorial: Server-side Programming and Node - This is a great intro and review in most of these topics (Node, Express, npm). HTML Form Elements RESTful API CRUD Express.js Documentation 11 JavaScript Animation Libraries For 2018 Node.js URL Module: URL Strings and URL Objects - This has a great diagram showing the URL structure and how to parse it using the Node.js API. This matters for routing a request to the correct destination in your Node server (app). gitignore file generator - Useful tool for creating .gitignore files. Phase 3: From CAD to CAM \u00b6 Source: 7 Days, 700 Pens: Parametric Design for Customized Conference Swag by Formlabs Week 7: Intro to CAD / Fusion 360 \u00b6 Oct 9 / Oct 10 Project 2 Review / Critique Submit deliverables by 11:59 pm on #cmstudio in Slack Intro to CAD and Modeling Overview A short history of sketching and blueprints. What happened before computers? Vintage Photos: Life Before AutoCAD What is CAD and why do we use it to make things? What kinds of things are possible with CAD? ( Hint: Look around. What do you see? Almost everything in our human built environment is made using an industrialized CAD/CAM process. ) CAD vs CAM (We're working towards this in Phase 4 ) CAD = Computer-Aided Design (Input: Idea for 3D model; Output: 3D model and instructions for CAM.) CAM = Computer-Aided Manufacturing (Input: Toolpath file / instructions; Output: Physical Object) Types of CAD 2D - Adobe Illustrator, Photoshop, etc 3D - Fusion 360, Autocad, Inventor, Solidworks, Rhino, etc Direct vs Parametric What\u2019s the Difference Between Parametric and Direct Modeling? So what makes a model \"parametric\"? With a parametric model you have the ability manipulate it's geometry with any number of dimensional parameters (ie. Width, Height, Length, etc). Rhino vs Fusion 360 Whats the difference between these tools? The Workflow and Feature Set. Some related topics that result in a 3D model (Mesh): 3D Scanning Photogrammetry Data Driven Constructive Solid Geometry fMRI, CT (Medical Imaging) Confocal, etc (Biological Imaging) Fusion 360 Workshop Download & Install Fusion 360 Students Download - Free for students. Make an Autodesk account and install. Fusion will be automatically placed in the macOS dock as a shortcut after install. The Basics The Interface Workspaces, Tools, Navigation, Movement, Projects Model Hierarchy (Browser) Timeline (Model History) How to Use the Timeline Master the Timeline, Browser, & Preferences Making Sketches Defining Constraints A Guide to Fusion 360 Sketch Constraints - A great set of videos for each constraint type. A List of Constraint Types Dimensioning a Sketch Fully Defining a Sketch Pro Tip: Anything \"Blue\" is not dimensioned which means it can be moved around. Anything \"Black\" is dimensioned which mean is has a size. Once the whole sketch is Black it is \"Fully Dimensioned.\" This means it's \"locked\" into place. From 2D Sketch to 3D Model Extruding Sketches (Create > Extrude) Sketches vs Bodies vs Components vs Assemblies Quick Tip: Bodies vs Components About bodies and components What is the difference between a Sketch, Body & Component? Understanding Assemblies Exporting 3D Models Whats a mesh? ( Think Minecraft or Low poly art. ) 3D meshes are defined using the STL file format. Mesh Refinement (Higher Quality = More Triangles). Example: Stanford Bunny Example: Viewing Meshes in Meshlab A Step Further Making Mechanical Drawings (2D) (aka Making 2D blueprints) File > New Drawing From Design How to Create a Drawing From Your Design (Video) Defining a Parametric Model User Parameters (\"Sigma\" Icon) Change Parameters Dialog Box Equations and Parameters in Dimensions Assignment 5: Parametric Modeling \u00b6 Generate a parametric 3D model using Fusion 360. Choose one of the possible directions below. Perhaps your final project concept will require a digital (rendered) or physical (fabricated) 3D model -- identity design parameters that meet your project requirements and goals and proceed to create one or more models. Possibilities: Envision and define an original 3D model. Reverse engineer (analyze, deconstruct, and interpret) an existing 3D form and create a model based on your analysis. Locate an example (walkthrough, tutorial, etc) of a 3D model that you wish to create and follow it with modifications for your use case. Deliverables: A 1-2 min video screen capture showing your model in Fusion 360. Feel free to talk (in your video) about the model itself, inspirational findings, the process you went through, the tools you explored along the way, and the challenges you encountered. A blog post documenting your experience and explorations (You many also document your experiences in your video and embed the video in your post). Include in your writeup any of the above items, hurdles you encountered and how you overcame them? What worked and what didn't? What new tools did you try? Embed your video into your blog post. Export a mesh (STL File) of your model and upload it to Sketchfab (You will need to make an account). Once uploaded to Sketchfab, embed your uploaded model into your blog post. Here's a tutorial about how to do this . This is basically the same as embedding a Youtube video into a blog post, but with a 3D viewer window containing your model, which you can manipulate and even visualize in VR! Cool eh!? ( Wonder what JS libraries they are using to make this possible? ) Share the URL to your post on slack #cmstudio. CM1 [Tues]: Due Oct 16 CM2 [Wed]: Due Oct 17 Resources Fusion 360 Gallery Fusion 360 Manual Learn Fusion 360 in 60 Mins Fusion 360 Design Academy Fusion 360 Adoption Portal Fusion 360 Forum - Need help? Check here. Tutorials Arduino UNO Enclosure Tutorial ( Arduino UNO Model , Arduino Drawing ), Shorter version Parameter Driven Project Enclosure Bookshelf Tutorial - Watch to get a good walkthrough of sketching basics. Making Parametric Models in Fusion 360 Easy Snap Fit Cases Udemy: Product Design in Autodesk Fusion 360 from idea to prototype Thingiverse - A giant repository of 3D models and projects. Week 8: Parametric Design with Rhino \u00b6 Oct 16 / Oct 17 CM Work Session - Friday, Oct 19 9am - 12pm. I'll be at the studio for anyone that needs extra help on assignments and projects. Fusion 360: What did you make? Rhino Overview What is Rhino? Rhino is a CAD tool for designers and architects. It's considered one of the standard 3d modeling tools for product designers across many different industries. Rhino Download for macOS - Free for 90 days. Edu License available for ~$90 @ CU Bookstore. Rhinoceros will be in your Applications folder after install. What is Grasshopper ? Grasshopper is a plugin for Rhino. It's now included with Rhino for macOS when you install. You access it by typing Grasshopper into the command interface in Rhino. We will explore this tool next week. Differences between Rhino for Windows vs Rhino for macOS Rhino for Windows is much older than Rhino for macOS and therefore contains a bit more functionality. Rhino 5 for Windows commands not in Rhino 5 for Mac Grasshopper is included with macOS v5 and Windows v6, but not Windows v5. What kinds of things are possible with Rhino + Grasshopper? Why use them? There are many design oriented or industry specific reasons but one BIG reason to use the tool is for its extendability through plugins (food4Rhino) for both Rhino and Grasshopper. Plugins such as Grasshopper open the floodgates for exploring parametric design and generative design . Parametric design is a process based on algorithmic thinking that enables the expression of parameters and rules that, together, define, encode and clarify the relationship between design intent and design response. ( Source: Wikipedia ), Google Search What types of objects can be considered \"parametric\"? Anything really! Just a few examples: Cups, Vases, Pitchers, Bottles, Bells, Bowls, Clothing, Furniture, Lighting, Buildings!... and more! Parametric Design Examples Co-de-iT Zha Code Edu Designmorphine Opendesk Formlabs Digital Factory Pens New Balance 3D Printed Shoe Nervous System Kinematics Dress Razor Maker by Gillette / Gillette Uses 3D Printing to Unlock Consumer Personalization Intro to Rhino (Workshop) Objective: Become familiar with the Rhino interface and workflow in order to create 3d models. Interface Basics Understanding the User Interface Viewports (Top, Left, Right, Perspective) Coordinates (X, Y, Z). X = Red, Y = Green, Z = Blue Windows (Multiple Windows Open == Multiple Files Open) Render Modes (Wireframe, Ghosted, etc) Toolbars (macOS) Left Sidebar - Command Line, Osnaps Right Sidebar - Layers Buttons = Commands. Almost all buttons are tied to a command you can type in. Menus / Sub-Menus (Little triangle on a button) The Command Line - Just type something...anything. See what happens! ESC to exit command. Repeat last command with Right Mouse Button > Repeat Command. Movement (Zoom (Two-finger pinch), ZS , Pan (Right mouse click), Orbit, Gumball) macOS Tip: Turn off two-finger mouse zooming (but allow pinch zooming) by unchecking \"Enable magic mouse gestures\" under Rhino > Preferences > Mouse > Magic Mouse. Hiding / Showing objects (Light Bulb on Layers; Hide / Show Commands) Units - Changing Units, Grid (File > Settings > Units) The Grid (File > Settings > Grid to change), Osnaps (Snapping options on bottom half of left sidebar) Working with Layers (Right Sidebar) Layer Name Colors (RGB) Hide/ Show(Light Bulb) Active Layer (Radio Button) - This determines where you are creating new geometry. Other Panels - Object Properties, Display Properties, etc Geometry Basics Drawing Geometry 2D Geometry - Curves, Surfaces, Polycurves, Text 3D Geometry - Surfaces, Polysurfaces, Solids Isocurves - \"Hidden\" curves located on / making up surfaces. Object Details (Selection) - See information about a selected object in the lower right sidebar. NURBS (Non-uniform rational B-spline) vs Mesh Turn On/Off points on curve with PointsOn and PointsOff or F10 key. Transform Commands Copy Move Scale Rotate Manipulate Geometry Explode , Join Join vs Group Trim Selection - SelCrv , SelSrf , SelPts Loft Pipe File Input / Output File types: 3DM, STL, OBJ, EPS, DXF How should you export a file for fabrication using 3d printing / milling, etc? Additional Commands There are many commands available in Rhino. Above and below are just a few of the most used commands. Check out the Rhino 5 Command List and Rhino 5 for Windows commands not in Rhino 5 for Mac to learn more. PictureFrame Contour MeshtoNURB Distance Dim Boolean commands Hide / Show Offset DupBorder ExtractWireframe Text TextObject SelDup ExtrudeSrf Generator or \"Factory\" Example Produce variations of a 3d model from a \"generator\" or \"factory\". This means to work iteratively to explore a form making process. This process takes advantage of the History command to associate recorded parameters to each other, which is a characteristic of Parametric Modeling as done naturally in Fusion 360 and further enabled through Grasshopper. Examples: cm-design Parametric Loft Generator Parametric Revolve Generator Assignment 6: Form Finding \u00b6 Explore form finding through the iterative \"factory\" or \"generator\" approach discussed in class. Work iteratively to generate at least 10 variations of a form which you may then render any way you wish. Meaning, you may save STL files out and place them into a Sketchfab viewer, or render using a dedicated render solution such as Keyshot , Octane Render , Fusion 360's render workspace , or save screen shots from Rhino (Use the ScreenCaptureToFile command to save screen shots from the viewport). Perhaps your final project concept will require digital (rendered) or physical (fabricated) 3D models -- use form finding as a tool to identity interesting forms and shapes that meet your project requirements and goals and proceed to create one or more models. Deliverables: A 1-2 min video screen capture showing your form finding explorations in Rhino. Feel free to talk (in your video) about the model itself, inspirational findings, the process you went through, the tools/commands you explored along the way, and the challenges you encountered. A blog post documenting your experience and explorations (You many also document your experiences in your video and embed the video in your post). Include in your writeup any of the above items, hurdles you encountered and how you overcame them? What worked and what didn't? What new tools did you try? Embed your video into your blog post. Export meshes (STL File) of your model and render them using a dedicated render solution or upload it to Sketchfab and embed your uploaded model(s) into your blog post. Look at the previous assignment for tutorial about how to do this. Share the URL to your post on slack #cmstudio. CM1 [Tues]: Due Oct 23 CM2 [Wed]: Due Oct 24 Resources Parametric Design: a Brief History Rhino Rhino Tutorials food4Rhino - A large repository of plugins available for Rhino and Grasshopper. Most are free and/or open-source. Think Parametric: Rhino 101 - Fundamentals of 3D Modeling Plethora Project: Rhino Tutorials Lynda.com Rhino 5 Essential Training Form Finding Inspiration LaN: 3D Tiles LaN: Folded LaN: CNC Mill Interiors LaN: Triangulation LaN: 3D Space Shape Rendering Tools Keyshot Octane Render Fusion 360's render workspace Pasta by Design Week 9: Intro to Grasshopper / Rendering \u00b6 Oct 23 / Oct 24 CM Work Session - Friday, Nov 9 9am - 12pm. I'll be at the studio for anyone that needs extra help on assignments and projects. Rhino: What did you make? Intro to Grasshopper (Workshop) Grasshopper is a plugin for Rhino. It's now included with Rhino for macOS when you install. You access it by typing Grasshopper into the command interface in Rhino. It will open another window that overlays the Rhino window. Just position Rhino on half of your screen and Grasshopper on the other half. Google Search: Rhino Grasshopper Interface Basics Setting Units (in Rhino) Arranging windows / Hide show Grasshopper Dual monitor is ideal setup to see both Rhino and Grasshopper The Canvas (where you drop components) Double click to type in name of a component you want to add Space bar to access quick commands like preview, bake, and preferences Recent commands bar (on bottom left) Tool Bars & Component Groups (Tabs) Primitives Math Set Vec Curve Surface Mesh Intersect Transform Display Working with components Drag and drop components into the canvas Selecting components Tooltips Connecting / Disconnecting components Aligning components Messages (Orange and red bubbles on component) Grouping components Working with geometry Assigning Rhino geometry to Grasshopper components Creating Grasshopper based geometry and visualizing it in Rhino Baking geometry (Geometry in Grasshopper -> Rhino) Points, Lines, Planes, Volumes Examples: Contouring, Lofting, Vase Builder Rendering with Keyshot Keyshot is an entry level rendering tool. It features drag and drop material, color, lighting, environments, and more. Download the 14 day trial to start experimenting. Go through the Keyshot Tutorials to get a basic understanding of the tool and how to use it. Basic Process: Export a 3D model file from CAD (Rhino 3dm, STL, etc) Import into Keyshot Compose the scene Assign materials, lighting, environment, etc Save a screenshot. Depending on how powerful your computer is, you will have to wait longer for better screenshot renders. Tips: The demo doesn't let you save the project file. Save lots of screenshots! Use the \"screenshot\" feature to save decent looking images from the viewport. It saves them into Library/Application Support/Keyshot8/Renderings/ To increase resolution of a screenshot make your window full screen and use the \"Reitna Mode\" feature. Your computer may slow down a bit more doing this but it will give you a higher resolution image in the end. Don't bother with the Render mode since it puts Keyshot watermarks all over the image. The screenshot tool only places a small mark in the bottom left corner (easily removable via Photoshop). Digital Object Workflows Rhino --> Meshmixer --> Keyshot etc... Project 3: Building Digital Objects \u00b6 Create a project that makes use of any of the CAD tools explored this phase (Fusion 360, Rhino, Grasshopper) and/or any other CAD tools (Blender, Maya, Sketchup, Meshmixer, Meshlab, etc) that enable the creation and manipulation of 3D digital objects and explore a rendering solution to produce multiple high fidelity representations of your concept. Tip: I encourage you to think about all CAD tools as a part of a larger digital modeling workflow. Most of time time there is not one tool that does everything you want or imagine possible. You might have to enlist different tools in combination to accomplish a task. For example, generate geometry in Rhino, manipulate meshes in Meshmixer, render in Keyshot. Possible project directions Advancing your final project concept. Iterate on a previously explored concept. Form finding explorations and application. Choose an existing product or design to analyze and deconstruct its systems of logic. Then proceed to construct a version of it using CAD. Remixing or mash-ups of existing designs and parametric techniques. Developing a learning pathway (one or more tutorials or a workflow of your own) to share publicly. Develop one or more models that could be 3d printed or digitally fabricated. Something else? Think about the following questions to help you define your project scope. What is the purpose / goal of your project? What kind of problem does your design solve? Where can you apply CAD in the process? Where can you apply rendering in the process? (ex. Showing product design to client) What designs, shapes, and/or forms inspire you? What might you want to 3D print or make a physical version of? Deliverables: Documentation including a project writeup, sketches, screenshots, and 2-3 min video walkthrough of your process. Describe in your video and in your writeup, the project motivation, objectives, tools used, challenges encountered, and possible next steps if and/or when you are to go a step further. Embed your video into your blog post. Render multiple instances (at least 4 images) of your project and include them in your blog post. How do you envision your digital objects? What kind of materiality might they have if you made them in reality? What kind of physical setting do you imagine them in? Explore ways of visualizing and communicating your concepts. As with the previous assignments, use Sketchfab to embed one or more 3d visualizations into your blog post. In addition, explore a rendering solution such as Keyshot or Fusion 360's render workspace to begin creating higher fidelity representations of your concepts. This is a great article on 25 of the best rendering tools of 2018 . I recommend using Keyshot since it has a free trial and produces decent renders by using the \"Screen shot\" feature. You are free to use any rendering solution you find interesting. Make sure to give credit to any related projects, code, websites, articles, images, videos, or other source materials used by including them in your project writeup. Share the URL to your post on slack #cmstudio. CM1 [Tues]: Due by 11:59pm Oct 30 CM2 [Wed]: Due by 11:59pm Oct 31 Resources Grasshopper Website Grasshopper Primer - A great entry point to Grasshopper. Visual Programming in Rhino3D with Grasshopper / Amazon Think Parametric: Grasshopper 101 - Introduction to Parametric Modeling food4Rhino - A large repository of plugins available for Rhino and Grasshopper. Most are free and/or open-source. Grasshopper Plugins Bifocals - This is a great plugin for seeing what a component is called within a definition. Everything is a Remix 25 Best 3D Rendering Software Tools of 2018 (Some are Free) Keyshot Tutorials Phase 4: Digital Fabrication \u00b6 Source: Eggs (2013), Studio Courses by Andrew Kudless, California College of the Arts, S.F., and Bond University, Gold Coast, Australia by Matsys Week 10: Intro to Digital Fabrication / 3D Printing \u00b6 Oct 30 / Oct 31 CM Work Session (Next Week) - Friday, Nov 9 9am - 12pm. I'll be at the studio for anyone that needs extra help on assignments and projects. Project 3 Presentations - We will take some time for everyone to share their Project 3 and get feedback. What is Digital Fabrication? Digital fabrication is a type of manufacturing process where the machine used is controlled by a computer. The most common forms of digital fabrication are CNC Machining, Laser Cutting, and 3D Printing. ( Source: Open Desk ), Google Search , Digital Fabrication Pintrest Board by Naz\u0131m Da\u011fdeviren Overview of CAM Computer-aided machining (CAM) is an application technology that uses computer software and machinery to facilitate and automate manufacturing processes. CAM is the successor of computer-aided engineering (CAE) and is often used in tandem with computer-aided design (CAD). ( Source: Wikipedia ) Computer numerical control (CNC) is the automation of machine tools by means of computers executing pre-programmed sequences of machine control commands. This is in contrast to machines that are manually controlled by hand wheels or levers, or mechanically automated by cams alone. ( Source: Wikipedia ) Understanding Toolpaths What is a toolpath? What is GCODE ? Economies of Time and Tooling Which fabrication process do I choose? Is this the right process to produce my model? Does the time and tooling required make sense to accomplish my goal? Low to high resolution prototypes Considering material and application Basic process to prepare files for fabrication Create your design as 2D curves or 3D model using CAD package (Rhino, Fusion 360, etc). Generate toolpaths using CAM software. (For example, Cura is a \"Slicer\" which is a type of CAM software, Fusion has CAM tools built in, and RhinoCAM is a CAM package/plugin for Rhino.) . The input to the CAM software will be based on the fabrication process. The toolpaths saved out of a CAM package are always a machine code file (ie. GCODE or a variation of it). Run the GCODE file using a controller/software for the fabrication process. (For example, the Ultimaker's controller is on the machine itself. You just tell it which GCODE file to read from the USB drive. This is similar to a laser cutter with a built in controller and memory. In the case of a vinyl cutter, CNC router, or CNC milling machine, the controller is commonly a computer connected to the machine sending chunks of data as the file is read. In the case of the Bantam Mill, we use their tool known as Bantam Tools.) CAD to CAM Workflows Working with 2D curves - Illustrator, Rhino, Fusion 360 2D file types - EPS , AI , DXF , SVG , PDF (Note: These are all Vector based graphics vs Raster based graphics. Photos in JPG and PNG file formats are examples of raster based graphics and are commonly used for laser engraving.) Examples - Stickers (Vinyl), Cut & Fold (Laser), Cut/Engrave (Mill) Working with 3D geometry (meshes, etc) - Fusion 360 3D file types - STL (most common) Examples - Cut (Mill), 3D to 2D Contouring/Slicing (Laser) 3D Printing (Workshop) Additive Manufacturing Technologies (Image) Source: 3D Hubs Types of 3D Printing FDM (Fuse Deposition Modeling) / Filament Based - Ultimaker , Lulzbot , Makerbot , Markforged , Wasp SLA (Stereolithography) / Resin Based - Formlabs Form 2 , Ono SLS (Selective Laser Sintering) / Powder Based - Shapeways , Formlabs Fuse 1 Polyjet (Material Jetting) / Resin Based - Stratasys (Multi-material) Slicing Slicing tools convert a 3D mesh (STL) into GCODE (aka a list of commands to run the printer) Cura is what we use for the Ultimaker. Cura Manual Slicing Process Load STL file into Cura Choose PLA material for Extruder 1 and PVA for Extruder 2 (If using support material) Choose a print profile (aka Layer Height: Start with Fast or Normal options) Choose an infill (Density) Save GCODE file and copy to blue USB drive Materials We currently have limited supplies. I recommend purchasing a roll of PLA (and PVA if you need it) from Gizmodorks or Amazon. FDM Materials Overview PLA from Gizmodorks and ABS are the most common. Other materials: Nylon, HIPS, TPU. PVA from Gizmodorks is used as support structure material for building complex parts. Meshes STL File Format for 3D Printing / STL (file format) Tools for working with meshes Meshlab - Good for viewing meshes. Meshmixer - Good for manipulating meshes in preparation for printing. Netfabb - Good for looking at STL dimensions and repairing meshes before importing to Cura. Pleasant3D (MacOS) - Utility for quick viewing/resizing of STL files. MacOS only. 3D Printing Services - Assignment 7: Bits to Atoms \u00b6 Create / remix / mashup a product design concept and 3D print it . Use the opportunity to advance your skills in designing for 3D printing in any of the following areas: new forms, objects from from finding explorations, complex geometry, multipart assemblies, tolerances, designing with fasteners (screws, etc), designing objects that snap fit, flexible materials such as TPU, print quality and resolution for a given application, embedding electronics such as sensors and LEDs, low to high resolution prototyping, or anything challenging your understanding of printing, materials, or form printability. Tips: Explore some of the resources listed for 3D printing. Look through the design guides below and seek out additional resources to aid your design process. As with most ideas turned into CAD models, I suggest start by hand sketching your ideas out. Think about the problem you wish to solve or the questions you have around whats possible with this tool / medium / material. Think about the forms you want to model, the parts you want to use in an assembly, the mechanical movements you wish to explore, etc. Don't let the tools or process get in the way of you producing an instance of your idea. Start simple and make many iterations until you get to something that communicates your intent. Pay special attention to your print times and plan jobs accordingly. Since others will be trying to print something over the week, this may mean staying late to \"manage\" the print job or working together via slack to manage a \"print queue\". Meaning, work together to establish a schedule for print jobs. Deliverables: Documentation including a project writeup, printing photos/video, photos of the 3d printed object(s), and a 2-3 min video walkthrough of your design process and final results. You may show the steps of the process in your video . Describe the project motivation, objectives, challenges encountered, and possible next steps if and/or when you are to go a step further. What problem you were trying to solve? What tools did you choose to work with? What part of the printing process did you find most interesting and the most challenging? If you chose to make progress on you final project, which milestones did you hit and whats next? Be sure to credit any tutorials, videos, images, blog posts, etc that you use. Embed your video into your blog post. Physical model(s). Place all models produced on the black shop table. Label your model with a title and your name. Share the URL to your post on slack #cmstudio. CM1 [Tues]: Due Nov 6 CM2 [Wed]: Due Nov 7 Resources Additive Manufacturing Technologies: An Overview Design Guides - Think of these are useful resources regardless of the printing process. What is the best type of plastic for my 3D printing application? How to Design Snap Fit Components How to Choose the Best Fasteners for 3D Printed Parts Shapeways: Modeling & Design Tips 3D Printing Tutorials Simplify3D: Print Quality Troubleshooting Guide Repairing 3D Files With Meshmixer and Netfabb Adding Screw Threads i.materialise Design Guide 5 Mistakes to Avoid When Designing a 3D Model for 3D Printing Key design considerations for 3D Printing Enclosure design for 3D Printing: A step-by-step guide Formlabs Tutorials - Good design references even though we don't have a Formlabs SLA printer. Meshmixer Support Generation with Meshmixer How to create custom overhang supports in meshmixer Post Processing Ultimate Guide to Finishing 3D Printed Parts Post processing for FDM printed parts How to spray paint 3d models XTC-3D Epoxy Projects / Inspiration Thingiverse Microscape - 3D printed cityscapes Paper: Thingi10K: A Dataset of 10,000 3D-Printing Models , Website More Resources Print the Legend ( Netflix ) Udemy: Designing for 3D Printing with Fusion 360 Thingiverse \"Full Printed\" by nueveojos (Length: 4:45) Visualizing Mathematics with 3D Printing by Henry Segerman Week 11: Digital Fabrication Methods \u00b6 Nov 6 / Nov 7 CM Work Session - Friday, Nov 9 9am - 12pm. I'll be at the studio for anyone that needs extra help on assignments and projects. Topics Contouring 3D shapes to make 2D slices (Slicing 3D shape into stackable parts) Triangulate a 3D object (aka make it faceted. ie. Blue Bear, Stanford Bunny) Waffle (aka make slotted 2D slices from a 3d model) Unrolling 3D geometry to make 2D curves (ex. Platonics, shapes with Tabs) Working with meshes Importing / Exporting in Fusion and Rhino Import mesh and make NURBS (mesh data from Thingiverse or 3D Scanning) Working with 3D scanner data (scanning, cleaning, processing) Export meshes for 3D printing (checking geometry) Assignment 8: Realizing Digital Objects \u00b6 Explore one or more digital fabrication methods (contouring, triangulation, waffle, unrolling geometry, or some combination of these) and produce a physical instance of it. For example, you might have a 3d model that you would like to produce at large scale. Larger than might be possible in a single 3d print within a reasonable amount of time. What method would you use to produce your model? What if the model were triangulated? Or contoured? What material would you choose? What steps need to be taken in the digital domain to translate into components that can be produced and assembled physically? Deliverables: Documentation including a project writeup, build photos/video, photos of physical object(s) produced, and a 2-3 min video walkthrough of your design process and final results. You may show the steps of the process in your video . Describe the project motivation, objectives, challenges encountered, and possible next steps if and/or when you are to go a step further. What problem you were trying to solve? What tools did you choose to work with? What part of the process did you find most interesting and the most challenging? If you chose to make progress on you final project, which milestones did you hit and whats next? Be sure to credit any tutorials, videos, images, blog posts, etc that you use. Embed your video into your blog post. Physical model(s). Place all models produced on the black shop table. Label your model with a title and your name. Share the URL to your post on slack #cmstudio. CM1 [Tues]: Due Nov 13 CM2 [Wed]: Due Nov 14 Resources Platonic Solids Rhinopolyhedra (Rhino Plugin, Windows Only) Unrolling YouTube: Unroll Surface in Rhino 4: Tricks for managing compound curves YouTube: Rhino 3D CAD Technique #12: Difference between Unroll, Smash and Create UV Curve commands Origami Simulator Pepakura Contouring Strata Bench by ADintheStudio Slicer Tool (Fusion 360 Plugin) Triangulation (Faceted) YouTube: Grasshopper 003 triangular Surface \"I See What You Mean\" aka Denver \"Blue Bear\" by Lawrence Argent Waffle YoutTube: grasshopper tutorial # waffle structure ribs part 1 YoutTube: grasshopper tutorial # waffle structure (ribs) laser cut file part 2 Sectioning design systems by HASSAN RAGAB YouTube: Waffle structure - Grasshopper Tutorial YouTube: Grasshopper 006 waffle structure beams concept & fabrication - Put this on MUTE! Week 12: Open Studio \u00b6 Nov 13 / Nov 14 Potential Topics Fusion 360 CAM Bantam Mill (Workshop) Arduino and Raspberry Pi Rhino / Grasshopper (Workshop) Final Project Proposal \u00b6 Submit a revised or updated final project proposal anytime before Friday Nov 16th (The Friday before Thanksgiving Break). The earlier the better so you have time to ask questions, order any supplies you may need, etc. Deliverable: A new or updated final project proposal posted to your blog. It should include the following: Project Title Project Summary ~ 1 page max (ie What is it? What problem(s) are you solving? What will it do? How will it work?) Key components of your project (ie. Resources, skills, and technology needed to realize it ~ Materials, CAD, 3d Printing, Bantam Mill, Processing, Arduino, Shapeways, etc) Milestones you have hit thus far and what you plan to do in order to realize it in the weeks following Thanksgiving break. If you need to order some parts, what do you need? What questions do you have? Where do you feel you are lacking in skill and need assistance? Share the URL to your post on slack #cmstudio. Thanksgiving Break (No Class) \u00b6 Phase 5: Final Project \u00b6 Week 13: Open Studio \u00b6 Nov 27 / Nov 28 Final CM Work Session - Friday, Nov 30, 9am - 12pm. I'll be at the studio for anyone that needs extra help on assignments and projects. Open Studio Project Checkins Week 14: Open Studio \u00b6 Dec 4 / Dec 5 IMPORTANT: Please complete the course evals (FCQ's) for CM1 or CM 2 by going to colorado.campuslabs.com/courseeval . You will need to authenticate using your campus user ID. The course eval period is from Dec 3 to Dec 10. Open Studio Project Checkins Week 15: Final Project Presentations \u00b6 Dec 11 / Dec 12 CM Studio: Final Project Showcase - Wednesday December 12, 2018 To wrap up the fall semester in CM Studio 1 & 2 we have two events coming up. Both events are free and open to the public. 1301 Walnut St. Boulder, CO Join us for the CM Studio: Final Project Showcase at 4:30pm doors / 5pm presentations, Wed, Dec 12. Students will present their final projects. I AM WHAT I WISH, an interactive art installation that explores the power and influence of wishes through physical and digital representations. Wed, Dec 12th from 6 - 8 PM. Students: Jonas Escobedo, Allison Spiegel, and Makenna Considine Last Day of Classes - December 13, 2018 - All projects (P1, P2, P3, Final) need to be turned in by this time to receive credit. Final Project Deliverables \u00b6 Prepare and deliver a 8-10 min presentation at the showcase. Assume the audience knows nothing about your work or what you have made. What problem did you set out to solve? What is your project all about? How did you accomplish your goals? What resources did you make use of? What challenges did you encounter and how did you overcome them? What worked? What didn't? If this is a part of a larger long-term project, what milestones did you hit? What's next for this project? (Future Work) What are your major takeaways? What did you learn / discover? A blog post summarizing your project and development process. Include any images, video, and code in the writeup. Be sure to include links to past blog posts and any resources used in the process.","title":"Fall 2018"},{"location":"fall-2018/#critical-making-studio-cmci-studio-at-cu-boulder","text":"Nothing is a mistake. There's no win and no fail, there's only make. ~ John Cage Critical Making Studio is the foundational experience enabling students to realize their full potential as creative citizens in CMCI STUDIO. Central to the studio are four courses, Critical Making 1 and 2 (Fall), and Critical Making 3 and 4 (Spring), in which students enter into an experience as transformative and diverse as the participants themselves; all unique threads woven into whole cloth, informing the very fabric of studio culture. The courses aim to ground students in making as a deeply personal practice and ongoing journey in life thereafter, resulting in creative citizens capable of realizing that which they can envision utilizing a combination of their talents, intellect, abilities, creative faculties, and support networks. The studio experience is made possible by 24 hr, 7 days a week, access to a state-of-the-art rapid prototyping shop, media editing suite, and studio workspaces that can be transformed into a variety of configurations supporting activities such as artistic performances and special events. Additionally, access to fellow students, faculty, and industry partners provides an unparalleled educational experience and support network for developing transformative solutions spanning a variety of creative industries.","title":"Critical Making Studio CMCI STUDIO at CU Boulder"},{"location":"fall-2018/#critical-making-1-2","text":"Critical Making Studio 1 & 2 are first semester project-based studio courses that provide a foundation in the creative process of making with new and emerging digital and physical technologies responsible for shaping and reshaping the world around us. In these courses students work towards becoming fluent across digital and physical creative practices used in the development of new products and services. This includes developing project documentation, building skills in modern web development tools and workflows, 2D/3D modeling using Computer-Aided Design (CAD) tools such as Rhino and Autodesk Fusion 360, and leveraging digital fabrication tools and materials such as 3D printing and CNC machining to produce physical prototypes. Date and Time: Critical Making Studio 1 (BD Group) - Tuesdays, 9 am - 12 pm Critical Making Studio 2 (UX Group) - Wednesdays, 9 am - 12 pm Instructor: RJ Duran rj.duran@colorado.edu Slack: @rjduran. #cmstudio on cmcistudio.slack.com Office hours by appointment. Feel free to reach out to me via slack or email. Syllabus: CM 1 Syllabus CM 2 Syllabus See what we're up to! Follow us @criticalmakingstudio and @cmci.studio .","title":"Critical Making 1 &amp; 2"},{"location":"fall-2018/#course-resources","text":"This website is the primary resource for all critical making studio courses. Most of the resources used in the courses are divided up into sections that can be found on the left sidebar. Think of these resources as maps containing many possible tools that could help you accomplish your work and from which you will need to choose some to learn and work with. There are pros and cons to any tool but all have a set of functionalities and a purpose. As with any tool and any kind of personal creative process you are free to choose anything that works for you as long as the work gets done. As we move through the phases of the course feel free to recommend, add, and update the tools we and you find useful. Also, note that anything specific and relevant to an assignment or project will be listed out under the assignment or project deliverables.","title":"Course Resources"},{"location":"fall-2018/#workload","text":"The critical making courses are 3 credit hours each. You should expect to dedicate at least 2-3 hours per credit hour. This translates into a 6-9 hours per week. Consider 6 hours a minimum expectation for one studio course and plan accordingly with your other studio courses. Assignments given each week are \"due\" the following week by the start of class time. Important: Assignments are not graded but projects are. Completing all assignments is HIGHLY recommended. It may be difficult to complete projects on time if you don't complete assignments on time. Projects are assigned in the 3rd week of each phase and due by 11:59pm on the date specified in the project deliverables. Projects can be thought of as a more developed assignment as they will build on the skills acquired in the phase.","title":"Workload"},{"location":"fall-2018/#phase-1-going-digital","text":"","title":"Phase 1: Going Digital"},{"location":"fall-2018/#week-1-intro-to-critical-making-project-management-documentation","text":"Aug 28 / Aug 29 Introductions ( Slides ) Course Website / Schedule / Workload / Resources Project Management Tools BLDG61 Boulder Library Makerspace Emerging Technology MIT Technology Review - 10 Breakthrough Technologies 2018 Google I/O 2018 Recap Examples of Creative Work / Documentation of Process Creative Applications IDEO Sarah Jones - Artist / Illustrator Jonathan Harris - Today Mike Winklemann aka Beeple Ash Thorp Bradley Munkowitz aka Gmunk UVA The Made Shop - Adobe Remix (2013) - Denver Based Shop Legwork Studio - Denver Based Agency Meow Wolf Otherlab Tycho Olafur Eliasson The Mill Breakfast NY Pioneer Works Subrosa Mullenlowe Autodesk Pier 9 Residency Projects Creativity, Vulnerability, Practice, Making How to build your creative confidence - David Kelley @ TED 2012 The power of vulnerability - Brene Brown (June 2010 at TEDxHouston) We Make Things (Video) Ira Glass and the Creative Gap All Artists Must Overcome , On Being Creative (Video) Other (Creative) Resources / Projects Designspiration Behance Grey Scale Gorilla - Cinema4D Motion Graphics Tutorials","title":"Week 1: Intro to Critical Making, Project Management, Documentation"},{"location":"fall-2018/#assignment-0-setup-a-maker-blog","text":"A place to document your work for Critical Making. This can be a part of your current portfolio website or a separate website or blog. Regardless of where it exists, you need to have a place for sharing your work using images, video, and text. Everyone in STCM has a Medium blog they are working out of for RE Studio. You are free to use this as your CM blog if you wish. You may want to make use of post categories for your different types of posts in this case. For example, tag a post with \"Critical Making\". Examples from last year: Sarah Safranski Jim Murphy Matt Isola Nikki Cavalier Nick Balderston . Examples of similar sites: Chikara Inamura (HTMAA 2014) Matt Keeter (HTMAA 2011) Christos Tzamos(HTMAA 2014) Zach Seibold (HTMAA 2014) Merav Gazit (HTMAA 2014) Dorota Orlof (FAB Academy 2018 Barcelona)","title":"Assignment 0: Setup a \"Maker Blog\""},{"location":"fall-2018/#assignment-1-final-project-concept","text":"Create a \"model\" (sketch, raster, vector, 2D, 3D, render, animate, simulate, etc.) of a possible final project. The word \"model\" is meant to be understood as any kind of digital or physical representation of an idea or concept you are excited about pursuing in your course of study in critical making. Possible examples: websites, web applications, objects, artifacts, products, digital-physical experiences, installations, performances, platforms, artworks, tools, machines, devices, etc. Begin to think about the various concepts, tools, and technologies associated with your brand design or UX studio courses and how they may inform the development of such a project. Deliverable: Post your concept on your blog and share a link to it via Slack #cmstudio before the next class. Include images, video, text, sketches, etc that support your (big) idea. We will discuss your concepts in class next week. Optional: You might consider recording a short video describing your project using a screen capture tool such as Screencast-o-matic or from your phone if it makes sense. If you do this, create a Youtube account, upload your video, then embed the video in your blog post. CM1 [Tues]: Due Sept 4 CM2 [Wed]: Due Sept 5","title":"Assignment 1: Final Project Concept"},{"location":"fall-2018/#week-2-macosterminal-web-development-i","text":"Sept 4 / Sept 5 The next few weeks will be about current web development paradigms and practices -- getting comfortable with programming for the web, learning how to use web development tools and workflows to solve problems, and building a personal practice around using these technologies for projects. If you are curious about the history of electronics, computers, computer science, programming, and the Internet, check out the Histories section. I strongly advise you to start getting familiar with the various histories and technological underpinnings of the technologies you use every day. Remember, it's also about building awareness and understanding about the systems that run our world. These resources are meant to work through at your own speed and as you begin to ask deeper questions about why something works and how something works. In the weeks ahead you will begin to build your web development skills inside and outside of class. We will approach each language and weekly topic with simplicity in mind and focus on understanding fundamental concepts. To build advanced skills with the tools we discuss you will need to dedicate time outside of class for further study and for building projects. We will approach topics in a hands-on workshop format so be prepared to dive in. The Web What is the Web? What is its purpose? The big idea: The purpose of building websites and web applications is to make an idea accessible to one or more people through the Internet. How does it work? -- Recall what you saw in RE Studio Week 1 starting on Slide 25. What is it made of? -- Hardware, Software, Servers, Domains, Protocols, Stacks, Languages, Frameworks, Browsers, APIs, Tools, Modules, Databases, Ports, Data, Information, CMSes (Wordpress, Squarespace, Wix, etc), etc. The Industry What is web development in 2018? What does a web developer do? How do you build web development skills? (HINT: Practice, practice, practice) Stacks Front-End = HTML, CSS, Javascript, Design, Interactivity, Responsive Back-End = Ruby, Python, PHP, Node, MySQL, PostgreSQL, MongoDB, Dev Ops Full-Stack = Front-End + Back-End + DevOps + Design Good Reads Read through each one. Click on the links. Read about the tech. Take a breath. Begin to understand how things connect - make a map if you need to. Don't get overwhelmed. Make a list of the technologies you read about. Try some of them out in your sandbox. Front End, Back End, Full Stack\u2014What Does it All Mean? Front-End vs Back-End vs Full-Stack on Udacity A Guide to Becoming a Full-Stack Developer in 2017 - If you only read one of these, read this one. How it feels to learn JavaScript in 2016 - Read through this and see if you can begin to make sense of the current development ecosystem. (Note: Its complex and a little bit insane but this guy makes a good (fun) read of it.) Development Environment Lets jump into it. Tools, tools and more tools. Working with web technologies requires constant learning of programming languages, tools, and workflows. The only constant is change. Especially to existing and widely used code bases (ie. anything open source). In this field you never stop learning and you are always practicing. Text Editors TextEdit - Default editor on MacOS ASCII vs Binary Files Atom - Free editor by Github Atom Packages Atom Flight Manual My Atom Setup - Includes list of packages I have installed. Visual Studio Code (VSCode) - Free editor by Microsoft Terminal How I use terminal (themes, .bash_profile, etc) Learning Terminal Git - Version control tool Github - Website that hosts git repositories Node.js / npm Local Development Server - There are several ways to work with a local web server. Some are simpler than others to setup and configure. Its mostly a matter of personal preference and project preference which local web server option you use. You can refer to the cm-code/live-servers repo for simple examples. Chrome Browser Chrome Dev Tools (Inspector for debugging). Access via: View > Developer > Developer Tools within Chrome. Languages In the resources here you can find some learning pathways for building skills with these tools. Make time to read through the basics of all the languages and try things out. Most importantly, seek to apply the skills you are learning towards projects. HTML / Learning HTML & CSS CSS Javascript / Learning Javascript Node.js We will only talk about Node.js briefly in order to install Node and npm. We will go deeper into how it works in the weeks ahead. In Class Examples We will work through these things in class so you have a good foundation to experiment with web languages. Terminal Location on MacOS: Applications/Utilities/Terminal.app Whats the difference between terminal applications (/usr/bin) and MacOS .app applications? How do you display hidden files on MacOS? Look here Customize your Terminal in Terminal > Preferences. It helps to make the text larger on most screens. Common commands: cd, ls, mkdir, rmdir, rm, mv, cp, pwd, man, touch . Think of all these commands as tiny applications that have no GUI. They are very old and have been around since the start of Unix based systems (Read this to learn more: Looking back at OS X's origins ). Look at MacOS/Linux/Unix Command Line Cheat Sheet to see more information about common commands. Working with directories and files: cd <folder> - Goto into a folder cd .. - Go up one level cd ../<folder> - Go up one level (to parent folder) and into a child folder cd ../.. - Go up two levels etc Tab completion - When you start typing in a terminal you can hit tab to complete the command if the file or folder you are going to use is available. If you hit Tab twice, you will see the contents of a folder. Git You will likely not have Git installed on your machine. You will know if you have it or not when you type git into the Terminal. You may be prompted to install XCode Developer Tools in doing so. You have two options to install git: Install the XCode Developer tools or download the installer from git-scm . After installing it the git command should work in the Terminal. Github Workflow Make Repo on Github. If you check the box to add a README file it will include a README.md file in the repo. This is the main information file shown when you goto the repo URL. Markdown = text file with special syntax that gets converted into HTML. Review Markdown Cheatsheet . Command Line Cheat Sheet by git-tower - This one is great! Clone Repo: git clone <repo url> . For Example, git clone git@github.com:rjduran/cm-sandbox.git . Note the URL and its use of \"git\" or \"https\". Use \"https\" to start. You need to go through the Github tutorial below to connect to Github via SSH. Make some changes: (Using text editor of some kind - Atom, vi, TextEdit, notepad) Stage the changes: git add index.html Commit the changes: git commit -m \"my message describing changes\" Push the changes: git push Pro tip: After setting up your Github account, read through Connecting to Github with SSH to setup your system to connect securely to Github and not require you to enter your username and password credentials each time you push changes. Download and install Node.js, npm, and live-server (Step 1 of assignment below). Places to look to for help Stackoverflow - The most used development community / forum. At some point you will use this. Its a great place to ask good questions and answer things you know about.","title":"Week 2: MacOS/Terminal, Web Development I"},{"location":"fall-2018/#assignment-2-build-a-sandbox","text":"Create a local development workspace (aka sandbox ) to prototype with HTML, CSS, and JS. By the end of this you should have something that looks like my cm-sandbox repo. What is the purpose of this? To become familiar with the file types, languages, and how they work together. At a fundamental level this approach to experimentation establishes good development practices and efficient workflows. It also supports hands-on learning, which is the only way to improve as a programmer. As a programmer you want to be in control of your code, tools, workflow, and system. ( Don't let the computer control you. ). Tip Pro Tip: Setup a working directory for all programming projects (For Example, /Users/username/code ). This directory then becomes your goto location for anything having to do with code, programming, cloning repos from github, experimenting with new tools and software, and more. This is precisely how I organize my system. Download and install Node.js and live-server . (we will do this part in class). Verify node and npm are installed via Terminal: node -v && npm -v . You should see two version numbers matching what you installed. Install live-server globally: npm install -g live-server If you have done all this correctly you should be able to download a zip of (or clone the) cm-code git repo and run the hello-live-server example via Terminal. Create a Github account and make a repository for your web project (as demonstrated in class). You can name the repo anything you want. For example, \"cm-sandbox\". Clone a copy of this repository to your machine via Terminal. git clone <repo-url> . Setup your machine to make use of a local development folder and local development server (See tip above and Step 1). Create 3 files in your web project repository folder (ie. the project \"folder\" or \"repo\" you created and then cloned from Github in step 3). index.html - ( quick boilerplate ) style.css script.js Launch your local development server ( live-server ) and code editor of choice (ex. Atom or VSCode) and make some changes to the files in your web project. Remember the purpose of a local development environment is to \"simulate\" how the code will perform when uploaded to another web server. Create a basic html page using validated markup (Hint: Using a tool like FreeFormatter , check that your code works as expected.) Add some css selectors to your style.css file. Optional: Add some basic Javascript functionality to your script.js file. Commit the file changes to your Github repo. Note your repo URL and include it in your post. Deliverables: A 1 min video screen capture demonstrating your sandbox environment and development folder structure. Include a link to your Github repo and embed the video in your blog post. Share the URL to your post on slack #cmstudio. Look into using a screen capture tool such as Screencast-o-matic to document your workflow. Upload your video to youtube or vimeo. Optional (but highly recommended): A writeup on your blog about your learning experience. What hurdles did you encounter and how did you overcome them? What worked and what didn't? What new tools did you try? How would you explain what you've done to someone that doesn't know anything about web development and the tools used? CM1 [Tues]: Due Sept 11 CM2 [Wed]: Due Sept 12 Resources: Version Control (Git / Github) Github Tutorial (10 mins) - Non command line (Terminal) tutorial. Git - The Simple Guide - Command line based tutorial. Connecting to Github with SSH Git & Github Tutorial on Udacity - Command line based tutorial. Start a new git repository git/github guide a minimal tutorial The most important git commands Git Immersion - Advanced Tutorial. Work through this once you get the hang of working on the command line. Command Line Cheat Sheet by git-tower - This one is great! Version Control Workflow Cheat Sheet for Git (git0tower) Terminal Learning Terminal - A learning pathway for beginners How to use Terminal on Mac , How to use a Terminal on Windows MacOS/Linux/Unix Command Line Cheat Sheet , Mac Terminal Cheat Sheet , Another Cheat Sheet How to show hidden files and folders including ~/Library on a Mac - The benefit of doing this is you can see whats actually on your machine. By default, MacOS and Windows systems hide lots of stuff. To be a master of your machine(s) you need to begin learning whats hidden just under the surface. Markdown Mastering Markdown Markdown Docs Markdown Cheatsheet How to write a great README for your GitHub project - These are only examples. Not all projects need every detail in the readme as described. The contents of a readme really depend on the type of project and audience. In general, its good to enable someone else to download and run your code if you are sharing it to Github. Awesome README - A massive list of README examples and resources.","title":"Assignment 2: Build a Sandbox"},{"location":"fall-2018/#week-3-web-development-ii","text":"Sept 11 / Sept 12 Terminal Review Git/Github Review What are the steps to working with a git repo? ( Hint: Look at the Github Workflow (above) in the notes from last week. ) How else can you use git repos? Do you need to use Github? Web Development 101 Web Languages (HTML/CSS/JS) Learning HTML & CSS Learning Javascript Responsive Development - Desktop/Mobile, Media Queries, CSS/JS Frameworks, etc Daily CSS Design In Class Examples Question: How do you go about building a website or web application from scratch? In general, the process and timeline from idea to a functioning live site that matches the needs of all parties (client / users / etc) can vary greatly based on a host of factors such as design cycles, development timelines, paying/non-paying clients, branding, UX research, site complexity, money, and more. On top of that, all design / development shops, agencies, freelancers and any creative parties involved with the process typically have their own way of working. There are different standards adopted or created by the various parties and it's common for some tool sets to change project by project and year by year. In many ways, it's still such a craft and creative process to bring websites and applications to life. To better understand the process, these are a few questions you may want to ask when starting: Decide what you are going to build. What is the idea? What will the website (or application) do? What is it's purpose? Who is it for? What kind of website it it? Ecommerce? Personal? Portfolio? Blog? Album? Game? Social Media Platform? (Again, whats the purpose of it?) What does it look like? Branding? UX? Sketch, sketch, and more sketching (like on paper or wireframe tools or Sketch ) Decide how you are going to build it. What tools will you need to use to realize the idea? What is the domain? Where is it hosted? Build from ground up or use a theme or template? What CSS and/or JS libraries will be used (if any)? To CMS or not to CMS? Decide how a person may use it. Who is the audience? What platforms will it be accessed on? This will influence what the tech needs are. Decide what kind of content it has. Or at least what content will be aggregated over time. Give all relevant content a place. What kind of data is collected and used? Timeline What's the timeline from start to finish? Is a website ever finished? Money -- What's your time worth? What happens after the site is live? Maintenance cycles? There are probably other things to consider but this is a good starter list. Here's an article that really distills it down a bit -- How to Make a Website in 2018 . As you progress in your understanding about web design and development, think about the questions that come up for you and how you might proceed. Lets make something! You now (should) have a development environment to test HTML, CSS, and Javascript. If you don't, review what we did last week and/or clone my sandbox environment from github . At a basic level all you need is a single index.html file to render a webpage. All the CSS and JS you may have can exist inside the same file embedded within <style>...</style> and <script>...</script> elements. It only becomes important to separate the 3 types of code when a project becomes too large to manage within a single file. Best practices, modularity, and the need for regular maintenance have led developers towards a current approach of establishing and using style guides or coding standards . Lets play with some HTML and CSS in our live-server based environment. Example: Add some code to your Github project (repo) Clone your project from Github (Terminal) Open the project folder in Atom (text editor) Make some changes to the index.html file in Atom. Save the file. Add and Commit the changes to your repo with a message ( git add index.html and git commit -m \"my message about the changes\" ) Push the changes to the Github. ( git push ) Repeat What does each file type consist of? HTML = Document Structure CSS = Visual Identity JS = Interactivity (We will get more into this next week) Questions: How do you define document structure with HTML h1, h2, p, ul, li, div elements? What are CSS selectors and how do they relate to HTML elements? What is the difference between embedded and linked CSS and how do you use both types? Example: The Grid git clone https://github.com/rjduran/cm-grid-project.git -","title":"Week 3: Web Development II"},{"location":"fall-2018/#project-1-building-hypertexts","text":"Design and build a hypertextual storytelling experience (aka a website) that allows the user to make a series of choices leading them down a rabbit hole of possibilities. It's up to you how your experience begins, progresses and ends, if it ends at all, or if its something that can be experienced forever. Note the word game is used loosely below. What is Hypertext? What is Digital Storytelling? Implementation: Develop a storyline / narrative to base your experience or game on. It doesn't have to be extremely complex. If you are having trouble with this part, try out a storyline generator tool and start sketching it out. Think about other web based experiences you have encountered and how you navigated through the information presented. Read the 1st chapter of the book Finite and Infinite Games by James Carse (pdf) . It's awesome. Construct navigation pathways through your storyline using any number of linked pages. Hint: This is essential a Hypertext based experience. This is why HTML is called Hyper-Text Markup Language. It is the defacto standard for building connections between information objects. There should be some kind of main home page (index.html) that displays options for a user to choose from. Each subsequent page will present further options while guiding the user down a path from start to finish. Where the user ends up is up to you. When thinking about a game as the type of experience being put forth, here are a few examples of adventure games where the user has choices to make that determine the outcome (win / lose / infinite play / no outcome). Don't worry, these are just examples. I don't expect you to build a fully developed 3d world or program anything as complex as these games are. Stick with simple HTML pages that link together. Zork I Oregon Trail Myst Everything - Feat Alan Watts Sim City Create your own adventure game (HTML) This one is the most like what I would expect you build from a functional perspective. Although I bet you can do it in a much more visually pleasing way. Establish a simple visual language and implement it in CSS -- color, typography, images, layouts, etc. If you have a hard time with color palettes, explore some color palette tools . You may also choose to make something entirely image driven, in this case, explore whats possible visually with images -- dimensions, color, contrast, etc. A page can consist of any type of content you want to tell the story or provide clues for a user to make a choice. Basically every choice someone makes will be a link to another html file. Possible content: quotes, video, text, images, gifs, animations, graphics, sounds, interactive elements (via p5.js ) This is all possible without using Javascript (unless you are using p5.js for any part of it). Your website (game) could be built using entirely HTML and CSS. Organize your CSS into one or more files to make use of the styles across each html file. Explore the use of Grid and Flexbox layouts (see resources below). Feel free to explore any CSS libraries that deal with animations and interactivity (see resources below). Keep it simple. Have fun! Deliverables: A 2-3 min video screen capture demonstrating your project in action. It can be running in your local server to demonstrate or you can upload it to a server and provide the URL. Create a Github repo for the project so others can clone it and try it out on their systems. Include a link to your Github repo and embed the video in your blog post. Share the URL to your post on slack #cmstudio. Look into using a screen capture tool such as Screencast-o-matic to document your workflow. Upload your video to youtube or vimeo. A writeup on your blog about your learning experience. What hurdles did you encounter and how did you overcome them? What worked and what didn't? What new tools did you try? CM1 [Tues]: Due by 11:59pm Sept 18 CM2 [Wed]: Due by 11:59pm Sept 19 Resources: Tools - Visual, Sound, Animation The web design process: creating the visual design Tone Generator Tool Animated GIFs Animate.css Flapper Font Awesome , Font Awesome Cheat Sheet - For easily adding icons to HTML elements Top 9 Animation Libraries Easing Functions Cheat Sheet Anime.js Twine - Twine is an open-source tool for telling interactive, nonlinear stories Inspiration Finite and Infinite Games by James Carse , pdf Synaptic Stimuli Data is Nature Grid and Flexbox Understanding the CSS Box Model The New Layout Standard For The Web: CSS Grid, Flexbox And Box Alignment How To Approach CSS layouts in 2017\u200a\u2014\u200aand beyond. Don\u2019t Overthink It Grids The ultimate CSS battle: Grid vs Flexbox How to Efficiently Master the CSS Grid\u200a\u2014\u200ain a Jiffy Grid Layouts / Tools Realizing common layouts using CSS Grid Layout Grid by Example Interactive Flexbox Cheat Sheet Interactive Grid Cheat Sheet","title":"Project 1: Building Hypertexts"},{"location":"fall-2018/#phase-2-web-applications-libraries-frameworks","text":"","title":"Phase 2: Web Applications, Libraries, Frameworks"},{"location":"fall-2018/#week-4-computational-thinking-javascript-i","text":"Sept 18 / Sept 19 Project 1 Due by 11:59pm. Submit via #cmstudio. I'd like for everyone to try out each others projects. Clone each project repos and play with them. See Part 2 of Assignment 3 . Questions on workflow and tools? My Atom Setup I've been starting to use VSCode more lately because of automatic code completion for almost any language I use. It's especially nice for Javascript out of the box. Computational Thinking Computational thinking is the thought process involved in formulating a problem and expressing its solution(s) in such a way that a computer\u2014human or machine\u2014can effectively carry out. ( Wikipedia ) Question: How does one think like a programmer or computer scientist? How to think like a programmer\u200a\u2014\u200alessons in problem solving Exploring Computational Thinking by Google - Read this overview. How can I learn to think like a computer programmer? - Read through the first response. What is Pseudocode? Question: How can I get better at programming / thinking / making / problem solving this way? Lots of practice. Look to solve as many problems as you can using programming (and in the process practice computational thinking). Try out as many different languages, libraries and frameworks as you can. Read books. Read / work through tutorials. Watch videos. Think about what kind of learner you are and how you navigate resources when learning new skills. Start with the resources in Learning Javascript . Related to the above discussion about programming and such, here are a few things to read if you are concerned with needing to have a strong background in math to accomplish anything with Javascript or another programming language. I hope this also addresses the question of \"What amount and kind of math would you need to use to improve as a programmer?\" And I use the word \"improve\" because its a practice like other forms of making and creativity. Which takes time to practice and master. You Don't Have to Be Good at Math to Learn to Code Learning to code: do I need to be good at maths? \"How much math do I need to know to program?\"\" Not That Much, Actually. Does Math Help Programming Or Programming Help Math? Javascript JavaScript is a programming language for the web. It makes things interactive and fun! Question: When should Javascript be used? I hope some of these articles begin to paint the picture of why and when you would use Javascript. You Know You Should Use JavaScript When\u2026 The Five Top Reasons to Use JavaScript When do developers use JavaScript and why? Choosing Programming Languages: The Right Tool For The Job (C#, Python, Node.js) Question: How to use JS with HTML / CSS? Put it inside a <script> tag within the <head> tag inside your index.html file. Placement in <head> tag vs the end of <body> tag. Why? Stackoverflow Discussion on Pros and Cons Embedded vs Linked (ie. JS code inside a script tag or in a linked script.js file). Linked: <script type=\"text/javascript\" src=\"script.js\"></script> Question: How can I work interactively with it and within the browser? Chrome Developer Tools > Console and console.log() are your best friend when debugging JS code. Here is a great intro tutorial explaining how and why to use the console. How To Use the JavaScript Developer Console DOM (Document Object Model) The DOM is a standard object model and programming interface created by the browser when a webpage is loaded. It is essentially your HTML page but in a different format now accessible through a browser based programming interface and language (Javascript). In general, JS can manipulate (get, change, add, delete) any part of the DOM. Here's a great image of the DOM Try opening the Chrome Developer Console and typing document or window . What does it return? How does it relate to the DOM image above? Some things you can use JS for: Change / Remove HTML elements in the DOM / on the page Change and add CSS styles to elements Read and change element attributes (href, src, alt, and more) Create new HTML elements and insert them into the DOM / page Attach event listeners to elements (click, keypress, submit) Language Fundamentals Variables Numbers Operators Booleans Strings Conditionals Loops Functions Arrays The language has many built in Objects that contain methods (aka functions) and properties. We will talk more about Objects next week so you don't need to know much about them yet. Just know that everything you get a reference to in Javascript is essentially an Object of some kind and contains data in the form of Key-Value pairs. The reference below is a great place to go to look up how new types of Objects work. Javascript Reference Before attempting the assignment below, work through the videos in the following playlist. It will provide more guided practice in the JS language and will cover the topics above. The playlist totals about 2 hrs in duration if you go through them all with an average video length of 6 mins. JavaScript DOM Tutorial Series (Video Playlist)","title":"Week 4: Computational Thinking, Javascript I"},{"location":"fall-2018/#assignment-3-javascripting","text":"Tip Pro Tip 1: Clone your cm-sandbox repo as a starting point or create a new repo (project) on Github then clone that repo. See instructions here for cloning a repo into a folder with a different name . If you make a new project folder to work out of you need to setup the same basic files as before -- index.html, style.css, and script.js. (Do you see the time-saving benefit of setting up a project \"template\" to start from?) Pro Tip 2: The Chrome Developer Tools > Console and console.log() are your best friend when debugging JS code. This assignment consists of two parts: Part 1 : Using this repo as a starting point, write some code that allows you to get familiar with the interplay of JS and HTML by inspecting and manipulating the DOM in the following ways. Note all the code you enter can be placed in the script section of the index.html file at the end of the body tag. Alternatively, you can use a linked script.js file. After setting up your project environment and launching a live server in the folder, open the Chrome Developer tools Console and enter: document . You will get a representation of the entire HTML document as an object. The document object is the top level object in the DOM. Read through this list of Properties and Methods to begin understanding what is available within the console and use this as a reference for the following tasks. Getting Elements Get a reference to all the paragraph (p) tags in the document. Hint: Look at getElementsByTagName() Get a reference to a paragraph tag with a specific id of \"second\". Hint: Look at getElementById() Get a reference to a all paragraph tags with a class of \"first\". Hint: Look at getElementsByClassName() Get a reference to an element or elements within another element. For example, if you have an unordered list (ul) with several list items (li), how do you select a specific li and display it's contents to the console? Changing Elements Change the text within the previously selected list item (li) to \"Greetings List Item! I'm a string from another planet!\". Change the text of a specific paragraph to a different string of text. Use an Ipsum generator tool to create new placeholder text that you insert using Javascript. Removing Elements Clear the contents of the paragraph with an id of \"empty-me\". Clear the contents of the set of paragraphs with class \"empty-us\". Remove the div with a specific id of \"section3\". Adding Elements Create a new anchor tag that links to your blog and insert it just after the paragraph tag in the div with an id of \"about\". Append a new div anywhere in the document and give it an id of your choice. Insert a paragraph with some content into the div using javascript. Add a new list item to the sidebar ul that links to your new div so you can click and scroll to it. Event Listeners Make an event listener for any h2 element that triggers an alert() when you click it. Set the alert message to \"Hey Hey Hey!\". Make an event listener that triggers a change in the text of a specific paragraph with the id \"change-me\". Part 2 : Clone and analyze a classmates Project 1 results and formulate a list of 3-5 questions about things you notice it does or doesn't do that you might want or expect it to do based on the subject matter. What questions arise about the functionality, user experience, interactivity? Where do you see room for improvement with Javascript? For example, could it use animation or transitions between visual elements or pages? What might an alternative navigation structure look like? Would you need a different interface design for different types of users and/or device types? You can think of these questions as problems you want or need to solve potentially using JS. Some solutions may be CSS or content based. Include this list along with the project chosen to critique in your blog post writeup. If you can see how JS might begin to address some of your questions, describe the steps you would take to solve the problem. You don't need to write any code to implement solutions for this part unless you want to and are motivated to do so. Deliverables: A blog post containing a brief writeup for both parts and a link to your Github repo containing your Javascript explorations from Part 1. Include a short description in the README.md file of the repo with any specifics about the code you experimented with. Look at the Markdown resources for Week 2 if you haven't used the Markdown language yet. Share the URL to your post on slack #cmstudio. CM1 [Tues]: Due Sept 25 CM2 [Wed]: Due Sept 26 Resources: Students - A list of everyone in class and their websites and github accounts. The Console How To Use the JavaScript Developer Console The DOM What is the DOM? (Video) The HTML DOM Core Interfaces in the DOM Document Object Properties and Methods DOM Tree Visualization Example on CodePen Language Javascript.com by Pluralsignt Javascript Basics (P5.js Wiki Reference) - This is a great quick-ish overview of the JS language and how to use it in general and in combination with a great creative coding library called p5.js . Javascript Reference Examples W3 How-To Examples - A great set of how-to examples for various web topics. CSS Navigation Bars - This is what the cm-javascripting code is based on.","title":"Assignment 3: Javascripting"},{"location":"fall-2018/#week-5-javascript-ii","text":"Sept 25 / Sept 26 This week : CM Work Session - Friday, Sept 28 9am - 12pm. I'll be at the studio for anyone that needs extra help on assignments and projects. JS Week 4 Review JS DOM Tutorial - Bookorama App (by Net Ninja) Your workflow. What's new? Questions about JS in general, tools, etc Creative Coding Creative Coding is a type of computer programming in which the goal is to create something expressive instead of something functional. It is used to create live visuals and for VJing, as well as creating visual art and design, art installations, projections and projection mapping, sound art, advertising, product prototypes, and much more. ( Source: Wikipedia ) Tim Rodenbroeker - Designer / Programmer exploring branding w/ code WOVNS - Digital Fabrics Platform Nervous System What is creative coding? - Bite size intro to creative coding and generative design Dan Shiffman - Codeland - Creative Coding: An art and code showcase - NYC 2017 - Great overview of a bunch of creative coding / media arts projects built using Processing. Awesome Creative Coding - Carefully curated list of awesome creative coding resources primarily for beginners/intermediates. If you are interested in these topics, check out some more resources from Critical Making Fall 2017 . Interactivity Events & Event Listeners How to work with events - Element changes, Key presses, Mouse movements Events and the DOM cm-javascripting JS Timing Events - Learn more here about how to make events that trigger in time. More Language Fundamentals Functions What are functions and how do they work? Example: 1 2 3 4 5 function sayHello() { console . log ( \"hello\" ); } sayHello (); // Call the function. Prints \"hello\" Example of a function with return type: 1 2 3 4 5 6 7 function add ( a , b ) { return a + b ; } var a = 1 ; var b = 3 ; var c = add ( a , b ); // results in c = 4 Objects What are Objects and how do they work? Debugging: Using typeof . typeof \"a string\" Objects Quick Reference JavaScript Object Notation (JSON) - A syntax for storing and exchanging data. Javascript Built-In Object Reference Eloquent Javascript - This is a great book to learn more about the language and how to use Objects. Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // empty object var obj = {}; // object with three key/value pairs var obj = { 1 : \"A\" , 2 : \"B\" , 3 : \"C\" }; // object with three string key/value pairs var obj = { \"A\" : \"Letter A\" , \"B\" : \"Letter B\" , \"c\" : \"Letter c\" }; // object with two objects within it var obj = { \"A\" : { 1 : \"my first object\" }, \"B\" : { 1 : \"my second object\" } }; Arrays What are Arrays and how do they work? Arrays Quick Reference Array vs Set vs Map vs Object\u200a\u2014\u200aReal-time use cases in Javascript (ES6/ES7) Examples: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 // empty array var myArray = []; // array with 3 integer values in it var myArray = [ 1 , 2 , 3 ]; // array with 3 string values in it var myArray = [ \"critical\" , \"making\" , \"studio\" ]; // array with 3 objects in it. Each object contains two key/value pairs. var myArray = [ { \"A\" : \"letter A\" , \"B\" : \"letter B\" }, { 1 : \"yes\" , 2 : \"no\" }, { \"firstName\" : \"daft\" , \"lastName\" : \"punk\" } ]; JS Libraries and Frameworks Library A library is a collection of code containing objects, functions, and methods that you can use in an application or project. Examples: jQuery - Library for simplifying front-end / client-side Javascript. p5.js - Library for creating 2D/3D interactive browser based experiences. Three.js - Three.js is a cross-browser JavaScript library and Application Programming Interface used to create and display animated 3D computer graphics in a web browser. Three.js uses WebGL . What is WebGL? (Video) WebGL Tutorial - 3D Rendering in the Web Browser with WebGL (Video) A-Frame - A web framework for building virtual reality experiences. Uses Three.js under the hood. D3.js - Data Visualization Library Framework A framework can be everything you use in application development. It can be a library, a collection of many libraries, a collection of scripts, or any piece of software you need to create your application. Framework is just a very vague term. It's best to think about a framework as something that is mostly ready to use out of the box. Just add content and configure it to work. Examples: Bootstrap - Front-End CSS/JS Library/Framework Express - Node.js Web Application Framework Discussion: Library vs Framework JS Library vs Framework Video on Udacity What is the difference between a framework and a library? Examples / Work Session Using jQuery with the DOM Setup a index.html file to use jQuery How to target elements using jQuery? How to handle events using jQuery? Using p5.js - Work through Getting Started and Pick a few examples to get familiar with. Set them up in a sandbox directory to experiment.","title":"Week 5: Javascript II"},{"location":"fall-2018/#assignment-4-interactive-and-dynamic-javascripting","text":"Choose one option: Option 1: Build an interactive and dynamic website using \"vanilla\" Javascript or a helper library such as jQuery. Use your Project 1 code as a starting point or start from scratch with a different concept. Perhaps your final project concept will require interactive and dynamic elements -- identity those elements and work on coding some of them using JS. Take this opportunity to gain an understanding of how to build interactive and dynamic features into your website experience. Option 2: Build a browser-based experiment using a 2D/3D Javascript library such as p5.js or three.js . Choose to start from scratch or use the examples are a starting point (this is why they exist!). Mash up a few examples and see what you end up with. Deliverables: A blog post containing a brief writeup for your project or experiment. Include in your writeup any hurdles you encountered and how you overcame them? What worked and what didn't? What new tools did you try? Be sure to include a github repo to any code you worked on with instructions for its use in the README.md file. Use a screen capture tool such as Screencast-o-matic to document your workflow / demo your project. Upload your video to youtube or vimeo and embed in your post. Using a screen capture tool is one of the best methods for sharing interactive and dynamic experiences. Share the URL to your post on slack #cmstudio. CM1 [Tues]: Due Oct 2 CM2 [Wed]: Due Oct 3 Resources Eloquent Javascript - This is a great book to learn more about JS language fundamentals. Read Ch 1-6 and Ch 13-15 to review and go deeper into the concepts we've touched on this phase. jQuery CDN Draggable.js - A fun JS library we found during class that makes dragging things fun. chrome experiments - Various JS libraries and experiments built with JS JS Timing Events Programming Terminology - A Wikipedia for Programming, Computer Science, and Much More. Don't know a term? Look here. Templating Engines / Languages - I mentioned Pug.js and Handlebars.js.","title":"Assignment 4: Interactive and Dynamic Javascripting"},{"location":"fall-2018/#week-6-nodejs","text":"Oct 2 / Oct 3 JS Week 5 Review Share your assignment 4 Your workflow. What's new? Questions about JS in general, tools, etc Node.js Node.js is a platform built on Chrome's JavaScript runtime for easily building fast and scalable network applications. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices. Node.js is an open source, cross-platform runtime environment for developing server-side and networking applications. Node.js applications are written in JavaScript, and can be run within the Node.js runtime on OS X, Microsoft Windows, and Linux. Node.js also provides a rich library of various JavaScript modules which simplifies the development of web applications using Node.js to a great extent. ( Node.js Introduction - Tutorials Point ) Node.js = Runtime Environment + JavaScript Library Ok... So what is Node REALLY doing? In short, Node replaces the functionality of a server. This essentially means you can build your own custom server to process requests and serve responses any way you want. Cool eh!? Some common applications of Node.js are a blogging platforms (Medium), Project Management / Note Taking (Trello), Chat Applications (Slack), Text Editors (Atom, VSCode) Collaborative Document Editing (Similar to Google Docs), Static Site Generators, Building Command Line Tools, Real-time Data Monitoring Systems, building APIs, handling authentication server-side, and more! Server Overview What\u2019s the cloud? Client/Server Relations Whats a Request? Whats a Response? Install Node.js FYI: We did this in Week 2 . You don't need to do it again. If you haven't done it, do it before class. Download LTS pkg and run the installer. When installer is complete, open Terminal and type node -v . You will see a version number matching what you downloaded. Type npm -v and you will see a npm version number as well. You're ready to go! What is Node.js and what can you do with it? Why The Hell Would I Use Node.js? A Case-by-Case Tutorial What exactly is Node.js? What is Node.js? The JavaScript runtime explained 10 Reasons to Use Node.js 10 best Node.js App Examples / 12 Apps Written with Node.js tl;dr: Paypal, Netflix, Trello, Uber, LinkedIn, Walmart, Ebay, Medium, Groupon, NASA, Yahoo, Mozilla, and more What does a basic application look like with Node? Example: Hello World Example: Basic Server How does it work? Understanding the package.json file Setup a Node project and pacakge file with npm init or npm init -y . The node_modules folder What is npm ? Global vs local install. npm install -g <packagename> vs npm install <packagename> How to run a Node app? node app.js Pro Tip: As you begin working on a Node application you likely notice that you need to constantly stop and restart the node runtime via terminal. Wouldn't it be nice if there was a tool to do this for you automagically? There is! It's called nodemon . Just type npm install nodemon -g to install and run your app by using nodemon app.js . Getting started with Node Feel free to work through these exercises to get a better understanding of the pieces of npm and node. To dig deeper, explore the learning node section and work through the tutorials. hello-npm hello-node hello-p5 - This makes use of Node.js to serve a p5.js sketch. This is similar to running live-server in a folder with a p5.js sketch in it. Express.js Framework Express is a minimal and flexible Node.js web application framework that provides a robust set of features for web and mobile applications. To Install: npm install express What is Express.js and what can I do with it? What does a basic application look like with Express? How does it work? Getting started with Express hello-express Applications of Node Node can be used to build web applications that connect various types of digital technologies together. For example, browser based VR experiences + physical hardware sensors and devices, inter-application communication, chat servers, connected magic mirror and mobile devices, and more. Building smart, connected and distributed devices (IoT) Connected VR Experiences (Node.js + Express + Unity) WebVR Experiences (A-Frame + Node.js + Express) Connected Drawing Application (P5.js + Node.js + Express) Connected Digital-Physical Experiences (Physical (Hardware + Sensors) + Digital and Immersive (A-Frame or Unity)) Robots! Drones ( Skycatch / Drones, Data and Node.js: A Skycatch Story )! Static Site Generators","title":"Week 6: Node.js"},{"location":"fall-2018/#project-2-build-an-ipsum-generator","text":"Using this tutorial as a starting point, build your very own \" Lorem Ipsum \" Generator application using Node.js and Express. Implementation: Choose a subject matter that interests you as a basis for your generator. It can be as practical or eccentric as you like. Your work should include and extend the main functionality covered in tutorial in some way. For example, you might choose to focus on implementing a responsive layout using media queries, adding to the form element and writing some JavaScript to process the combination of new options, or explore interactivity through event listeners with or without helper libraries. Establish basic visual styles that support the concept. Explore typefaces, color palettes, layouts, and images. Explore creative ways of styling the form and generated text. You may choose to make the site responsive using CSS media queries to deliver an exceptional user experience across mobile and desktop devices. Attempt to use front-end Javascript using jQuery or jQuery UI to manage interactive and dynamic elements. You may also use a CSS library such as Animate.css , Hover.css , or similar JS libraries such as Anime.js , Bounce.js , or Animsition to help integrate animations and transitions of elements or pages if your concept requires it. Inspect other types of Ipsum generators to see how they work. What features, beyond choosing # paragraphs to generate, do you notice? Here are a few examples: Samuel L Jackson Lorem Ipsum , Khaled Ipsum , Harder Better Faster Ipsum , Gangsta Lorem ipsum , Wikipsum , HTML-ipsum , JS Ipsum , and many more . Explore other form elements such as checkboxes and drop down input elements as options for customizing the text that gets generated. Hint: Look at the Samuel L Jackson Lorem Ipsum generator and see whats added when toggling on/off the options. Notice that as you are working with strings of text, it's possible to include other types of strings of text that happen to also be html tags. Is a lorem ipsum generator limited to generating only text? I think not! ( Hint: Check out Lorem Picsum ). What else could you think to do with this kind of tool? Your application should reside in a dedicated Github repository that can be cloned by anyone. Inspect the file and folder structure found in shia-ipsum as an example. Be sure to include a README.md with instructions about how to run your application given a basic understanding of the Terminal, Node.js, and npm. Also, be sure to inspect the .gitignore file. The purpose of this file is to tell git which files or folders to ignore in a project. You want to be sure to add the node_modules folder to this ignore file. You never want to commit the node_modules folder to a repo since it contains all the source files for any modules you are using in a project, which can cause the repo to be extremely large. Github has issues with very large repos and will let you know if you are above their limit or just disable your Github account. A .DS_Store file is another unnecessary file to commit to a repo. Not as critical but not needed for anything. Optional: It's not required but if you are interested in deploying a Node.js application on a server for other people to access with a dedicated domain, you can read more about how to do this in Application Deployment section of Learning Node.js . This is a more advanced workflow so be prepared to spend some time with it. Once you go through it however you should have a much better understanding of how servers are setup and how they work. Deliverables: A 2-3 min video screen capture demonstrating your project in action. It can be running locally to demonstrate or you can deploy it to a host like Heroku or Digital Ocean and provide the URL. Embed the video using either Youtube or Vimeo in your blog post. Create a Github repo for the project so others can clone it and try it out on their systems. Include a link to your Github repo in your blog post. A writeup on your blog about your learning experience and creative process. What hurdles did you encounter and how did you overcome them? What worked and what didn't? What new tools or techniques (ie. commenting code) did you try or practice? Share the URL to your post on slack #cmstudio. CM1 [Tues]: Due by 11:59pm Oct 9 CM2 [Wed]: Due by 11:59pm Oct 10 References Shiffman Tutorial: Server-side Programming and Node - This is a great intro and review in most of these topics (Node, Express, npm). HTML Form Elements RESTful API CRUD Express.js Documentation 11 JavaScript Animation Libraries For 2018 Node.js URL Module: URL Strings and URL Objects - This has a great diagram showing the URL structure and how to parse it using the Node.js API. This matters for routing a request to the correct destination in your Node server (app). gitignore file generator - Useful tool for creating .gitignore files.","title":"Project 2: Build an Ipsum Generator"},{"location":"fall-2018/#phase-3-from-cad-to-cam","text":"Source: 7 Days, 700 Pens: Parametric Design for Customized Conference Swag by Formlabs","title":"Phase 3: From CAD to CAM"},{"location":"fall-2018/#week-7-intro-to-cad-fusion-360","text":"Oct 9 / Oct 10 Project 2 Review / Critique Submit deliverables by 11:59 pm on #cmstudio in Slack Intro to CAD and Modeling Overview A short history of sketching and blueprints. What happened before computers? Vintage Photos: Life Before AutoCAD What is CAD and why do we use it to make things? What kinds of things are possible with CAD? ( Hint: Look around. What do you see? Almost everything in our human built environment is made using an industrialized CAD/CAM process. ) CAD vs CAM (We're working towards this in Phase 4 ) CAD = Computer-Aided Design (Input: Idea for 3D model; Output: 3D model and instructions for CAM.) CAM = Computer-Aided Manufacturing (Input: Toolpath file / instructions; Output: Physical Object) Types of CAD 2D - Adobe Illustrator, Photoshop, etc 3D - Fusion 360, Autocad, Inventor, Solidworks, Rhino, etc Direct vs Parametric What\u2019s the Difference Between Parametric and Direct Modeling? So what makes a model \"parametric\"? With a parametric model you have the ability manipulate it's geometry with any number of dimensional parameters (ie. Width, Height, Length, etc). Rhino vs Fusion 360 Whats the difference between these tools? The Workflow and Feature Set. Some related topics that result in a 3D model (Mesh): 3D Scanning Photogrammetry Data Driven Constructive Solid Geometry fMRI, CT (Medical Imaging) Confocal, etc (Biological Imaging) Fusion 360 Workshop Download & Install Fusion 360 Students Download - Free for students. Make an Autodesk account and install. Fusion will be automatically placed in the macOS dock as a shortcut after install. The Basics The Interface Workspaces, Tools, Navigation, Movement, Projects Model Hierarchy (Browser) Timeline (Model History) How to Use the Timeline Master the Timeline, Browser, & Preferences Making Sketches Defining Constraints A Guide to Fusion 360 Sketch Constraints - A great set of videos for each constraint type. A List of Constraint Types Dimensioning a Sketch Fully Defining a Sketch Pro Tip: Anything \"Blue\" is not dimensioned which means it can be moved around. Anything \"Black\" is dimensioned which mean is has a size. Once the whole sketch is Black it is \"Fully Dimensioned.\" This means it's \"locked\" into place. From 2D Sketch to 3D Model Extruding Sketches (Create > Extrude) Sketches vs Bodies vs Components vs Assemblies Quick Tip: Bodies vs Components About bodies and components What is the difference between a Sketch, Body & Component? Understanding Assemblies Exporting 3D Models Whats a mesh? ( Think Minecraft or Low poly art. ) 3D meshes are defined using the STL file format. Mesh Refinement (Higher Quality = More Triangles). Example: Stanford Bunny Example: Viewing Meshes in Meshlab A Step Further Making Mechanical Drawings (2D) (aka Making 2D blueprints) File > New Drawing From Design How to Create a Drawing From Your Design (Video) Defining a Parametric Model User Parameters (\"Sigma\" Icon) Change Parameters Dialog Box Equations and Parameters in Dimensions","title":"Week 7: Intro to CAD / Fusion 360"},{"location":"fall-2018/#assignment-5-parametric-modeling","text":"Generate a parametric 3D model using Fusion 360. Choose one of the possible directions below. Perhaps your final project concept will require a digital (rendered) or physical (fabricated) 3D model -- identity design parameters that meet your project requirements and goals and proceed to create one or more models. Possibilities: Envision and define an original 3D model. Reverse engineer (analyze, deconstruct, and interpret) an existing 3D form and create a model based on your analysis. Locate an example (walkthrough, tutorial, etc) of a 3D model that you wish to create and follow it with modifications for your use case. Deliverables: A 1-2 min video screen capture showing your model in Fusion 360. Feel free to talk (in your video) about the model itself, inspirational findings, the process you went through, the tools you explored along the way, and the challenges you encountered. A blog post documenting your experience and explorations (You many also document your experiences in your video and embed the video in your post). Include in your writeup any of the above items, hurdles you encountered and how you overcame them? What worked and what didn't? What new tools did you try? Embed your video into your blog post. Export a mesh (STL File) of your model and upload it to Sketchfab (You will need to make an account). Once uploaded to Sketchfab, embed your uploaded model into your blog post. Here's a tutorial about how to do this . This is basically the same as embedding a Youtube video into a blog post, but with a 3D viewer window containing your model, which you can manipulate and even visualize in VR! Cool eh!? ( Wonder what JS libraries they are using to make this possible? ) Share the URL to your post on slack #cmstudio. CM1 [Tues]: Due Oct 16 CM2 [Wed]: Due Oct 17 Resources Fusion 360 Gallery Fusion 360 Manual Learn Fusion 360 in 60 Mins Fusion 360 Design Academy Fusion 360 Adoption Portal Fusion 360 Forum - Need help? Check here. Tutorials Arduino UNO Enclosure Tutorial ( Arduino UNO Model , Arduino Drawing ), Shorter version Parameter Driven Project Enclosure Bookshelf Tutorial - Watch to get a good walkthrough of sketching basics. Making Parametric Models in Fusion 360 Easy Snap Fit Cases Udemy: Product Design in Autodesk Fusion 360 from idea to prototype Thingiverse - A giant repository of 3D models and projects.","title":"Assignment 5: Parametric Modeling"},{"location":"fall-2018/#week-8-parametric-design-with-rhino","text":"Oct 16 / Oct 17 CM Work Session - Friday, Oct 19 9am - 12pm. I'll be at the studio for anyone that needs extra help on assignments and projects. Fusion 360: What did you make? Rhino Overview What is Rhino? Rhino is a CAD tool for designers and architects. It's considered one of the standard 3d modeling tools for product designers across many different industries. Rhino Download for macOS - Free for 90 days. Edu License available for ~$90 @ CU Bookstore. Rhinoceros will be in your Applications folder after install. What is Grasshopper ? Grasshopper is a plugin for Rhino. It's now included with Rhino for macOS when you install. You access it by typing Grasshopper into the command interface in Rhino. We will explore this tool next week. Differences between Rhino for Windows vs Rhino for macOS Rhino for Windows is much older than Rhino for macOS and therefore contains a bit more functionality. Rhino 5 for Windows commands not in Rhino 5 for Mac Grasshopper is included with macOS v5 and Windows v6, but not Windows v5. What kinds of things are possible with Rhino + Grasshopper? Why use them? There are many design oriented or industry specific reasons but one BIG reason to use the tool is for its extendability through plugins (food4Rhino) for both Rhino and Grasshopper. Plugins such as Grasshopper open the floodgates for exploring parametric design and generative design . Parametric design is a process based on algorithmic thinking that enables the expression of parameters and rules that, together, define, encode and clarify the relationship between design intent and design response. ( Source: Wikipedia ), Google Search What types of objects can be considered \"parametric\"? Anything really! Just a few examples: Cups, Vases, Pitchers, Bottles, Bells, Bowls, Clothing, Furniture, Lighting, Buildings!... and more! Parametric Design Examples Co-de-iT Zha Code Edu Designmorphine Opendesk Formlabs Digital Factory Pens New Balance 3D Printed Shoe Nervous System Kinematics Dress Razor Maker by Gillette / Gillette Uses 3D Printing to Unlock Consumer Personalization Intro to Rhino (Workshop) Objective: Become familiar with the Rhino interface and workflow in order to create 3d models. Interface Basics Understanding the User Interface Viewports (Top, Left, Right, Perspective) Coordinates (X, Y, Z). X = Red, Y = Green, Z = Blue Windows (Multiple Windows Open == Multiple Files Open) Render Modes (Wireframe, Ghosted, etc) Toolbars (macOS) Left Sidebar - Command Line, Osnaps Right Sidebar - Layers Buttons = Commands. Almost all buttons are tied to a command you can type in. Menus / Sub-Menus (Little triangle on a button) The Command Line - Just type something...anything. See what happens! ESC to exit command. Repeat last command with Right Mouse Button > Repeat Command. Movement (Zoom (Two-finger pinch), ZS , Pan (Right mouse click), Orbit, Gumball) macOS Tip: Turn off two-finger mouse zooming (but allow pinch zooming) by unchecking \"Enable magic mouse gestures\" under Rhino > Preferences > Mouse > Magic Mouse. Hiding / Showing objects (Light Bulb on Layers; Hide / Show Commands) Units - Changing Units, Grid (File > Settings > Units) The Grid (File > Settings > Grid to change), Osnaps (Snapping options on bottom half of left sidebar) Working with Layers (Right Sidebar) Layer Name Colors (RGB) Hide/ Show(Light Bulb) Active Layer (Radio Button) - This determines where you are creating new geometry. Other Panels - Object Properties, Display Properties, etc Geometry Basics Drawing Geometry 2D Geometry - Curves, Surfaces, Polycurves, Text 3D Geometry - Surfaces, Polysurfaces, Solids Isocurves - \"Hidden\" curves located on / making up surfaces. Object Details (Selection) - See information about a selected object in the lower right sidebar. NURBS (Non-uniform rational B-spline) vs Mesh Turn On/Off points on curve with PointsOn and PointsOff or F10 key. Transform Commands Copy Move Scale Rotate Manipulate Geometry Explode , Join Join vs Group Trim Selection - SelCrv , SelSrf , SelPts Loft Pipe File Input / Output File types: 3DM, STL, OBJ, EPS, DXF How should you export a file for fabrication using 3d printing / milling, etc? Additional Commands There are many commands available in Rhino. Above and below are just a few of the most used commands. Check out the Rhino 5 Command List and Rhino 5 for Windows commands not in Rhino 5 for Mac to learn more. PictureFrame Contour MeshtoNURB Distance Dim Boolean commands Hide / Show Offset DupBorder ExtractWireframe Text TextObject SelDup ExtrudeSrf Generator or \"Factory\" Example Produce variations of a 3d model from a \"generator\" or \"factory\". This means to work iteratively to explore a form making process. This process takes advantage of the History command to associate recorded parameters to each other, which is a characteristic of Parametric Modeling as done naturally in Fusion 360 and further enabled through Grasshopper. Examples: cm-design Parametric Loft Generator Parametric Revolve Generator","title":"Week 8: Parametric Design with Rhino"},{"location":"fall-2018/#assignment-6-form-finding","text":"Explore form finding through the iterative \"factory\" or \"generator\" approach discussed in class. Work iteratively to generate at least 10 variations of a form which you may then render any way you wish. Meaning, you may save STL files out and place them into a Sketchfab viewer, or render using a dedicated render solution such as Keyshot , Octane Render , Fusion 360's render workspace , or save screen shots from Rhino (Use the ScreenCaptureToFile command to save screen shots from the viewport). Perhaps your final project concept will require digital (rendered) or physical (fabricated) 3D models -- use form finding as a tool to identity interesting forms and shapes that meet your project requirements and goals and proceed to create one or more models. Deliverables: A 1-2 min video screen capture showing your form finding explorations in Rhino. Feel free to talk (in your video) about the model itself, inspirational findings, the process you went through, the tools/commands you explored along the way, and the challenges you encountered. A blog post documenting your experience and explorations (You many also document your experiences in your video and embed the video in your post). Include in your writeup any of the above items, hurdles you encountered and how you overcame them? What worked and what didn't? What new tools did you try? Embed your video into your blog post. Export meshes (STL File) of your model and render them using a dedicated render solution or upload it to Sketchfab and embed your uploaded model(s) into your blog post. Look at the previous assignment for tutorial about how to do this. Share the URL to your post on slack #cmstudio. CM1 [Tues]: Due Oct 23 CM2 [Wed]: Due Oct 24 Resources Parametric Design: a Brief History Rhino Rhino Tutorials food4Rhino - A large repository of plugins available for Rhino and Grasshopper. Most are free and/or open-source. Think Parametric: Rhino 101 - Fundamentals of 3D Modeling Plethora Project: Rhino Tutorials Lynda.com Rhino 5 Essential Training Form Finding Inspiration LaN: 3D Tiles LaN: Folded LaN: CNC Mill Interiors LaN: Triangulation LaN: 3D Space Shape Rendering Tools Keyshot Octane Render Fusion 360's render workspace Pasta by Design","title":"Assignment 6: Form Finding"},{"location":"fall-2018/#week-9-intro-to-grasshopper-rendering","text":"Oct 23 / Oct 24 CM Work Session - Friday, Nov 9 9am - 12pm. I'll be at the studio for anyone that needs extra help on assignments and projects. Rhino: What did you make? Intro to Grasshopper (Workshop) Grasshopper is a plugin for Rhino. It's now included with Rhino for macOS when you install. You access it by typing Grasshopper into the command interface in Rhino. It will open another window that overlays the Rhino window. Just position Rhino on half of your screen and Grasshopper on the other half. Google Search: Rhino Grasshopper Interface Basics Setting Units (in Rhino) Arranging windows / Hide show Grasshopper Dual monitor is ideal setup to see both Rhino and Grasshopper The Canvas (where you drop components) Double click to type in name of a component you want to add Space bar to access quick commands like preview, bake, and preferences Recent commands bar (on bottom left) Tool Bars & Component Groups (Tabs) Primitives Math Set Vec Curve Surface Mesh Intersect Transform Display Working with components Drag and drop components into the canvas Selecting components Tooltips Connecting / Disconnecting components Aligning components Messages (Orange and red bubbles on component) Grouping components Working with geometry Assigning Rhino geometry to Grasshopper components Creating Grasshopper based geometry and visualizing it in Rhino Baking geometry (Geometry in Grasshopper -> Rhino) Points, Lines, Planes, Volumes Examples: Contouring, Lofting, Vase Builder Rendering with Keyshot Keyshot is an entry level rendering tool. It features drag and drop material, color, lighting, environments, and more. Download the 14 day trial to start experimenting. Go through the Keyshot Tutorials to get a basic understanding of the tool and how to use it. Basic Process: Export a 3D model file from CAD (Rhino 3dm, STL, etc) Import into Keyshot Compose the scene Assign materials, lighting, environment, etc Save a screenshot. Depending on how powerful your computer is, you will have to wait longer for better screenshot renders. Tips: The demo doesn't let you save the project file. Save lots of screenshots! Use the \"screenshot\" feature to save decent looking images from the viewport. It saves them into Library/Application Support/Keyshot8/Renderings/ To increase resolution of a screenshot make your window full screen and use the \"Reitna Mode\" feature. Your computer may slow down a bit more doing this but it will give you a higher resolution image in the end. Don't bother with the Render mode since it puts Keyshot watermarks all over the image. The screenshot tool only places a small mark in the bottom left corner (easily removable via Photoshop). Digital Object Workflows Rhino --> Meshmixer --> Keyshot etc...","title":"Week 9: Intro to Grasshopper / Rendering"},{"location":"fall-2018/#project-3-building-digital-objects","text":"Create a project that makes use of any of the CAD tools explored this phase (Fusion 360, Rhino, Grasshopper) and/or any other CAD tools (Blender, Maya, Sketchup, Meshmixer, Meshlab, etc) that enable the creation and manipulation of 3D digital objects and explore a rendering solution to produce multiple high fidelity representations of your concept. Tip: I encourage you to think about all CAD tools as a part of a larger digital modeling workflow. Most of time time there is not one tool that does everything you want or imagine possible. You might have to enlist different tools in combination to accomplish a task. For example, generate geometry in Rhino, manipulate meshes in Meshmixer, render in Keyshot. Possible project directions Advancing your final project concept. Iterate on a previously explored concept. Form finding explorations and application. Choose an existing product or design to analyze and deconstruct its systems of logic. Then proceed to construct a version of it using CAD. Remixing or mash-ups of existing designs and parametric techniques. Developing a learning pathway (one or more tutorials or a workflow of your own) to share publicly. Develop one or more models that could be 3d printed or digitally fabricated. Something else? Think about the following questions to help you define your project scope. What is the purpose / goal of your project? What kind of problem does your design solve? Where can you apply CAD in the process? Where can you apply rendering in the process? (ex. Showing product design to client) What designs, shapes, and/or forms inspire you? What might you want to 3D print or make a physical version of? Deliverables: Documentation including a project writeup, sketches, screenshots, and 2-3 min video walkthrough of your process. Describe in your video and in your writeup, the project motivation, objectives, tools used, challenges encountered, and possible next steps if and/or when you are to go a step further. Embed your video into your blog post. Render multiple instances (at least 4 images) of your project and include them in your blog post. How do you envision your digital objects? What kind of materiality might they have if you made them in reality? What kind of physical setting do you imagine them in? Explore ways of visualizing and communicating your concepts. As with the previous assignments, use Sketchfab to embed one or more 3d visualizations into your blog post. In addition, explore a rendering solution such as Keyshot or Fusion 360's render workspace to begin creating higher fidelity representations of your concepts. This is a great article on 25 of the best rendering tools of 2018 . I recommend using Keyshot since it has a free trial and produces decent renders by using the \"Screen shot\" feature. You are free to use any rendering solution you find interesting. Make sure to give credit to any related projects, code, websites, articles, images, videos, or other source materials used by including them in your project writeup. Share the URL to your post on slack #cmstudio. CM1 [Tues]: Due by 11:59pm Oct 30 CM2 [Wed]: Due by 11:59pm Oct 31 Resources Grasshopper Website Grasshopper Primer - A great entry point to Grasshopper. Visual Programming in Rhino3D with Grasshopper / Amazon Think Parametric: Grasshopper 101 - Introduction to Parametric Modeling food4Rhino - A large repository of plugins available for Rhino and Grasshopper. Most are free and/or open-source. Grasshopper Plugins Bifocals - This is a great plugin for seeing what a component is called within a definition. Everything is a Remix 25 Best 3D Rendering Software Tools of 2018 (Some are Free) Keyshot Tutorials","title":"Project 3: Building Digital Objects"},{"location":"fall-2018/#phase-4-digital-fabrication","text":"Source: Eggs (2013), Studio Courses by Andrew Kudless, California College of the Arts, S.F., and Bond University, Gold Coast, Australia by Matsys","title":"Phase 4: Digital Fabrication"},{"location":"fall-2018/#week-10-intro-to-digital-fabrication-3d-printing","text":"Oct 30 / Oct 31 CM Work Session (Next Week) - Friday, Nov 9 9am - 12pm. I'll be at the studio for anyone that needs extra help on assignments and projects. Project 3 Presentations - We will take some time for everyone to share their Project 3 and get feedback. What is Digital Fabrication? Digital fabrication is a type of manufacturing process where the machine used is controlled by a computer. The most common forms of digital fabrication are CNC Machining, Laser Cutting, and 3D Printing. ( Source: Open Desk ), Google Search , Digital Fabrication Pintrest Board by Naz\u0131m Da\u011fdeviren Overview of CAM Computer-aided machining (CAM) is an application technology that uses computer software and machinery to facilitate and automate manufacturing processes. CAM is the successor of computer-aided engineering (CAE) and is often used in tandem with computer-aided design (CAD). ( Source: Wikipedia ) Computer numerical control (CNC) is the automation of machine tools by means of computers executing pre-programmed sequences of machine control commands. This is in contrast to machines that are manually controlled by hand wheels or levers, or mechanically automated by cams alone. ( Source: Wikipedia ) Understanding Toolpaths What is a toolpath? What is GCODE ? Economies of Time and Tooling Which fabrication process do I choose? Is this the right process to produce my model? Does the time and tooling required make sense to accomplish my goal? Low to high resolution prototypes Considering material and application Basic process to prepare files for fabrication Create your design as 2D curves or 3D model using CAD package (Rhino, Fusion 360, etc). Generate toolpaths using CAM software. (For example, Cura is a \"Slicer\" which is a type of CAM software, Fusion has CAM tools built in, and RhinoCAM is a CAM package/plugin for Rhino.) . The input to the CAM software will be based on the fabrication process. The toolpaths saved out of a CAM package are always a machine code file (ie. GCODE or a variation of it). Run the GCODE file using a controller/software for the fabrication process. (For example, the Ultimaker's controller is on the machine itself. You just tell it which GCODE file to read from the USB drive. This is similar to a laser cutter with a built in controller and memory. In the case of a vinyl cutter, CNC router, or CNC milling machine, the controller is commonly a computer connected to the machine sending chunks of data as the file is read. In the case of the Bantam Mill, we use their tool known as Bantam Tools.) CAD to CAM Workflows Working with 2D curves - Illustrator, Rhino, Fusion 360 2D file types - EPS , AI , DXF , SVG , PDF (Note: These are all Vector based graphics vs Raster based graphics. Photos in JPG and PNG file formats are examples of raster based graphics and are commonly used for laser engraving.) Examples - Stickers (Vinyl), Cut & Fold (Laser), Cut/Engrave (Mill) Working with 3D geometry (meshes, etc) - Fusion 360 3D file types - STL (most common) Examples - Cut (Mill), 3D to 2D Contouring/Slicing (Laser) 3D Printing (Workshop) Additive Manufacturing Technologies (Image) Source: 3D Hubs Types of 3D Printing FDM (Fuse Deposition Modeling) / Filament Based - Ultimaker , Lulzbot , Makerbot , Markforged , Wasp SLA (Stereolithography) / Resin Based - Formlabs Form 2 , Ono SLS (Selective Laser Sintering) / Powder Based - Shapeways , Formlabs Fuse 1 Polyjet (Material Jetting) / Resin Based - Stratasys (Multi-material) Slicing Slicing tools convert a 3D mesh (STL) into GCODE (aka a list of commands to run the printer) Cura is what we use for the Ultimaker. Cura Manual Slicing Process Load STL file into Cura Choose PLA material for Extruder 1 and PVA for Extruder 2 (If using support material) Choose a print profile (aka Layer Height: Start with Fast or Normal options) Choose an infill (Density) Save GCODE file and copy to blue USB drive Materials We currently have limited supplies. I recommend purchasing a roll of PLA (and PVA if you need it) from Gizmodorks or Amazon. FDM Materials Overview PLA from Gizmodorks and ABS are the most common. Other materials: Nylon, HIPS, TPU. PVA from Gizmodorks is used as support structure material for building complex parts. Meshes STL File Format for 3D Printing / STL (file format) Tools for working with meshes Meshlab - Good for viewing meshes. Meshmixer - Good for manipulating meshes in preparation for printing. Netfabb - Good for looking at STL dimensions and repairing meshes before importing to Cura. Pleasant3D (MacOS) - Utility for quick viewing/resizing of STL files. MacOS only. 3D Printing Services -","title":"Week 10: Intro to Digital Fabrication / 3D Printing"},{"location":"fall-2018/#assignment-7-bits-to-atoms","text":"Create / remix / mashup a product design concept and 3D print it . Use the opportunity to advance your skills in designing for 3D printing in any of the following areas: new forms, objects from from finding explorations, complex geometry, multipart assemblies, tolerances, designing with fasteners (screws, etc), designing objects that snap fit, flexible materials such as TPU, print quality and resolution for a given application, embedding electronics such as sensors and LEDs, low to high resolution prototyping, or anything challenging your understanding of printing, materials, or form printability. Tips: Explore some of the resources listed for 3D printing. Look through the design guides below and seek out additional resources to aid your design process. As with most ideas turned into CAD models, I suggest start by hand sketching your ideas out. Think about the problem you wish to solve or the questions you have around whats possible with this tool / medium / material. Think about the forms you want to model, the parts you want to use in an assembly, the mechanical movements you wish to explore, etc. Don't let the tools or process get in the way of you producing an instance of your idea. Start simple and make many iterations until you get to something that communicates your intent. Pay special attention to your print times and plan jobs accordingly. Since others will be trying to print something over the week, this may mean staying late to \"manage\" the print job or working together via slack to manage a \"print queue\". Meaning, work together to establish a schedule for print jobs. Deliverables: Documentation including a project writeup, printing photos/video, photos of the 3d printed object(s), and a 2-3 min video walkthrough of your design process and final results. You may show the steps of the process in your video . Describe the project motivation, objectives, challenges encountered, and possible next steps if and/or when you are to go a step further. What problem you were trying to solve? What tools did you choose to work with? What part of the printing process did you find most interesting and the most challenging? If you chose to make progress on you final project, which milestones did you hit and whats next? Be sure to credit any tutorials, videos, images, blog posts, etc that you use. Embed your video into your blog post. Physical model(s). Place all models produced on the black shop table. Label your model with a title and your name. Share the URL to your post on slack #cmstudio. CM1 [Tues]: Due Nov 6 CM2 [Wed]: Due Nov 7 Resources Additive Manufacturing Technologies: An Overview Design Guides - Think of these are useful resources regardless of the printing process. What is the best type of plastic for my 3D printing application? How to Design Snap Fit Components How to Choose the Best Fasteners for 3D Printed Parts Shapeways: Modeling & Design Tips 3D Printing Tutorials Simplify3D: Print Quality Troubleshooting Guide Repairing 3D Files With Meshmixer and Netfabb Adding Screw Threads i.materialise Design Guide 5 Mistakes to Avoid When Designing a 3D Model for 3D Printing Key design considerations for 3D Printing Enclosure design for 3D Printing: A step-by-step guide Formlabs Tutorials - Good design references even though we don't have a Formlabs SLA printer. Meshmixer Support Generation with Meshmixer How to create custom overhang supports in meshmixer Post Processing Ultimate Guide to Finishing 3D Printed Parts Post processing for FDM printed parts How to spray paint 3d models XTC-3D Epoxy Projects / Inspiration Thingiverse Microscape - 3D printed cityscapes Paper: Thingi10K: A Dataset of 10,000 3D-Printing Models , Website More Resources Print the Legend ( Netflix ) Udemy: Designing for 3D Printing with Fusion 360 Thingiverse \"Full Printed\" by nueveojos (Length: 4:45) Visualizing Mathematics with 3D Printing by Henry Segerman","title":"Assignment 7: Bits to Atoms"},{"location":"fall-2018/#week-11-digital-fabrication-methods","text":"Nov 6 / Nov 7 CM Work Session - Friday, Nov 9 9am - 12pm. I'll be at the studio for anyone that needs extra help on assignments and projects. Topics Contouring 3D shapes to make 2D slices (Slicing 3D shape into stackable parts) Triangulate a 3D object (aka make it faceted. ie. Blue Bear, Stanford Bunny) Waffle (aka make slotted 2D slices from a 3d model) Unrolling 3D geometry to make 2D curves (ex. Platonics, shapes with Tabs) Working with meshes Importing / Exporting in Fusion and Rhino Import mesh and make NURBS (mesh data from Thingiverse or 3D Scanning) Working with 3D scanner data (scanning, cleaning, processing) Export meshes for 3D printing (checking geometry)","title":"Week 11: Digital Fabrication Methods"},{"location":"fall-2018/#assignment-8-realizing-digital-objects","text":"Explore one or more digital fabrication methods (contouring, triangulation, waffle, unrolling geometry, or some combination of these) and produce a physical instance of it. For example, you might have a 3d model that you would like to produce at large scale. Larger than might be possible in a single 3d print within a reasonable amount of time. What method would you use to produce your model? What if the model were triangulated? Or contoured? What material would you choose? What steps need to be taken in the digital domain to translate into components that can be produced and assembled physically? Deliverables: Documentation including a project writeup, build photos/video, photos of physical object(s) produced, and a 2-3 min video walkthrough of your design process and final results. You may show the steps of the process in your video . Describe the project motivation, objectives, challenges encountered, and possible next steps if and/or when you are to go a step further. What problem you were trying to solve? What tools did you choose to work with? What part of the process did you find most interesting and the most challenging? If you chose to make progress on you final project, which milestones did you hit and whats next? Be sure to credit any tutorials, videos, images, blog posts, etc that you use. Embed your video into your blog post. Physical model(s). Place all models produced on the black shop table. Label your model with a title and your name. Share the URL to your post on slack #cmstudio. CM1 [Tues]: Due Nov 13 CM2 [Wed]: Due Nov 14 Resources Platonic Solids Rhinopolyhedra (Rhino Plugin, Windows Only) Unrolling YouTube: Unroll Surface in Rhino 4: Tricks for managing compound curves YouTube: Rhino 3D CAD Technique #12: Difference between Unroll, Smash and Create UV Curve commands Origami Simulator Pepakura Contouring Strata Bench by ADintheStudio Slicer Tool (Fusion 360 Plugin) Triangulation (Faceted) YouTube: Grasshopper 003 triangular Surface \"I See What You Mean\" aka Denver \"Blue Bear\" by Lawrence Argent Waffle YoutTube: grasshopper tutorial # waffle structure ribs part 1 YoutTube: grasshopper tutorial # waffle structure (ribs) laser cut file part 2 Sectioning design systems by HASSAN RAGAB YouTube: Waffle structure - Grasshopper Tutorial YouTube: Grasshopper 006 waffle structure beams concept & fabrication - Put this on MUTE!","title":"Assignment 8: Realizing Digital Objects"},{"location":"fall-2018/#week-12-open-studio","text":"Nov 13 / Nov 14 Potential Topics Fusion 360 CAM Bantam Mill (Workshop) Arduino and Raspberry Pi Rhino / Grasshopper (Workshop)","title":"Week 12: Open Studio"},{"location":"fall-2018/#final-project-proposal","text":"Submit a revised or updated final project proposal anytime before Friday Nov 16th (The Friday before Thanksgiving Break). The earlier the better so you have time to ask questions, order any supplies you may need, etc. Deliverable: A new or updated final project proposal posted to your blog. It should include the following: Project Title Project Summary ~ 1 page max (ie What is it? What problem(s) are you solving? What will it do? How will it work?) Key components of your project (ie. Resources, skills, and technology needed to realize it ~ Materials, CAD, 3d Printing, Bantam Mill, Processing, Arduino, Shapeways, etc) Milestones you have hit thus far and what you plan to do in order to realize it in the weeks following Thanksgiving break. If you need to order some parts, what do you need? What questions do you have? Where do you feel you are lacking in skill and need assistance? Share the URL to your post on slack #cmstudio.","title":"Final Project Proposal"},{"location":"fall-2018/#thanksgiving-break-no-class","text":"","title":"Thanksgiving Break (No Class)"},{"location":"fall-2018/#phase-5-final-project","text":"","title":"Phase 5: Final Project"},{"location":"fall-2018/#week-13-open-studio","text":"Nov 27 / Nov 28 Final CM Work Session - Friday, Nov 30, 9am - 12pm. I'll be at the studio for anyone that needs extra help on assignments and projects. Open Studio Project Checkins","title":"Week 13: Open Studio"},{"location":"fall-2018/#week-14-open-studio","text":"Dec 4 / Dec 5 IMPORTANT: Please complete the course evals (FCQ's) for CM1 or CM 2 by going to colorado.campuslabs.com/courseeval . You will need to authenticate using your campus user ID. The course eval period is from Dec 3 to Dec 10. Open Studio Project Checkins","title":"Week 14: Open Studio"},{"location":"fall-2018/#week-15-final-project-presentations","text":"Dec 11 / Dec 12 CM Studio: Final Project Showcase - Wednesday December 12, 2018 To wrap up the fall semester in CM Studio 1 & 2 we have two events coming up. Both events are free and open to the public. 1301 Walnut St. Boulder, CO Join us for the CM Studio: Final Project Showcase at 4:30pm doors / 5pm presentations, Wed, Dec 12. Students will present their final projects. I AM WHAT I WISH, an interactive art installation that explores the power and influence of wishes through physical and digital representations. Wed, Dec 12th from 6 - 8 PM. Students: Jonas Escobedo, Allison Spiegel, and Makenna Considine Last Day of Classes - December 13, 2018 - All projects (P1, P2, P3, Final) need to be turned in by this time to receive credit.","title":"Week 15: Final Project Presentations"},{"location":"fall-2018/#final-project-deliverables","text":"Prepare and deliver a 8-10 min presentation at the showcase. Assume the audience knows nothing about your work or what you have made. What problem did you set out to solve? What is your project all about? How did you accomplish your goals? What resources did you make use of? What challenges did you encounter and how did you overcome them? What worked? What didn't? If this is a part of a larger long-term project, what milestones did you hit? What's next for this project? (Future Work) What are your major takeaways? What did you learn / discover? A blog post summarizing your project and development process. Include any images, video, and code in the writeup. Be sure to include links to past blog posts and any resources used in the process.","title":"Final Project Deliverables"},{"location":"handbook/","text":"This handbook covers useful information about studio work spaces, technology, equipment, policies, and procedures. It contains sections on the operation for both the Main Studio and Studio Shop rooms and a section for CU Policies & Procedures . It is recommended that all students and faculty read through this page and refer to it often. Send any questions, comments, or suggestions via email or slack (@rjduran). Note this is a living document and is constantly being updated. Main Studio \u00b6 WIFI \u00b6 High speed WIFI access is available in both studio spaces. The password for access is posted on the wall in each room. Access Points (SSID) Frequency Location STUDIO-2.4 4.2 GHz Main Studio STUDIO-5 5 GHz Main Studio STUDIO-SHOP-1 4.2 GHz Shop STUDIO-SHOP-2 5 GHz Shop Printers \u00b6 To access the paper printer you need to be connected to one of the local wifi access points shown above. The following printers are available for use. Make/Model Type Location Website Brother MCF-L6800DW Black/White Main Studio Support MacOS: Add the printer by going to System Preferences > Printers & Scanners and click the + sign. You should get the option to add the \"Brother MCF-L6800DW\" printer. After doing so you should be able to send jobs to print. File Server \u00b6 The Critical Making Studio has a local network shared folder for transferring large projects between computers. To access it you must be on the STUDIO-2.4 or STUDIO-5 network. Follow the instructions below to connect to the shared folder. Server Use Make sure you keep backups of your projects on your local machines in case the server is ever down or someone deletes a folder. Be aware that once you delete a folder from the server its gone forever. You may make any folders you want or use any of the folders with your name. Local Access \u00b6 On MacOS: Go > Connect to Server (CMD + K) Enter: smb://CMCI_STUDIO/cm_share Click Connect Enter Username and Password when prompted. The shared folder should appear in the Finder. If it doesn\u2019t, go to Go > Network (SHIFT+CMD+K) and you will see the \"CMCI_STUDIO\" server with \"cm_share\" available. On Windows: Open Windows Explorer and choose Tools > Map Network Drive. Choose a drive number from the Drive drop-down menu. Enter: \\\\CMCI_STUDIO\\cm_share Click Finish Enter Username and Password when prompted. The shared folder should appear in the Windows Explorer as a network drive. Remote Access \u00b6 On MacOS: Go > Connect to Server (CMD + K) Enter: https://cmcistudio.synology.me:5006 Click Connect Enter Username and Password when prompted. The shared folder should appear in the Finder. If it doesn\u2019t, go to Go > Network (SHIFT+CMD+K) and you will see the \"cmcistudio.synology.me:5006\" server with \u201ccm_share\u201d available. CM Studio \u00b6 Laptops \u00b6 Usage Policy The Critical Making Studio has Razer Blade (14\") laptops for use with advanced graphics and media applications such as VR, 3d modeling, and programming. The laptops are to remain at the studio at all times. No exceptions. Personal files should be backed up using USB drives and/or a cloud based service such as Dropbox or Google Drive. Do not expect your files to be available on any one laptop the next time you use it. Please report any technical issues to RJ asap. Login The laptops are setup to be identical with following user account and installed software. Account: Student Password: student Software \u00b6 Rhino 5 + Grasshopper Fusion 360 Unity 5.6.4 Unity 2017.2.1 Unity 2017.3.0 Steam SteamVR Maya 2018 Adobe Illustrator Adobe Photoshop Blender Meshmixer Google Chrome Firefox Visual Studio 2017 Community Ultimaker Cura Screencast-O-Matic Notepad++ Meshlab DAZ 3D CU Policies and Procedures \u00b6 Classroom Behavior \u00b6 Students and faculty each have responsibility for maintaining an appropriate learning environment. Those who fail to adhere to such behavioral standards may be subject to discipline. Professional courtesy and sensitivity are especially important with respect to individuals and topics dealing with differences of race, color, culture, religion, creed, politics, veteran\u2019s status, sexual orientation, gender, gender identity and gender expression, age, disability, and nationalities. Class rosters are provided to the instructor with the student's legal name. I will gladly honor your request to address you by an alternate name or gender pronoun. Please advise me of this preference early in the semester so that I may make appropriate changes to my records. See policies at: http://www.colorado.edu/policies/classbehavior.html and at http://www.colorado.edu/studentaffairs/judicialaffairs Disability \u00b6 If you qualify for accommodations because of a disability, please submit to your professor a letter from Disability Services in a timely manner (for exam accommodations provide your letter at least one week prior to the exam) so that your needs can be addressed. Disability Services determines accommodations based on documented disabilities. Contact Disability Services at 303-492-8671 or by e-mail at dsinfo@colorado.edu. If you have a temporary medical condition or injury, see Temporary Medical Conditions: Injuries, Surgeries, and Illnesses guidelines under Quick Links at Disability Services website and discuss your needs with your professor. Religious Observance \u00b6 Campus policy regarding religious observances requires that faculty make every effort to deal reasonably and fairly with all students who, because of religious obligations, have conflicts with scheduled exams, assignments or required attendance. Please notify me as quickly as possible regarding any possible absences so that we can plan your work accordingly. See full details at http://www.colorado.edu/policies/fac_relig.html Discrimination and Harassment \u00b6 The University of Colorado Boulder (CU-Boulder) is committed to maintaining a positive learning, working, and living environment. The University of Colorado does not discriminate on the basis of race, color, national origin, sex, age, disability, creed, religion, sexual orientation, or veteran status in admission and access to, and treatment and employment in, its educational programs and activities. (Regent Law, Article 10, amended 11/8/2001). CU-Boulder will not tolerate acts of discrimination or harassment based upon Protected Classes or related retaliation against or by any employee or student. For purposes of this CU-Boulder policy, \"Protected Classes\" refers to race, color, national origin, sex, pregnancy, age, disability, creed, religion, sexual orientation, gender identity, gender expression, or veteran status. Individuals who believe they have been discriminated against should contact the Office of Discrimination and Harassment (ODH) at 303-492-2127 or the Office of Student Conduct (OSC) at 303-492-5550. Information about the ODH, the above referenced policies, and the campus resources available to assist individuals regarding discrimination or harassment can be obtained at http://hr.colorado.edu/dh/ Honor Code \u00b6 All students of the University of Colorado at Boulder are responsible for knowing and adhering to the academic integrity policy of this institution. Violations of this policy may include: cheating, plagiarism, aid of academic dishonesty, fabrication, lying, bribery, and threatening behavior. All incidents of academic misconduct shall be reported to the Honor Code Council (honor@colorado.edu; 303-735-2273). Students who are found to be in violation of the academic integrity policy will be subject to both academic sanctions from the faculty member and non-academic sanctions (including but not limited to university probation, suspension, or expulsion). Other information on the Honor Code can be found at http://www.colorado.edu/policies/honor.html and at http://honorcode.colorado.edu Athletic Events \u00b6 The Boulder Campus has two separate but similar policies governing conflicts between a student's athletic events and his or her classes and exams. One policy governs students involved in intercollegiate varsity athletic events. The other policy governs students involved in Club Sports events. Each policy is accompanied by a detailed report with guidance on how instructors may deal with conflicts when they arise. Both policies may be viewed in detail on the Boulder Faculty Assembly's website: Policy on conflicts involving Intercollegiate Athletics, http://www.colorado.edu/FacultyGovernance/committees/IAC.html Policy on conflicts involving Club Sports http://www.colorado.edu/FacultyGovernance/committees/studentaffairs.html The two policies are substantially similar, having the following terms in common: That it is the student's responsibility to notify each instructor, in the first week of the semester and in writing, about any known conflicts between academic requirements and athletic events. That instructors have full authority to decide whether and/or how to accommodate those conflicts. While an instructor has the right to refuse to make accommodations, he or she is permitted to provide such accommodations. That coaches are forbidden from initiating contact with instructors regarding schedule conflicts, grades, or academic progress. The Intercollegiate Athletics Office of Academic Support Services and the Recreation Center's Collegiate Club Sports coordinators may contact instructors about certain topics. There is no rule preventing faculty from contacting these support organizations.Policy terms that are specific to intercollegiate varsity events, as opposed to club sports events, include: That intercollegiate varsity athletic events during final exams, which are normally forbidden by university policy, must be approved in writing by the BFA Intercollegiate Athletics Committee well in advance of the event. Students involved in these events must then work with their instructors in regard to any missed work.","title":"Studio Handbook"},{"location":"handbook/#main-studio","text":"","title":"Main Studio"},{"location":"handbook/#wifi","text":"High speed WIFI access is available in both studio spaces. The password for access is posted on the wall in each room. Access Points (SSID) Frequency Location STUDIO-2.4 4.2 GHz Main Studio STUDIO-5 5 GHz Main Studio STUDIO-SHOP-1 4.2 GHz Shop STUDIO-SHOP-2 5 GHz Shop","title":"WIFI"},{"location":"handbook/#printers","text":"To access the paper printer you need to be connected to one of the local wifi access points shown above. The following printers are available for use. Make/Model Type Location Website Brother MCF-L6800DW Black/White Main Studio Support MacOS: Add the printer by going to System Preferences > Printers & Scanners and click the + sign. You should get the option to add the \"Brother MCF-L6800DW\" printer. After doing so you should be able to send jobs to print.","title":"Printers"},{"location":"handbook/#file-server","text":"The Critical Making Studio has a local network shared folder for transferring large projects between computers. To access it you must be on the STUDIO-2.4 or STUDIO-5 network. Follow the instructions below to connect to the shared folder. Server Use Make sure you keep backups of your projects on your local machines in case the server is ever down or someone deletes a folder. Be aware that once you delete a folder from the server its gone forever. You may make any folders you want or use any of the folders with your name.","title":"File Server"},{"location":"handbook/#local-access","text":"On MacOS: Go > Connect to Server (CMD + K) Enter: smb://CMCI_STUDIO/cm_share Click Connect Enter Username and Password when prompted. The shared folder should appear in the Finder. If it doesn\u2019t, go to Go > Network (SHIFT+CMD+K) and you will see the \"CMCI_STUDIO\" server with \"cm_share\" available. On Windows: Open Windows Explorer and choose Tools > Map Network Drive. Choose a drive number from the Drive drop-down menu. Enter: \\\\CMCI_STUDIO\\cm_share Click Finish Enter Username and Password when prompted. The shared folder should appear in the Windows Explorer as a network drive.","title":"Local Access"},{"location":"handbook/#remote-access","text":"On MacOS: Go > Connect to Server (CMD + K) Enter: https://cmcistudio.synology.me:5006 Click Connect Enter Username and Password when prompted. The shared folder should appear in the Finder. If it doesn\u2019t, go to Go > Network (SHIFT+CMD+K) and you will see the \"cmcistudio.synology.me:5006\" server with \u201ccm_share\u201d available.","title":"Remote Access"},{"location":"handbook/#cm-studio","text":"","title":"CM Studio"},{"location":"handbook/#laptops","text":"Usage Policy The Critical Making Studio has Razer Blade (14\") laptops for use with advanced graphics and media applications such as VR, 3d modeling, and programming. The laptops are to remain at the studio at all times. No exceptions. Personal files should be backed up using USB drives and/or a cloud based service such as Dropbox or Google Drive. Do not expect your files to be available on any one laptop the next time you use it. Please report any technical issues to RJ asap. Login The laptops are setup to be identical with following user account and installed software. Account: Student Password: student","title":"Laptops"},{"location":"handbook/#software","text":"Rhino 5 + Grasshopper Fusion 360 Unity 5.6.4 Unity 2017.2.1 Unity 2017.3.0 Steam SteamVR Maya 2018 Adobe Illustrator Adobe Photoshop Blender Meshmixer Google Chrome Firefox Visual Studio 2017 Community Ultimaker Cura Screencast-O-Matic Notepad++ Meshlab DAZ 3D","title":"Software"},{"location":"handbook/#cu-policies-and-procedures","text":"","title":"CU Policies and Procedures"},{"location":"handbook/#classroom-behavior","text":"Students and faculty each have responsibility for maintaining an appropriate learning environment. Those who fail to adhere to such behavioral standards may be subject to discipline. Professional courtesy and sensitivity are especially important with respect to individuals and topics dealing with differences of race, color, culture, religion, creed, politics, veteran\u2019s status, sexual orientation, gender, gender identity and gender expression, age, disability, and nationalities. Class rosters are provided to the instructor with the student's legal name. I will gladly honor your request to address you by an alternate name or gender pronoun. Please advise me of this preference early in the semester so that I may make appropriate changes to my records. See policies at: http://www.colorado.edu/policies/classbehavior.html and at http://www.colorado.edu/studentaffairs/judicialaffairs","title":"Classroom Behavior"},{"location":"handbook/#disability","text":"If you qualify for accommodations because of a disability, please submit to your professor a letter from Disability Services in a timely manner (for exam accommodations provide your letter at least one week prior to the exam) so that your needs can be addressed. Disability Services determines accommodations based on documented disabilities. Contact Disability Services at 303-492-8671 or by e-mail at dsinfo@colorado.edu. If you have a temporary medical condition or injury, see Temporary Medical Conditions: Injuries, Surgeries, and Illnesses guidelines under Quick Links at Disability Services website and discuss your needs with your professor.","title":"Disability"},{"location":"handbook/#religious-observance","text":"Campus policy regarding religious observances requires that faculty make every effort to deal reasonably and fairly with all students who, because of religious obligations, have conflicts with scheduled exams, assignments or required attendance. Please notify me as quickly as possible regarding any possible absences so that we can plan your work accordingly. See full details at http://www.colorado.edu/policies/fac_relig.html","title":"Religious Observance"},{"location":"handbook/#discrimination-and-harassment","text":"The University of Colorado Boulder (CU-Boulder) is committed to maintaining a positive learning, working, and living environment. The University of Colorado does not discriminate on the basis of race, color, national origin, sex, age, disability, creed, religion, sexual orientation, or veteran status in admission and access to, and treatment and employment in, its educational programs and activities. (Regent Law, Article 10, amended 11/8/2001). CU-Boulder will not tolerate acts of discrimination or harassment based upon Protected Classes or related retaliation against or by any employee or student. For purposes of this CU-Boulder policy, \"Protected Classes\" refers to race, color, national origin, sex, pregnancy, age, disability, creed, religion, sexual orientation, gender identity, gender expression, or veteran status. Individuals who believe they have been discriminated against should contact the Office of Discrimination and Harassment (ODH) at 303-492-2127 or the Office of Student Conduct (OSC) at 303-492-5550. Information about the ODH, the above referenced policies, and the campus resources available to assist individuals regarding discrimination or harassment can be obtained at http://hr.colorado.edu/dh/","title":"Discrimination and Harassment"},{"location":"handbook/#honor-code","text":"All students of the University of Colorado at Boulder are responsible for knowing and adhering to the academic integrity policy of this institution. Violations of this policy may include: cheating, plagiarism, aid of academic dishonesty, fabrication, lying, bribery, and threatening behavior. All incidents of academic misconduct shall be reported to the Honor Code Council (honor@colorado.edu; 303-735-2273). Students who are found to be in violation of the academic integrity policy will be subject to both academic sanctions from the faculty member and non-academic sanctions (including but not limited to university probation, suspension, or expulsion). Other information on the Honor Code can be found at http://www.colorado.edu/policies/honor.html and at http://honorcode.colorado.edu","title":"Honor Code"},{"location":"handbook/#athletic-events","text":"The Boulder Campus has two separate but similar policies governing conflicts between a student's athletic events and his or her classes and exams. One policy governs students involved in intercollegiate varsity athletic events. The other policy governs students involved in Club Sports events. Each policy is accompanied by a detailed report with guidance on how instructors may deal with conflicts when they arise. Both policies may be viewed in detail on the Boulder Faculty Assembly's website: Policy on conflicts involving Intercollegiate Athletics, http://www.colorado.edu/FacultyGovernance/committees/IAC.html Policy on conflicts involving Club Sports http://www.colorado.edu/FacultyGovernance/committees/studentaffairs.html The two policies are substantially similar, having the following terms in common: That it is the student's responsibility to notify each instructor, in the first week of the semester and in writing, about any known conflicts between academic requirements and athletic events. That instructors have full authority to decide whether and/or how to accommodate those conflicts. While an instructor has the right to refuse to make accommodations, he or she is permitted to provide such accommodations. That coaches are forbidden from initiating contact with instructors regarding schedule conflicts, grades, or academic progress. The Intercollegiate Athletics Office of Academic Support Services and the Recreation Center's Collegiate Club Sports coordinators may contact instructors about certain topics. There is no rule preventing faculty from contacting these support organizations.Policy terms that are specific to intercollegiate varsity events, as opposed to club sports events, include: That intercollegiate varsity athletic events during final exams, which are normally forbidden by university policy, must be approved in writing by the BFA Intercollegiate Athletics Committee well in advance of the event. Students involved in these events must then work with their instructors in regard to any missed work.","title":"Athletic Events"},{"location":"pm/","text":"Documents \u00b6 Google Docs Etherpad LibreOffice Microsoft Office Firepad Evernote Mac Journal Papier - Browser based note taking Chrome application / extension. Screen Capture \u00b6 Screencast-o-matic , Download Link - Screen capture software for sharing projects, making tutorials, and more. Screenflick How to take a screenshot on your Mac 7 ways to take screenshots in Windows 10 Data Storage \u00b6 Dropbox Box OwnCloud Microsoft OneDrive Google Drive Large File Transfer \u00b6 WeTransfer Drop Send Blogs / Wikis / Content Management Systems (CMS) \u00b6 Tumblr Wordpress , Wordpress.org MediaWiki Cargo Collective Squarespace Wix The Grid Drupal Joomla Statamic FTP \u00b6 Cyberduck FileZilla Transmit WinSCP SmartFTP FireFTP Version Control \u00b6 Git , Github , GitLab , GitWeb , Gitolite Bitbucket Subversion RCS Mercurial Bazaar CVS Synchronization \u00b6 rsync unison Cloud Computing (Hosting) \u00b6 Amazon EC2 Google Compute Engine Digital Ocean Linode Heroku Bluehost Domains \u00b6 Namecheap - My go to for domain registration. Godaddy 1&1 Gandi park.io - Domain Name Auction Project Management Apps \u00b6 Trello GanttProject Taiga OpenProj TaskJuggler OmniPlan GitLab Pintrest Tumblr Slack , Slack Archive , Slackin Inviter Photo Sharing \u00b6 Instagram Flickr Google Photos Mind Mapping \u00b6 MindNode Pro iThoughtsX Mindcad Incubator Coggle XMind Vue Forums \u00b6 Discourse Vanilla Remote Desktop \u00b6 TightVNC x11vnc noVNC TigerVNC RealVNC Free JollysFastVNC UltraVNC VPN \u00b6 Detailed VPN Comparison Chart - Thanks Ty","title":"Project Management"},{"location":"pm/#documents","text":"Google Docs Etherpad LibreOffice Microsoft Office Firepad Evernote Mac Journal Papier - Browser based note taking Chrome application / extension.","title":"Documents"},{"location":"pm/#screen-capture","text":"Screencast-o-matic , Download Link - Screen capture software for sharing projects, making tutorials, and more. Screenflick How to take a screenshot on your Mac 7 ways to take screenshots in Windows 10","title":"Screen Capture"},{"location":"pm/#data-storage","text":"Dropbox Box OwnCloud Microsoft OneDrive Google Drive","title":"Data Storage"},{"location":"pm/#large-file-transfer","text":"WeTransfer Drop Send","title":"Large File Transfer"},{"location":"pm/#blogs-wikis-content-management-systems-cms","text":"Tumblr Wordpress , Wordpress.org MediaWiki Cargo Collective Squarespace Wix The Grid Drupal Joomla Statamic","title":"Blogs / Wikis / Content Management Systems (CMS)"},{"location":"pm/#ftp","text":"Cyberduck FileZilla Transmit WinSCP SmartFTP FireFTP","title":"FTP"},{"location":"pm/#version-control","text":"Git , Github , GitLab , GitWeb , Gitolite Bitbucket Subversion RCS Mercurial Bazaar CVS","title":"Version Control"},{"location":"pm/#synchronization","text":"rsync unison","title":"Synchronization"},{"location":"pm/#cloud-computing-hosting","text":"Amazon EC2 Google Compute Engine Digital Ocean Linode Heroku Bluehost","title":"Cloud Computing (Hosting)"},{"location":"pm/#domains","text":"Namecheap - My go to for domain registration. Godaddy 1&1 Gandi park.io - Domain Name Auction","title":"Domains"},{"location":"pm/#project-management-apps","text":"Trello GanttProject Taiga OpenProj TaskJuggler OmniPlan GitLab Pintrest Tumblr Slack , Slack Archive , Slackin Inviter","title":"Project Management Apps"},{"location":"pm/#photo-sharing","text":"Instagram Flickr Google Photos","title":"Photo Sharing"},{"location":"pm/#mind-mapping","text":"MindNode Pro iThoughtsX Mindcad Incubator Coggle XMind Vue","title":"Mind Mapping"},{"location":"pm/#forums","text":"Discourse Vanilla","title":"Forums"},{"location":"pm/#remote-desktop","text":"TightVNC x11vnc noVNC TigerVNC RealVNC Free JollysFastVNC UltraVNC","title":"Remote Desktop"},{"location":"pm/#vpn","text":"Detailed VPN Comparison Chart - Thanks Ty","title":"VPN"},{"location":"repos/","text":"Code Repos \u00b6 Critical Making Sandbox \u00b6 The cm-sandbox repo is a starting point for web projects using HTML, CSS, and JS running on a localhost server. To use: Navigate to your project directory: cd /Users/username/code Clone repo: git clone https://github.com/rjduran/cm-sandbox.git my-project-name This will clone the cm-sandbox repo into a new project folder named my-project-name . Now you have a starting point for a new web project running with live-server . If you plan to make any commits to a repo on Github with this new project folder you will need to create a repo on Github with the same project name and assign the remote to your repo. Assign a new remote to your new project repo. Assuming I have a new project folder called my-project-name and a new repo on Github with the same name, follow the steps below and replace the remote URL with your new repo URL. 1 2 cd my-project-name git remote -v You will see something like this returned: 1 2 origin https://github.com/rjduran/cm-sandbox.git (fetch) origin https://github.com/rjduran/cm-sandbox.git (push) Copy the url to your new Github repo and use with the git remote command then push the changes to your repo. Check what the remote is set to by using the git remote command as above. It should be updated with your new project URL. Prior to pushing the changes you can make any edits to the files in the repo and add them and commit them. 1 2 3 git remote set-url origin https://github.com/rjduran/my-project-name.git git remote -v git push -u origin master You can read more about changing remotes between HTTPS and SSH and vice versa here . CM Repos \u00b6 cm-code - Example code for various critical making topics cm-tools - Setup guides for various tools cm-xr - Examples in XR (VR / MR / AR)","title":"Code Repos"},{"location":"repos/#code-repos","text":"","title":"Code Repos"},{"location":"repos/#critical-making-sandbox","text":"The cm-sandbox repo is a starting point for web projects using HTML, CSS, and JS running on a localhost server. To use: Navigate to your project directory: cd /Users/username/code Clone repo: git clone https://github.com/rjduran/cm-sandbox.git my-project-name This will clone the cm-sandbox repo into a new project folder named my-project-name . Now you have a starting point for a new web project running with live-server . If you plan to make any commits to a repo on Github with this new project folder you will need to create a repo on Github with the same project name and assign the remote to your repo. Assign a new remote to your new project repo. Assuming I have a new project folder called my-project-name and a new repo on Github with the same name, follow the steps below and replace the remote URL with your new repo URL. 1 2 cd my-project-name git remote -v You will see something like this returned: 1 2 origin https://github.com/rjduran/cm-sandbox.git (fetch) origin https://github.com/rjduran/cm-sandbox.git (push) Copy the url to your new Github repo and use with the git remote command then push the changes to your repo. Check what the remote is set to by using the git remote command as above. It should be updated with your new project URL. Prior to pushing the changes you can make any edits to the files in the repo and add them and commit them. 1 2 3 git remote set-url origin https://github.com/rjduran/my-project-name.git git remote -v git push -u origin master You can read more about changing remotes between HTTPS and SSH and vice versa here .","title":"Critical Making Sandbox"},{"location":"repos/#cm-repos","text":"cm-code - Example code for various critical making topics cm-tools - Setup guides for various tools cm-xr - Examples in XR (VR / MR / AR)","title":"CM Repos"},{"location":"students/","text":"Diamond Alexander - Medium , Github , Instagram Robert Brazell - Medium , Github Makenna Considine - Website , Medium , Github Jonas Escobedo - Medium , Github , Instagram Rachael McAllister - Medium , Github Allison Spiegel - Medium , Github , Instagram Sarah Cohen - Website , Medium , Github Karen McClellan - Website , Medium , Github , Instagram Kelly Phillips - Website , Medium , Github , Instagram Hanshu Zhou - Medium , Github , Instagram","title":"Students"},{"location":"des/","text":"2D, 2.5D Design \u00b6 Adobe Creative Cloud Raster \u00b6 photography scanning (flatbed, etc) GIMP Photoshop MyPaint Krita Vector \u00b6 Inkscape , FLOSS Manuals , Release Notes LibreOffice Draw Illustrator Scribus LibreCAD QCAD FreeCAD Layout OmniGraffle 3D Design \u00b6 Sketchup Tinkercad Shapesmith Flood Editor Matter Machine Rhino , Grasshopper , Kangaroo RhinoCAM Fusion 360 Fusion 360 Adoption Portal Fusion 360 Students Download - Free for students. Make an Autodesk account and install. Learn Fusion 360 in 60 Mins Fusion 360 Design Academy Fusion 360 Adoption Portal Blender Maya Mudbox Cinema4D - Free Student Licensing , Grey Scale Gorilla ZBrush AutoCAD Solidworks Onshape Alias 3DS Max PTC NX AC3D OpenSCAD Catia Matrix Gold - Jewelery Design Software Clayoo - Rhino Plugin for Organic Modeling (SUBD, Emboss, Sculpt) Game Engines \u00b6 Unity Unreal Simulation \u00b6 Elmer COMSOL Solidworks: Simulation ANSYS Nastran Audio & Video \u00b6 Audacity Kdenlive , OpenShot , Lightworks , Final Cut Pro X Adobe Premiere , After Effects ffmpeg , avconv , mencoder mplayer , smplayer VLC HTML5 , formats Screencast-O-Matic Reaper Ableton Live Reality Capture \u00b6 Structure Sensor 3D Scanner Autodesk Remake Mesh Tools \u00b6 Meshlab Autodesk Meshmixer Autodesk Netfabb Visual Programming / Node Based Editors \u00b6 Cycling74 Max Notch PraxisLIVE","title":"Tools"},{"location":"des/#2d-25d-design","text":"Adobe Creative Cloud","title":"2D, 2.5D Design"},{"location":"des/#raster","text":"photography scanning (flatbed, etc) GIMP Photoshop MyPaint Krita","title":"Raster"},{"location":"des/#vector","text":"Inkscape , FLOSS Manuals , Release Notes LibreOffice Draw Illustrator Scribus LibreCAD QCAD FreeCAD Layout OmniGraffle","title":"Vector"},{"location":"des/#3d-design","text":"Sketchup Tinkercad Shapesmith Flood Editor Matter Machine Rhino , Grasshopper , Kangaroo RhinoCAM Fusion 360 Fusion 360 Adoption Portal Fusion 360 Students Download - Free for students. Make an Autodesk account and install. Learn Fusion 360 in 60 Mins Fusion 360 Design Academy Fusion 360 Adoption Portal Blender Maya Mudbox Cinema4D - Free Student Licensing , Grey Scale Gorilla ZBrush AutoCAD Solidworks Onshape Alias 3DS Max PTC NX AC3D OpenSCAD Catia Matrix Gold - Jewelery Design Software Clayoo - Rhino Plugin for Organic Modeling (SUBD, Emboss, Sculpt)","title":"3D Design"},{"location":"des/#game-engines","text":"Unity Unreal","title":"Game Engines"},{"location":"des/#simulation","text":"Elmer COMSOL Solidworks: Simulation ANSYS Nastran","title":"Simulation"},{"location":"des/#audio-video","text":"Audacity Kdenlive , OpenShot , Lightworks , Final Cut Pro X Adobe Premiere , After Effects ffmpeg , avconv , mencoder mplayer , smplayer VLC HTML5 , formats Screencast-O-Matic Reaper Ableton Live","title":"Audio &amp; Video"},{"location":"des/#reality-capture","text":"Structure Sensor 3D Scanner Autodesk Remake","title":"Reality Capture"},{"location":"des/#mesh-tools","text":"Meshlab Autodesk Meshmixer Autodesk Netfabb","title":"Mesh Tools"},{"location":"des/#visual-programming-node-based-editors","text":"Cycling74 Max Notch PraxisLIVE","title":"Visual Programming / Node Based Editors"},{"location":"des/devices/","text":"Device Dimensions \u00b6 Apple Mobile Devices","title":"Devices"},{"location":"des/devices/#device-dimensions","text":"Apple Mobile Devices","title":"Device Dimensions"},{"location":"des/generative/","text":"","title":"Generative"},{"location":"des/geometry/","text":"Geometry \u00b6 Various tools and resources used to design and construct digital and physical geometric models. Polyhedra Paper Folding \u00b6 Paper Models of Polyhedra - Thanks Sarah ! Polyhedron Models by Magnus J. Wenninger Software \u00b6 Stella4D ($) Rhinopolyhedra - Plugin for Rhino with over 630 different polyhedral shapes. Mathematica / Student Licensing CaRMetal - Slightly old program that should still work on macOS (Mojave).","title":"Geometry"},{"location":"des/geometry/#geometry","text":"Various tools and resources used to design and construct digital and physical geometric models.","title":"Geometry"},{"location":"des/geometry/#polyhedra-paper-folding","text":"Paper Models of Polyhedra - Thanks Sarah ! Polyhedron Models by Magnus J. Wenninger","title":"Polyhedra Paper Folding"},{"location":"des/geometry/#software","text":"Stella4D ($) Rhinopolyhedra - Plugin for Rhino with over 630 different polyhedral shapes. Mathematica / Student Licensing CaRMetal - Slightly old program that should still work on macOS (Mojave).","title":"Software"},{"location":"des/histories/","text":"","title":"Histories"},{"location":"des/industrial/","text":"","title":"Industrial"},{"location":"des/learning-c4d/","text":"Learning Cinema4D \u00b6 This section contains resources for learning how to use Maxon Cinema 4D. Note this is a living document and is constantly being updated. Some things may come and go over time. Beginner \u00b6 Cinema4D for Students - You can get a free 18 month license as students to start learning this toolset if you are interested in motion design. Many people use this along with Maya, Blender, Mudbox, ZBrush, to model objects, characters, and more assets to put into VR/AR experiences. Greyscalegorilla - The best C4D learning resource out there. Cinema4D + Unity Cinema4D to Unity Workflow Videos by New Tech Tutorials Cimena4D to Unity: Exporting Geometry","title":"Learning Cinema4D"},{"location":"des/learning-c4d/#learning-cinema4d","text":"This section contains resources for learning how to use Maxon Cinema 4D. Note this is a living document and is constantly being updated. Some things may come and go over time.","title":"Learning Cinema4D"},{"location":"des/learning-c4d/#beginner","text":"Cinema4D for Students - You can get a free 18 month license as students to start learning this toolset if you are interested in motion design. Many people use this along with Maya, Blender, Mudbox, ZBrush, to model objects, characters, and more assets to put into VR/AR experiences. Greyscalegorilla - The best C4D learning resource out there. Cinema4D + Unity Cinema4D to Unity Workflow Videos by New Tech Tutorials Cimena4D to Unity: Exporting Geometry","title":"Beginner"},{"location":"des/learning-f360/","text":"Learning Fusion 360 \u00b6 This section contains resources for learning how to use Autodesk Fusion 360. Note this is a living document and is constantly being updated. Some things may come and go over time. Beginner \u00b6 Fusion 360 Students Download - Free for students. Make an Autodesk account and install. Courses \u00b6 Pluralsignt: Fusion 360: Core Skills The Interface \u00b6 Workspaces, Tools, Navigation, Movement, Projects Model Hierarchy (Browser) Timeline (Model History) How to Use the Timeline Master the Timeline, Browser, & Preferences Making Sketches \u00b6 Defining Constraints A Guide to Fusion 360 Sketch Constraints - A great set of videos for each constraint type. A List of Constraint Types Dimensioning a Sketch Fully Defining a Sketch Pro Tip: Anything \"Blue\" is not dimensioned which means it can be moved around. Anything \"Black\" is dimensioned which mean is has a size. Once the whole sketch is Black it is \"Fully Dimensioned.\" This means it's \"locked\" into place. From 2D Sketch to 3D Model \u00b6 Extruding Sketches (Create > Extrude) Sketches vs Bodies vs Components vs Assemblies Quick Tip: Bodies vs Components About bodies and components What is the difference between a Sketch, Body & Component? Understanding Assemblies Pro Tip: Press Shift + N to turn on color cycling. This will give a color to each component. Exporting 3D Models \u00b6 3D Meshes ( STL , OBJ) Mesh Refinement (Higher Quality = More Triangles) Example: Viewing Meshes in Meshlab Making Mechanical Drawings (2D) \u00b6 File > New Drawing From Design How to Create a Drawing From Your Design (Video) Defining a Parametric Model \u00b6 User Parameters (\"Sigma\" Icon) Change Parameters Dialog Box Equations and Parameters in Dimensions Importing 3D Models \u00b6 Importing a Mesh (STL) - How to convert a mesh to a parametric model. Intermediate \u00b6 Working with Meshes \u00b6 Coming soon Joints and Assemblies \u00b6 NYCNC: Fusion Friday #3: Joints Explained! Advanced \u00b6 Scripting API \u00b6 Coming soon","title":"Learning Fusion 360"},{"location":"des/learning-f360/#learning-fusion-360","text":"This section contains resources for learning how to use Autodesk Fusion 360. Note this is a living document and is constantly being updated. Some things may come and go over time.","title":"Learning Fusion 360"},{"location":"des/learning-f360/#beginner","text":"Fusion 360 Students Download - Free for students. Make an Autodesk account and install.","title":"Beginner"},{"location":"des/learning-f360/#courses","text":"Pluralsignt: Fusion 360: Core Skills","title":"Courses"},{"location":"des/learning-f360/#the-interface","text":"Workspaces, Tools, Navigation, Movement, Projects Model Hierarchy (Browser) Timeline (Model History) How to Use the Timeline Master the Timeline, Browser, & Preferences","title":"The Interface"},{"location":"des/learning-f360/#making-sketches","text":"Defining Constraints A Guide to Fusion 360 Sketch Constraints - A great set of videos for each constraint type. A List of Constraint Types Dimensioning a Sketch Fully Defining a Sketch Pro Tip: Anything \"Blue\" is not dimensioned which means it can be moved around. Anything \"Black\" is dimensioned which mean is has a size. Once the whole sketch is Black it is \"Fully Dimensioned.\" This means it's \"locked\" into place.","title":"Making Sketches"},{"location":"des/learning-f360/#from-2d-sketch-to-3d-model","text":"Extruding Sketches (Create > Extrude) Sketches vs Bodies vs Components vs Assemblies Quick Tip: Bodies vs Components About bodies and components What is the difference between a Sketch, Body & Component? Understanding Assemblies Pro Tip: Press Shift + N to turn on color cycling. This will give a color to each component.","title":"From 2D Sketch to 3D Model"},{"location":"des/learning-f360/#exporting-3d-models","text":"3D Meshes ( STL , OBJ) Mesh Refinement (Higher Quality = More Triangles) Example: Viewing Meshes in Meshlab","title":"Exporting 3D Models"},{"location":"des/learning-f360/#making-mechanical-drawings-2d","text":"File > New Drawing From Design How to Create a Drawing From Your Design (Video)","title":"Making Mechanical Drawings (2D)"},{"location":"des/learning-f360/#defining-a-parametric-model","text":"User Parameters (\"Sigma\" Icon) Change Parameters Dialog Box Equations and Parameters in Dimensions","title":"Defining a Parametric Model"},{"location":"des/learning-f360/#importing-3d-models","text":"Importing a Mesh (STL) - How to convert a mesh to a parametric model.","title":"Importing 3D Models"},{"location":"des/learning-f360/#intermediate","text":"","title":"Intermediate"},{"location":"des/learning-f360/#working-with-meshes","text":"Coming soon","title":"Working with Meshes"},{"location":"des/learning-f360/#joints-and-assemblies","text":"NYCNC: Fusion Friday #3: Joints Explained!","title":"Joints and Assemblies"},{"location":"des/learning-f360/#advanced","text":"","title":"Advanced"},{"location":"des/learning-f360/#scripting-api","text":"Coming soon","title":"Scripting API"},{"location":"des/learning-rhino/","text":"","title":"Learning rhino"},{"location":"des/learning-touchdesigner/","text":"Learning TouchDesigner \u00b6 This section contains resources for learning how to use TouchDesigner . Note this is a living document and is constantly being updated. Some things may come and go over time. Beginner \u00b6 Learning TouchDesigner on Lynda.com - You can watch anything on Lynda.com for free via OIT . Matthew Ragan Tutorials Intro to TouchDesigner by Ben Voigt - A great entry point to the world of touch designer. It's long (4 hrs) but worth the watch. TouchDesigner Wiki - The big list of tutorials and ways to learn the tool. cm-xr repo - A repo I setup for XR related code. There is an implementation of UnitySpout which makes use of KlakSpout to interface TouchDesigner with Unity. This is a Windows 10 only based workflow. Presentations Jessica Palmer - Python and TouchDesigner for Interactive Experiments - A designer turned python programmer and touch design expert. Inspiring talk. Make mind bending, interactive 3D projects with TouchDesigner and Python - Quick talk showing some possibilities with the tool.","title":"Learning TouchDesigner"},{"location":"des/learning-touchdesigner/#learning-touchdesigner","text":"This section contains resources for learning how to use TouchDesigner . Note this is a living document and is constantly being updated. Some things may come and go over time.","title":"Learning TouchDesigner"},{"location":"des/learning-touchdesigner/#beginner","text":"Learning TouchDesigner on Lynda.com - You can watch anything on Lynda.com for free via OIT . Matthew Ragan Tutorials Intro to TouchDesigner by Ben Voigt - A great entry point to the world of touch designer. It's long (4 hrs) but worth the watch. TouchDesigner Wiki - The big list of tutorials and ways to learn the tool. cm-xr repo - A repo I setup for XR related code. There is an implementation of UnitySpout which makes use of KlakSpout to interface TouchDesigner with Unity. This is a Windows 10 only based workflow. Presentations Jessica Palmer - Python and TouchDesigner for Interactive Experiments - A designer turned python programmer and touch design expert. Inspiring talk. Make mind bending, interactive 3D projects with TouchDesigner and Python - Quick talk showing some possibilities with the tool.","title":"Beginner"},{"location":"des/parametric/","text":"Parametric Design \u00b6 Parametric design is a process based on algorithmic thinking that enables the expression of parameters and rules that, together, define, encode and clarify the relationship between design intent and design response. ( Source: Wikipedia ), Google Search Histories \u00b6 Parametric Design: a Brief History Parametric Design: What's Gotten Lost Amid the Algorithms Examples \u00b6 Parametric Design Examples Organizations: Co-de-iT , Zha Code Edu , Designmorphine Projects: Opendesk , Formlabs Digital Factory Pens , New Balance 3D Printed Shoe , Nervous System Kinematics Dress","title":"Parametric Design"},{"location":"des/parametric/#parametric-design","text":"Parametric design is a process based on algorithmic thinking that enables the expression of parameters and rules that, together, define, encode and clarify the relationship between design intent and design response. ( Source: Wikipedia ), Google Search","title":"Parametric Design"},{"location":"des/parametric/#histories","text":"Parametric Design: a Brief History Parametric Design: What's Gotten Lost Amid the Algorithms","title":"Histories"},{"location":"des/parametric/#examples","text":"Parametric Design Examples Organizations: Co-de-iT , Zha Code Edu , Designmorphine Projects: Opendesk , Formlabs Digital Factory Pens , New Balance 3D Printed Shoe , Nervous System Kinematics Dress","title":"Examples"},{"location":"des/systems/","text":"Design Systems \u00b6 Design Systems Handbook Learn Design Code - Great resource for tools and topics at the intersection of design and code. Flat File CMS \u00b6 Type and Grids Wordpress Themes \u00b6 Colorlib Free Themes - The internet is full of themes. Just google \"best wordpress themes of 2017\" or something more specific to the kind of site you want to build. You will eventually land on something that works. Athemes HTML Themes \u00b6 Bootstrap , Bootswatch , Start Bootstrap Theme Forest Templated Admin Panel Themes \u00b6 Bootstrap Admin Themes 20 Free & Premium Bootstrap Admin Dashboard Templates Top 22 Free Responsive HTML5 Admin & Dashboard Templates 2017 10 Beautifully Designed Free Bootstrap Dashboard Admin Templates Metronic 20 Free Bootstrap Admin Dashboard Templates Start Bootstrap Admin & Dashboard Themes - Simple admin dashboards. Dummy Text (Ipsum) \u00b6 lorem ipsum lorizzle Daftipsum Wikipsum - Ipsum that makes sense! Sort of. HTML-Ipsum Typography \u00b6 The Elements of Typographic Style Applied to the Web Color \u00b6 Coolors - Color generator tool color-hex Colourlovers FlatUI Colors Material Design Color Collection Palette Generator UI Gradients Grid Systems \u00b6 The Grid System - The ultimate resource in grid systems. Grids in Graphic Design","title":"Design Systems"},{"location":"des/systems/#design-systems","text":"Design Systems Handbook Learn Design Code - Great resource for tools and topics at the intersection of design and code.","title":"Design Systems"},{"location":"des/systems/#flat-file-cms","text":"Type and Grids","title":"Flat File CMS"},{"location":"des/systems/#wordpress-themes","text":"Colorlib Free Themes - The internet is full of themes. Just google \"best wordpress themes of 2017\" or something more specific to the kind of site you want to build. You will eventually land on something that works. Athemes","title":"Wordpress Themes"},{"location":"des/systems/#html-themes","text":"Bootstrap , Bootswatch , Start Bootstrap Theme Forest Templated","title":"HTML Themes"},{"location":"des/systems/#admin-panel-themes","text":"Bootstrap Admin Themes 20 Free & Premium Bootstrap Admin Dashboard Templates Top 22 Free Responsive HTML5 Admin & Dashboard Templates 2017 10 Beautifully Designed Free Bootstrap Dashboard Admin Templates Metronic 20 Free Bootstrap Admin Dashboard Templates Start Bootstrap Admin & Dashboard Themes - Simple admin dashboards.","title":"Admin Panel Themes"},{"location":"des/systems/#dummy-text-ipsum","text":"lorem ipsum lorizzle Daftipsum Wikipsum - Ipsum that makes sense! Sort of. HTML-Ipsum","title":"Dummy Text (Ipsum)"},{"location":"des/systems/#typography","text":"The Elements of Typographic Style Applied to the Web","title":"Typography"},{"location":"des/systems/#color","text":"Coolors - Color generator tool color-hex Colourlovers FlatUI Colors Material Design Color Collection Palette Generator UI Gradients","title":"Color"},{"location":"des/systems/#grid-systems","text":"The Grid System - The ultimate resource in grid systems. Grids in Graphic Design","title":"Grid Systems"},{"location":"des/ux-tools/","text":"UX Tools \u00b6 Design / Prototyping \u00b6 Sketch Adobe XD / Getting Started Atomic Wireframing \u00b6 https://www.behance.net/gallery/55462459/Wires-wireframe-kits-for-Adobe-XD https://www.behance.net/gallery/50270083/Snap-Rapid-Wireframing-Kit-(free)","title":"UX Tools"},{"location":"des/ux-tools/#ux-tools","text":"","title":"UX Tools"},{"location":"des/ux-tools/#design-prototyping","text":"Sketch Adobe XD / Getting Started Atomic","title":"Design / Prototyping"},{"location":"des/ux-tools/#wireframing","text":"https://www.behance.net/gallery/55462459/Wires-wireframe-kits-for-Adobe-XD https://www.behance.net/gallery/50270083/Snap-Rapid-Wireframing-Kit-(free)","title":"Wireframing"},{"location":"dev/","text":"Text Editors / IDEs \u00b6 Atom - ( Atom Flight Manual , Packages , My Setup ) Text Wrangler vi , vim , emacs JEdit Eclipse Visual Studio Express XCode Sublime Text Brackets Jetbrains Geany Netbeans IDE TextEdit (MacOS) Notepad (Win) Visual Studio Code Systems \u00b6 Apple MacOS Windows 10 Ubuntu Unix , Unix Tutorial for Beginners , Unix History VirtualBox Browsers \u00b6 Chrome , Chrome Dev Tools Firefox , Firebug Safari Terminals \u00b6 MacOS Terminal , MacOS/Linux/Unix Command Line Cheat Sheet iTerm 2 Powershell (Win) Localhost \u00b6 These are common LAMP stack based environments for local web development. localhost Setting up a local web server on a Mac XAMPP How do I install XAMPP for Mac OS X? MAMP Bitnami Website Copiers \u00b6 HTTRACK Static Site Generators / Documentation \u00b6 StaticGen - Top Open-Source Static Site Generators mkdocs , Material Theme Gitbook Pandoc Metalsmith Jekyll Hugo Web Languages I \u00b6 HyperText Markup Language (HTML) \u00b6 HTML (Mozilla) Google Web Fundamentals HTML Tutorial HTMLDog - HTML Beginner Tutorial HTMLDog - HTML Intermediate Tutorial HTML Validator Dive into HTML5 Cascading Style Sheets (CSS) \u00b6 CSS (Mozilla) CSS Intro CSS Tutorial CSS-Tricks CSS Basics HTMLDog - CSS Beginner Tutorial HTMLDog - CSS Intermediate Tutorial JavaScript (JS) \u00b6 JavaScript (Mozilla) Mozilla Guide Javascript.com W3C Javascript Tutorial Eloquent Javascript (Book) W3C JSON Tutorial Web Languages II \u00b6 Markdown Markdown Markdown Docs Markdown Cheatsheet Canvas , 31 Days of Canvas tutorials WebGL , Does my browser support WebGL? , WebGL Report Web Protocols \u00b6 Hypertext Transfer Protocol (HTTP) File Transfer Protocol (FTP) Secure Shell (SSH) Programming Languages \u00b6 Python , Anaconda Ruby , RVM Java , C/C++ .NET Swift Coding Standards \u00b6 Tools that can help you make your own style guides Airbnb Javascript Style Guide Isobar Front-end Code Standards Google Style Guides - All languages Google Web Development Mozilla Developer Guide - Coding Style Frameworks and Libraries \u00b6 jQuery jQuery Mobile node.js , npm , nvm . ( Beginner Tutorial , Felix's Node.js Beginners Guide ) React Awesome React Components React Native , Use React Native , Nuclide (Atom Package) Express - For Node.js MongoDB Angular Mobile Angular UI Vue Omniscient Riot Backbone.js Aurelia Ember Meteor Rails - Uses Ruby language Masonry.js Moment.js - Parse, validate, manipulate, and display dates and times Search Engines \u00b6 Javascripting TodoMVC General-Purpose Task Runners \u00b6 Gulp - Automated task runner Getting started with gulp - Good overview of the tool. An Introduction to Gulp.js - This is a nice little primer explaining how it works and how it is different from Grunt. Gulp Recipes Grunt - JavaScript Task Runner. Older than Gulp. npm - Part of Node.js Dependency Management \u00b6 Bower - Package Manager Yarn - Package Manager for JS Yarn: A new package manager for JavaScript Module Bundlers \u00b6 Browserify Intro to browserify budo Webpack - Asset bundler Webpack or Browserify & Gulp: Which Is Better? Beginner\u2019s guide to Webpack RequireJS Linting \u00b6 Github Collection of Clean Code Linters ESLint JSHint - JS error checking JSLint Test Frameworks \u00b6 Mocha Jasmine QUnit Compilers and Extensions \u00b6 CoffeeScript - Simplified Javascript LiveScript TypeScript Babel - Javascript compiler. Commonly used for JSX. Getting started with Babel Getting Started With ES6 and Babel SASS - CSS Extension LESS - CSS Pre-Processor CSS Preprocessors \u2013 Sass vs LESS Web App Framework / Workflow \u00b6 Yeoman Lineman Sandboxes \u00b6 Examples of Sandbox-like / Code Sharing Environments Codepen - HTML, CSS, JS JSFiddle - HTML, CSS, JS Scratchpad (HTML/JS) JS2Coffee - JS, Coffeescript CodeSandbox - React, Angular, Vue, Preact, Svelte JSBin - JS Pastebin Javascript Sandbox - JS Kixx Demos CSS Desk - CSS Mobile App Prototyping \u00b6 Adobe PhoneGap Ionic Framework Template Engines \u00b6 Mustache Handlebars Underscore Pug - Formerly Jade Embedded JS (EJS) Transparency - For jQuery Dust doT - For Node.js Template 7 Documentation Generation \u00b6 mkdocs , Material Theme Docusaurus Gitbook Pandoc ESDoc Transcription documentation.js YUIDoc JSDoc Various Web Tools \u00b6 Spritecow - For working with sprites Create CSS3 - CSS generator Travis CI Electron - Desktop App Build Systems API Development \u00b6 Sandbox Postman - API Development okta RunKit APIs (Application Programming Interfaces) Working with data from APIs such as Instagram, Slack, etc What is an API? Postman - A great tool for working with APIs HTTP: The Protocol Every Web Developer Must Know RESTful Web Services RESTful What is RESTful programming? RESTful Web Services: A Tutorial Ports \u00b6 List of Common Ports List of TCP and UDP port numbers Development News \u00b6 Tutorialzine Glitch Techstacks \u00b6 Stackshare - Tech Stacks - The open source tools and SaaS behind the world's best startups. ie AirBnb, FB, Uber, etc The Book of Secret Knowledge - A collection of awesome lists, manuals, blogs, hacks, one-liners, cli/web tools and more. Especially for System and Network Administrators, DevOps, Pentesters or Security Researchers.","title":"Tools"},{"location":"dev/#text-editors-ides","text":"Atom - ( Atom Flight Manual , Packages , My Setup ) Text Wrangler vi , vim , emacs JEdit Eclipse Visual Studio Express XCode Sublime Text Brackets Jetbrains Geany Netbeans IDE TextEdit (MacOS) Notepad (Win) Visual Studio Code","title":"Text Editors / IDEs"},{"location":"dev/#systems","text":"Apple MacOS Windows 10 Ubuntu Unix , Unix Tutorial for Beginners , Unix History VirtualBox","title":"Systems"},{"location":"dev/#browsers","text":"Chrome , Chrome Dev Tools Firefox , Firebug Safari","title":"Browsers"},{"location":"dev/#terminals","text":"MacOS Terminal , MacOS/Linux/Unix Command Line Cheat Sheet iTerm 2 Powershell (Win)","title":"Terminals"},{"location":"dev/#localhost","text":"These are common LAMP stack based environments for local web development. localhost Setting up a local web server on a Mac XAMPP How do I install XAMPP for Mac OS X? MAMP Bitnami","title":"Localhost"},{"location":"dev/#website-copiers","text":"HTTRACK","title":"Website Copiers"},{"location":"dev/#static-site-generators-documentation","text":"StaticGen - Top Open-Source Static Site Generators mkdocs , Material Theme Gitbook Pandoc Metalsmith Jekyll Hugo","title":"Static Site Generators / Documentation"},{"location":"dev/#web-languages-i","text":"","title":"Web Languages I"},{"location":"dev/#hypertext-markup-language-html","text":"HTML (Mozilla) Google Web Fundamentals HTML Tutorial HTMLDog - HTML Beginner Tutorial HTMLDog - HTML Intermediate Tutorial HTML Validator Dive into HTML5","title":"HyperText Markup Language (HTML)"},{"location":"dev/#cascading-style-sheets-css","text":"CSS (Mozilla) CSS Intro CSS Tutorial CSS-Tricks CSS Basics HTMLDog - CSS Beginner Tutorial HTMLDog - CSS Intermediate Tutorial","title":"Cascading Style Sheets (CSS)"},{"location":"dev/#javascript-js","text":"JavaScript (Mozilla) Mozilla Guide Javascript.com W3C Javascript Tutorial Eloquent Javascript (Book) W3C JSON Tutorial","title":"JavaScript (JS)"},{"location":"dev/#web-languages-ii","text":"Markdown Markdown Markdown Docs Markdown Cheatsheet Canvas , 31 Days of Canvas tutorials WebGL , Does my browser support WebGL? , WebGL Report","title":"Web Languages II"},{"location":"dev/#web-protocols","text":"Hypertext Transfer Protocol (HTTP) File Transfer Protocol (FTP) Secure Shell (SSH)","title":"Web Protocols"},{"location":"dev/#programming-languages","text":"Python , Anaconda Ruby , RVM Java , C/C++ .NET Swift","title":"Programming Languages"},{"location":"dev/#coding-standards","text":"Tools that can help you make your own style guides Airbnb Javascript Style Guide Isobar Front-end Code Standards Google Style Guides - All languages Google Web Development Mozilla Developer Guide - Coding Style","title":"Coding Standards"},{"location":"dev/#frameworks-and-libraries","text":"jQuery jQuery Mobile node.js , npm , nvm . ( Beginner Tutorial , Felix's Node.js Beginners Guide ) React Awesome React Components React Native , Use React Native , Nuclide (Atom Package) Express - For Node.js MongoDB Angular Mobile Angular UI Vue Omniscient Riot Backbone.js Aurelia Ember Meteor Rails - Uses Ruby language Masonry.js Moment.js - Parse, validate, manipulate, and display dates and times","title":"Frameworks and Libraries"},{"location":"dev/#search-engines","text":"Javascripting TodoMVC","title":"Search Engines"},{"location":"dev/#general-purpose-task-runners","text":"Gulp - Automated task runner Getting started with gulp - Good overview of the tool. An Introduction to Gulp.js - This is a nice little primer explaining how it works and how it is different from Grunt. Gulp Recipes Grunt - JavaScript Task Runner. Older than Gulp. npm - Part of Node.js","title":"General-Purpose Task Runners"},{"location":"dev/#dependency-management","text":"Bower - Package Manager Yarn - Package Manager for JS Yarn: A new package manager for JavaScript","title":"Dependency Management"},{"location":"dev/#module-bundlers","text":"Browserify Intro to browserify budo Webpack - Asset bundler Webpack or Browserify & Gulp: Which Is Better? Beginner\u2019s guide to Webpack RequireJS","title":"Module Bundlers"},{"location":"dev/#linting","text":"Github Collection of Clean Code Linters ESLint JSHint - JS error checking JSLint","title":"Linting"},{"location":"dev/#test-frameworks","text":"Mocha Jasmine QUnit","title":"Test Frameworks"},{"location":"dev/#compilers-and-extensions","text":"CoffeeScript - Simplified Javascript LiveScript TypeScript Babel - Javascript compiler. Commonly used for JSX. Getting started with Babel Getting Started With ES6 and Babel SASS - CSS Extension LESS - CSS Pre-Processor CSS Preprocessors \u2013 Sass vs LESS","title":"Compilers and Extensions"},{"location":"dev/#web-app-framework-workflow","text":"Yeoman Lineman","title":"Web App Framework / Workflow"},{"location":"dev/#sandboxes","text":"Examples of Sandbox-like / Code Sharing Environments Codepen - HTML, CSS, JS JSFiddle - HTML, CSS, JS Scratchpad (HTML/JS) JS2Coffee - JS, Coffeescript CodeSandbox - React, Angular, Vue, Preact, Svelte JSBin - JS Pastebin Javascript Sandbox - JS Kixx Demos CSS Desk - CSS","title":"Sandboxes"},{"location":"dev/#mobile-app-prototyping","text":"Adobe PhoneGap Ionic Framework","title":"Mobile App Prototyping"},{"location":"dev/#template-engines","text":"Mustache Handlebars Underscore Pug - Formerly Jade Embedded JS (EJS) Transparency - For jQuery Dust doT - For Node.js Template 7","title":"Template Engines"},{"location":"dev/#documentation-generation","text":"mkdocs , Material Theme Docusaurus Gitbook Pandoc ESDoc Transcription documentation.js YUIDoc JSDoc","title":"Documentation Generation"},{"location":"dev/#various-web-tools","text":"Spritecow - For working with sprites Create CSS3 - CSS generator Travis CI Electron - Desktop App Build Systems","title":"Various Web Tools"},{"location":"dev/#api-development","text":"Sandbox Postman - API Development okta RunKit APIs (Application Programming Interfaces) Working with data from APIs such as Instagram, Slack, etc What is an API? Postman - A great tool for working with APIs HTTP: The Protocol Every Web Developer Must Know RESTful Web Services RESTful What is RESTful programming? RESTful Web Services: A Tutorial","title":"API Development"},{"location":"dev/#ports","text":"List of Common Ports List of TCP and UDP port numbers","title":"Ports"},{"location":"dev/#development-news","text":"Tutorialzine Glitch","title":"Development News"},{"location":"dev/#techstacks","text":"Stackshare - Tech Stacks - The open source tools and SaaS behind the world's best startups. ie AirBnb, FB, Uber, etc The Book of Secret Knowledge - A collection of awesome lists, manuals, blogs, hacks, one-liners, cli/web tools and more. Especially for System and Network Administrators, DevOps, Pentesters or Security Researchers.","title":"Techstacks"},{"location":"dev/histories/","text":"History of the Electronics, Computers, and the Internet \u00b6 Awesome Computer History - A Github based Awesome list Computer History Museum Exhibition Digital Logic The Web As We May Think by Vannevar Bush (1945) / Brainpickings Summary The Mother of all Demos, presented by Douglas Engelbart (1968) / Wikipedia Computer History Museum: Internet History 1962 to 1992 A Brief Guide to the History of the Internet The Idea Factory: Bell Labs and the Great Age of American Innovation by Jon Gertner The Innovators: How a Group of Hackers, Geniuses, and Geeks Created the Digital Revolution by Walter Isaacson History of Web Languages \u00b6 A History of HTML A Brief History of CSS until 2016 A Brief History of JavaScript History of Operating Systems \u00b6 History of Linux History of MacOS History of Windows History of Programming and Code \u00b6 What is Code? History of Computer Programming (Graphic) History of Programming Languages History of Computer Languages - The Classical Decade, 1950s Casey Reas on Coding: You need to be Able to Read and Write History of Scripting \u00b6 The Rise of Scripting Languages by John Ousterhout (March 1998)","title":"Histories"},{"location":"dev/histories/#history-of-the-electronics-computers-and-the-internet","text":"Awesome Computer History - A Github based Awesome list Computer History Museum Exhibition Digital Logic The Web As We May Think by Vannevar Bush (1945) / Brainpickings Summary The Mother of all Demos, presented by Douglas Engelbart (1968) / Wikipedia Computer History Museum: Internet History 1962 to 1992 A Brief Guide to the History of the Internet The Idea Factory: Bell Labs and the Great Age of American Innovation by Jon Gertner The Innovators: How a Group of Hackers, Geniuses, and Geeks Created the Digital Revolution by Walter Isaacson","title":"History of the Electronics, Computers, and the Internet"},{"location":"dev/histories/#history-of-web-languages","text":"A History of HTML A Brief History of CSS until 2016 A Brief History of JavaScript","title":"History of Web Languages"},{"location":"dev/histories/#history-of-operating-systems","text":"History of Linux History of MacOS History of Windows","title":"History of Operating Systems"},{"location":"dev/histories/#history-of-programming-and-code","text":"What is Code? History of Computer Programming (Graphic) History of Programming Languages History of Computer Languages - The Classical Decade, 1950s Casey Reas on Coding: You need to be Able to Read and Write","title":"History of Programming and Code"},{"location":"dev/histories/#history-of-scripting","text":"The Rise of Scripting Languages by John Ousterhout (March 1998)","title":"History of Scripting"},{"location":"dev/js-libs/","text":"Javascript Libraries \u00b6 Pop Motion 11 JavaScript Animation Libraries For 2018","title":"Javascript Libraries"},{"location":"dev/js-libs/#javascript-libraries","text":"Pop Motion 11 JavaScript Animation Libraries For 2018","title":"Javascript Libraries"},{"location":"dev/learning-git/","text":"This section contains resources for learning how to use the Git version control system. Note this is a living document and is constantly being updated. Some things may come and go over time. Beginner \u00b6 Github Tutorial (10 mins) - Non command line (Terminal) tutorial. Git - The Simple Guide - Command line based tutorial. Connecting to Github with SSH Git & Github Tutorial on Udacity - Command line based tutorial. Start a new git repository git/github guide a minimal tutorial The most important git commands Git Immersion - Advanced Tutorial. Work through this once you get the hang of working on the command line. Command Line Cheat Sheet by git-tower - This one is great! Version Control Workflow Cheat Sheet for Git (git0tower)","title":"Learning Git"},{"location":"dev/learning-git/#beginner","text":"Github Tutorial (10 mins) - Non command line (Terminal) tutorial. Git - The Simple Guide - Command line based tutorial. Connecting to Github with SSH Git & Github Tutorial on Udacity - Command line based tutorial. Start a new git repository git/github guide a minimal tutorial The most important git commands Git Immersion - Advanced Tutorial. Work through this once you get the hang of working on the command line. Command Line Cheat Sheet by git-tower - This one is great! Version Control Workflow Cheat Sheet for Git (git0tower)","title":"Beginner"},{"location":"dev/learning-html-css/","text":"This section contains resources for learning HTML & CSS. The two languages are so interrelated it only makes sense to learn them in parallel. Note this is a living document and is constantly being updated. Some things may come and go over time. Beginner \u00b6 A beginning HTML and CSS programmer is someone that is new to both languages and possibly programming. This set of resources spans learning what each language is, how they work together, and the basics of more front-end design oriented topics such as fluid design, responsive design, and mobile design. HTML \u00b6 There is no shortcut to learning HTML or CSS. The best teacher is practice and application. Make things, break things, and analyze why certain HTML tags or CSS selectors work (or don't). Make use of a live server type environment to speed up your development workflow. Language \u00b6 HTML (Mozilla) Google Web Fundamentals Document Meta Data \u00b6 The HTML Element HEAD - A list of everything that could go in the head of your document Tutorials \u00b6 HTML Tutorial HTMLDog - HTML Beginner Tutorial HTMLDog - HTML Intermediate Tutorial Tools \u00b6 HTML Validator CSS \u00b6 Language \u00b6 CSS (Mozilla) CSS Intro CSS-Tricks CSS Basics Tutorials \u00b6 CSS Tutorial HTMLDog - CSS Beginner Tutorial HTMLDog - CSS Intermediate Tutorial Tools \u00b6 CSS Validator Intermediate \u00b6 An intermediate HTML and CSS programmer is someone that is familiar with both languages and can build simple pages and functional websites based off mockups or wireframes. CSS Units \u00b6 W3 CSS Units CSS values and units Web Style Sheets CSS tips & tricks Your Ultimate Guide to CSS Units \u2013 All You Need to Know CSS Units Best Practices The quick guide to CSS length units Resets & Boilerplates \u00b6 CSS Normalize & Resets \u00b6 Reboot, Resets, and Reasoning Normalize.css Treehouse Quick Tips: Applying Normalize.css Browser Reset CSS About normalize.css CSS Tools: Reset What is the difference between Normalize.css and Reset CSS? Boilerplates \u00b6 HTML5 Boilerplate Positioning & Layout \u00b6 Box Model \u00b6 Introduction to the CSS basic box model Box model recap CSS Box Model Sandbox Positioning \u00b6 CSS Positioning in Ten Steps CSS Positioning 101 Layouts, Grids, Flexbox \u00b6 A Complete Guide to Grid Interactive Grid Cheat Sheet A Complete Guide to Flexbox Interactive Flex Cheat Sheet CSS Grid\u200a\u2014\u200aa simple layout design tutorial - Great intro to CSS Grid. Part of another great resource: The CSS Visual Dictionary . This gives great visual examples of CSS in use. The Author ( JavaScript Teacher ) of these works has tons of other useful articles on Medium. Media Queries \u00b6 Using media queries Responsive web design Media Queries for Standard Devices Media Queries Demystified: CSS Min-Width and Max-Width Tools \u00b6 CSS Media Queries - Great tool for inspecting which media queries apply to your current device Simple CSS Media Queries - Tool for generating media queries for devices Test Responsive and Device Specific Viewports in Google Chrome Preprocessors \u00b6 SASS (SCSS) LESS - Less (aka Leaner Style Sheets) is a dynamic preprocessor style sheet language that can be compiled into Cascading Style Sheets and run on the client side or server side. Intro to CSS Preprocessors Organization \u00b6 Methods to Organize CSS Advanced \u00b6 An advanced HTML and CSS programmer is someone that is an expert with both languages and can architect nearly any possible website for any possible platform. CSS \u00b6 CSS Specificity Hierarchy \u00b6 What is CSS specificity hierarchy W3: Calculating a selector's specificity CSS Specificity Calculator - Really useful! CSS Ninja \u00b6 CSS Best Practices \u2013 14 Steps to Become a CSS Ninja Pt1 CSS Best Practices \u2013 14 Steps to Become a CSS Ninja Pt2 CSS Methologies \u00b6 BEM \u2013 meaning block, element, modifier \u2013 is a front-end naming methodology thought up by the guys at Yandex. It is a smart way of naming your CSS classes to give them more transparency and meaning to other developers. MindBEMding \u2013 getting your head \u2019round BEM syntax BEMIT: Taking the BEM Naming Convention a Step Further Other \u00b6 Handbooks, Guides, Interview Questions \u00b6 Front-End Interview Handbook Back-End Developer Interview Questions Tech Interview Handbook Code Guide by @mdo - A guide by the author of Bootstrap. Front-End Frameworks \u00b6 Foundation Shoelace - Like bootstrap but smaller","title":"Learning HTML & CSS"},{"location":"dev/learning-html-css/#beginner","text":"A beginning HTML and CSS programmer is someone that is new to both languages and possibly programming. This set of resources spans learning what each language is, how they work together, and the basics of more front-end design oriented topics such as fluid design, responsive design, and mobile design.","title":"Beginner"},{"location":"dev/learning-html-css/#html","text":"There is no shortcut to learning HTML or CSS. The best teacher is practice and application. Make things, break things, and analyze why certain HTML tags or CSS selectors work (or don't). Make use of a live server type environment to speed up your development workflow.","title":"HTML"},{"location":"dev/learning-html-css/#language","text":"HTML (Mozilla) Google Web Fundamentals","title":"Language"},{"location":"dev/learning-html-css/#document-meta-data","text":"The HTML Element HEAD - A list of everything that could go in the head of your document","title":"Document Meta Data"},{"location":"dev/learning-html-css/#tutorials","text":"HTML Tutorial HTMLDog - HTML Beginner Tutorial HTMLDog - HTML Intermediate Tutorial","title":"Tutorials"},{"location":"dev/learning-html-css/#tools","text":"HTML Validator","title":"Tools"},{"location":"dev/learning-html-css/#css","text":"","title":"CSS"},{"location":"dev/learning-html-css/#language_1","text":"CSS (Mozilla) CSS Intro CSS-Tricks CSS Basics","title":"Language"},{"location":"dev/learning-html-css/#tutorials_1","text":"CSS Tutorial HTMLDog - CSS Beginner Tutorial HTMLDog - CSS Intermediate Tutorial","title":"Tutorials"},{"location":"dev/learning-html-css/#tools_1","text":"CSS Validator","title":"Tools"},{"location":"dev/learning-html-css/#intermediate","text":"An intermediate HTML and CSS programmer is someone that is familiar with both languages and can build simple pages and functional websites based off mockups or wireframes.","title":"Intermediate"},{"location":"dev/learning-html-css/#css-units","text":"W3 CSS Units CSS values and units Web Style Sheets CSS tips & tricks Your Ultimate Guide to CSS Units \u2013 All You Need to Know CSS Units Best Practices The quick guide to CSS length units","title":"CSS Units"},{"location":"dev/learning-html-css/#resets-boilerplates","text":"","title":"Resets &amp; Boilerplates"},{"location":"dev/learning-html-css/#css-normalize-resets","text":"Reboot, Resets, and Reasoning Normalize.css Treehouse Quick Tips: Applying Normalize.css Browser Reset CSS About normalize.css CSS Tools: Reset What is the difference between Normalize.css and Reset CSS?","title":"CSS Normalize &amp; Resets"},{"location":"dev/learning-html-css/#boilerplates","text":"HTML5 Boilerplate","title":"Boilerplates"},{"location":"dev/learning-html-css/#positioning-layout","text":"","title":"Positioning &amp; Layout"},{"location":"dev/learning-html-css/#box-model","text":"Introduction to the CSS basic box model Box model recap CSS Box Model Sandbox","title":"Box Model"},{"location":"dev/learning-html-css/#positioning","text":"CSS Positioning in Ten Steps CSS Positioning 101","title":"Positioning"},{"location":"dev/learning-html-css/#layouts-grids-flexbox","text":"A Complete Guide to Grid Interactive Grid Cheat Sheet A Complete Guide to Flexbox Interactive Flex Cheat Sheet CSS Grid\u200a\u2014\u200aa simple layout design tutorial - Great intro to CSS Grid. Part of another great resource: The CSS Visual Dictionary . This gives great visual examples of CSS in use. The Author ( JavaScript Teacher ) of these works has tons of other useful articles on Medium.","title":"Layouts, Grids, Flexbox"},{"location":"dev/learning-html-css/#media-queries","text":"Using media queries Responsive web design Media Queries for Standard Devices Media Queries Demystified: CSS Min-Width and Max-Width","title":"Media Queries"},{"location":"dev/learning-html-css/#tools_2","text":"CSS Media Queries - Great tool for inspecting which media queries apply to your current device Simple CSS Media Queries - Tool for generating media queries for devices Test Responsive and Device Specific Viewports in Google Chrome","title":"Tools"},{"location":"dev/learning-html-css/#preprocessors","text":"SASS (SCSS) LESS - Less (aka Leaner Style Sheets) is a dynamic preprocessor style sheet language that can be compiled into Cascading Style Sheets and run on the client side or server side. Intro to CSS Preprocessors","title":"Preprocessors"},{"location":"dev/learning-html-css/#organization","text":"Methods to Organize CSS","title":"Organization"},{"location":"dev/learning-html-css/#advanced","text":"An advanced HTML and CSS programmer is someone that is an expert with both languages and can architect nearly any possible website for any possible platform.","title":"Advanced"},{"location":"dev/learning-html-css/#css_1","text":"","title":"CSS"},{"location":"dev/learning-html-css/#css-specificity-hierarchy","text":"What is CSS specificity hierarchy W3: Calculating a selector's specificity CSS Specificity Calculator - Really useful!","title":"CSS Specificity Hierarchy"},{"location":"dev/learning-html-css/#css-ninja","text":"CSS Best Practices \u2013 14 Steps to Become a CSS Ninja Pt1 CSS Best Practices \u2013 14 Steps to Become a CSS Ninja Pt2","title":"CSS Ninja"},{"location":"dev/learning-html-css/#css-methologies","text":"BEM \u2013 meaning block, element, modifier \u2013 is a front-end naming methodology thought up by the guys at Yandex. It is a smart way of naming your CSS classes to give them more transparency and meaning to other developers. MindBEMding \u2013 getting your head \u2019round BEM syntax BEMIT: Taking the BEM Naming Convention a Step Further","title":"CSS Methologies"},{"location":"dev/learning-html-css/#other","text":"","title":"Other"},{"location":"dev/learning-html-css/#handbooks-guides-interview-questions","text":"Front-End Interview Handbook Back-End Developer Interview Questions Tech Interview Handbook Code Guide by @mdo - A guide by the author of Bootstrap.","title":"Handbooks, Guides, Interview Questions"},{"location":"dev/learning-html-css/#front-end-frameworks","text":"Foundation Shoelace - Like bootstrap but smaller","title":"Front-End Frameworks"},{"location":"dev/learning-js/","text":"This section contains resources for learning how to program in Javascript. Note this is a living document and is constantly being updated. Some things may come and go over time. Beginner \u00b6 A beginning Javascript programmer is someone that is new to the Javascript language and possibly programming. This set of resources spans learning what Javascript is and how it works in the browser to fundamental concepts of computer programming, computer science, and software engineering. Its best to have a good handle on the basics of HTML and CSS before learning Javascript. Pro tip: If you don't have a sandbox environment to work out of you can get started quickly with any of these Javascript Sandboxes . Or you can build one . Getting Started \u00b6 What is Javascript? - A great overview of the language and how it works with HTML and CSS. What is Javascript? (Video) ECMAScript aka JavaScript Programming in General \u00b6 Kahn Academy - Computer Programming Language \u00b6 Javascript (Mozilla) W3 Javascript Tutorial How Javascript Works Code Academy - Intro to JavaScript ($) Google Developers Training Javascript Basics: What is Javascript, really? JavaScript building blocks Language Summaries / Cheatsheets \u00b6 Javascript.com by Pluralsignt - A great quick reference of parts of the language. Javascript Basics (P5.js Wiki Reference) - This is a quick-ish overview of the language and how to use it. DOM \u00b6 Introduction to the DOM DOM Interfaces JavaScript DOM Tutorial Series (Video Playlist) - by The Net Ninja JavaScript DOM Tutorial #1 - Introduction Javascript DOM Tutorial #2 - Get Element By ID JavaScript DOM Tutorial #3 - Get Elements By Class or Tag JavaScript DOM Tutorial #4 - The Query Selector JavaScript DOM Tutorial #5 - Changing Text & HTML Content Event Handlers \u00b6 Global Event Handlers Books \u00b6 JavaScript: The Definitive Guide by David Flanagan Professional JavaScript for Web Developers by Nicholas C. Zaka Eloquent Javascript Object-Oriented JavaScript by Stoyan Stefanov and Kumar Chetan Sharma You Don't Know JS - A Github based book series on JavaScript. The Complete JavaScript Handbook JQuery \u00b6 W3 jQuery Tutorial Tutorials \u00b6 Get Started with Debugging JavaScript in Chrome DevTools Vanilla Javascript by Traversy Media Build A Filterable List With Vanilla JavaScript Javascripting (Nodeschool) - Learn JS / Terminal by playing with a node app. You need to know how to use npm and the terminal to run this. freeCodeCamp - Basic Javascript - 10 hrs of tutorials JavaScript Tutorial by Sololearn Javascript.com by Pluralsignt - Check out these short courses for learning specific topics using JS. Articles \u00b6 Learn to Code: 13 Tips that Could Save You Years of Effort 10 Priceless Resources for JavaScript Learners A Study Plan To Cure JavaScript Fatigue - Thx Karen ! JS Collections \u00b6 Micro JS - A website with tons of JS libraries. Some big some small. Intermediate \u00b6 An intermediate Javascript programmer understands parts of Javascript language of syntax (form) and semantics (meaning) and is interested in learning more about design patterns, best practices, libraries, frameworks, and alternative workflows. Language \u00b6 JS the Right Way JavaScript Design Patterns - Free Udacity Course Regular Expressions \u00b6 Regular Expressions (Mozilla) W3 Regex Reference Tutorials \u00b6 RegexOne Tutorials You Should Learn Regular Expressions Regex Sandboxes \u00b6 Regex 101 Regex Pal Tester Regulex Regexper Books \u00b6 JavaScript Patterns by Stoyan Stefanov JavaScript Enlightenment: From Library User to JavaScript Developer by Cody Lindley Data Structures and Algorithms \u00b6 Data Structures and Algorithms with JavaScript by Michael McMillan Introduction to Algorithms by Thomas H. Cormen et al Coding Math (Youtube Channel) Package Management \u00b6 What are the best front-end package managers? - February 2018 Guide to JavaScript frontend package managers - November 2015 JS UIs \u00b6 ULI dat.gui guigui Tutorials \u00b6 Understanding JavaScript Bind() Arrow Functions Advanced \u00b6 An advanced Javascript programmer understands how to utilize Javascript to solve technical and creative challenges by using existing tools and designing custom solutions. Language \u00b6 Backbone.js Fundamentals JavaScript Garden How to Learn ES6 (ECMAScript 6) ECMAScript Design Patterns \u00b6 Learning JavaScript Design Patterns Pro JavaScript Design Patterns: The Essentials of Object-Oriented JavaScript Programming by Dustin Diaz and Ross Harmes Design Patterns: Elements of Reusable Object-Oriented Software by Erich Gamma et al Writing Modular JavaScript With AMD, CommonJS & ES Harmony Working with Modules \u00b6 RequireJS RequireJS's relationship to CommonJS Module Best Practices - Writing JS Modules in Node/CommonJS Application Development \u00b6 Electron Muon - Similar to Electron but uses Chromium Code Poems \u00b6 A Functional Poem\u200a\u2014\u200aCode that makes sense","title":"Learning Javascript"},{"location":"dev/learning-js/#beginner","text":"A beginning Javascript programmer is someone that is new to the Javascript language and possibly programming. This set of resources spans learning what Javascript is and how it works in the browser to fundamental concepts of computer programming, computer science, and software engineering. Its best to have a good handle on the basics of HTML and CSS before learning Javascript. Pro tip: If you don't have a sandbox environment to work out of you can get started quickly with any of these Javascript Sandboxes . Or you can build one .","title":"Beginner"},{"location":"dev/learning-js/#getting-started","text":"What is Javascript? - A great overview of the language and how it works with HTML and CSS. What is Javascript? (Video) ECMAScript aka JavaScript","title":"Getting Started"},{"location":"dev/learning-js/#programming-in-general","text":"Kahn Academy - Computer Programming","title":"Programming in General"},{"location":"dev/learning-js/#language","text":"Javascript (Mozilla) W3 Javascript Tutorial How Javascript Works Code Academy - Intro to JavaScript ($) Google Developers Training Javascript Basics: What is Javascript, really? JavaScript building blocks","title":"Language"},{"location":"dev/learning-js/#language-summaries-cheatsheets","text":"Javascript.com by Pluralsignt - A great quick reference of parts of the language. Javascript Basics (P5.js Wiki Reference) - This is a quick-ish overview of the language and how to use it.","title":"Language Summaries / Cheatsheets"},{"location":"dev/learning-js/#dom","text":"Introduction to the DOM DOM Interfaces JavaScript DOM Tutorial Series (Video Playlist) - by The Net Ninja JavaScript DOM Tutorial #1 - Introduction Javascript DOM Tutorial #2 - Get Element By ID JavaScript DOM Tutorial #3 - Get Elements By Class or Tag JavaScript DOM Tutorial #4 - The Query Selector JavaScript DOM Tutorial #5 - Changing Text & HTML Content","title":"DOM"},{"location":"dev/learning-js/#event-handlers","text":"Global Event Handlers","title":"Event Handlers"},{"location":"dev/learning-js/#books","text":"JavaScript: The Definitive Guide by David Flanagan Professional JavaScript for Web Developers by Nicholas C. Zaka Eloquent Javascript Object-Oriented JavaScript by Stoyan Stefanov and Kumar Chetan Sharma You Don't Know JS - A Github based book series on JavaScript. The Complete JavaScript Handbook","title":"Books"},{"location":"dev/learning-js/#jquery","text":"W3 jQuery Tutorial","title":"JQuery"},{"location":"dev/learning-js/#tutorials","text":"Get Started with Debugging JavaScript in Chrome DevTools Vanilla Javascript by Traversy Media Build A Filterable List With Vanilla JavaScript Javascripting (Nodeschool) - Learn JS / Terminal by playing with a node app. You need to know how to use npm and the terminal to run this. freeCodeCamp - Basic Javascript - 10 hrs of tutorials JavaScript Tutorial by Sololearn Javascript.com by Pluralsignt - Check out these short courses for learning specific topics using JS.","title":"Tutorials"},{"location":"dev/learning-js/#articles","text":"Learn to Code: 13 Tips that Could Save You Years of Effort 10 Priceless Resources for JavaScript Learners A Study Plan To Cure JavaScript Fatigue - Thx Karen !","title":"Articles"},{"location":"dev/learning-js/#js-collections","text":"Micro JS - A website with tons of JS libraries. Some big some small.","title":"JS Collections"},{"location":"dev/learning-js/#intermediate","text":"An intermediate Javascript programmer understands parts of Javascript language of syntax (form) and semantics (meaning) and is interested in learning more about design patterns, best practices, libraries, frameworks, and alternative workflows.","title":"Intermediate"},{"location":"dev/learning-js/#language_1","text":"JS the Right Way JavaScript Design Patterns - Free Udacity Course","title":"Language"},{"location":"dev/learning-js/#regular-expressions","text":"Regular Expressions (Mozilla) W3 Regex Reference","title":"Regular Expressions"},{"location":"dev/learning-js/#tutorials_1","text":"RegexOne Tutorials You Should Learn Regular Expressions","title":"Tutorials"},{"location":"dev/learning-js/#regex-sandboxes","text":"Regex 101 Regex Pal Tester Regulex Regexper","title":"Regex Sandboxes"},{"location":"dev/learning-js/#books_1","text":"JavaScript Patterns by Stoyan Stefanov JavaScript Enlightenment: From Library User to JavaScript Developer by Cody Lindley","title":"Books"},{"location":"dev/learning-js/#data-structures-and-algorithms","text":"Data Structures and Algorithms with JavaScript by Michael McMillan Introduction to Algorithms by Thomas H. Cormen et al Coding Math (Youtube Channel)","title":"Data Structures and Algorithms"},{"location":"dev/learning-js/#package-management","text":"What are the best front-end package managers? - February 2018 Guide to JavaScript frontend package managers - November 2015","title":"Package Management"},{"location":"dev/learning-js/#js-uis","text":"ULI dat.gui guigui","title":"JS UIs"},{"location":"dev/learning-js/#tutorials_2","text":"Understanding JavaScript Bind() Arrow Functions","title":"Tutorials"},{"location":"dev/learning-js/#advanced","text":"An advanced Javascript programmer understands how to utilize Javascript to solve technical and creative challenges by using existing tools and designing custom solutions.","title":"Advanced"},{"location":"dev/learning-js/#language_2","text":"Backbone.js Fundamentals JavaScript Garden How to Learn ES6 (ECMAScript 6) ECMAScript","title":"Language"},{"location":"dev/learning-js/#design-patterns","text":"Learning JavaScript Design Patterns Pro JavaScript Design Patterns: The Essentials of Object-Oriented JavaScript Programming by Dustin Diaz and Ross Harmes Design Patterns: Elements of Reusable Object-Oriented Software by Erich Gamma et al Writing Modular JavaScript With AMD, CommonJS & ES Harmony","title":"Design Patterns"},{"location":"dev/learning-js/#working-with-modules","text":"RequireJS RequireJS's relationship to CommonJS Module Best Practices - Writing JS Modules in Node/CommonJS","title":"Working with Modules"},{"location":"dev/learning-js/#application-development","text":"Electron Muon - Similar to Electron but uses Chromium","title":"Application Development"},{"location":"dev/learning-js/#code-poems","text":"A Functional Poem\u200a\u2014\u200aCode that makes sense","title":"Code Poems"},{"location":"dev/learning-node/","text":"This section contains resources for learning how to work with Node.js. Note this is a living document and is constantly being updated. Some things may come and go over time. Beginner \u00b6 Node.js NPM - Node Package Manager (Installed with Node.js) NVM - A tool for managing multiple versions of Node.js (MacOS Only) nvm-windows - Similar to NVM but for Windows Documentation \u00b6 Node.js Documentation - Your primary reference for the Node.js API Node Modules Node.js URL Module: URL Strings and URL Objects - This has a great diagram showing the URL structure and how to parse it using the Node.js API. This matters for routing a request to the correct destination in your Node server (app). Books \u00b6 The Node Beginner Book Professional Node.js: Building Javascript Based Scalable Software by Pedro Teixera Tutorials \u00b6 Node.js Tutorials \u00b6 Node.js Tutorial in VS Code Nodeschool Workshopper List - These are cool. Short terminal-based interactive tutorials on various topics. Node.js Tutorial - Tutorialspoint tutorials that cover the Node API CSE 398 Node.js Tutorial - Great introductory tutorial using Node API to build up to why it makes sense to eventually use Express (Step 13). Node.js for Beginners npm Tutorials \u00b6 npm Tutorial for Beginners - 2:30 mins npm crash course 1 - 24 mins npm crash course 2 - 42 mins Intermediate \u00b6 Node Frameworks Express Frameworks built on Express KeystoneJS - Node.js CMS & web app platform Templating \u00b6 Pug.js ejs Tutorials \u00b6 MVC \u00b6 How to Build and Structure a Node.js MVC Application - A great tutorial for building a notes board app. This doesn't use Express to build the app, it uses another framework called Hapi.js. Either framework most definitely simplifies the implementation of an app like this. Express Tutorials \u00b6 Express Tutorial - By tutorialspoint Websocket Tutorials \u00b6 Websockets Tutorial - By tutorialspoint Passport.js Tutorials \u00b6 Passport.js - Simple, unobtrusive authentication for Node.js Learn how to handle authentication with Node using Passport.js Easy Node Authentication: Setup and Local Local Authentication Using Passport in Node.js Application Deployment \u00b6 In order to deploy an application on a server out in the world you need to use a host that supports Node.js and how it runs. Node.js apps require a system that allows a Javascript runtime (process) to run all the time using a process management tool like PM2 . This means a \"shared host\" like Bluehost or another service that offers budget shared hosting typically doesn't support running apps like this. Below are some tutorials from hosts that offer these kinds of servers. Another important thing to mention is when you work with hosts like Digital Ocean or Heroku, you typically have to setup and configure the \"server instance\", which means you become the administrator responsible for installing and configuring the operating system (Ubuntu or another form of Linux or Windows) to be a web server. These hosts are providing whats called a \"Virtual Private Server\" aka a VPS with a dedicated IP address which you can think of like a small piece of a much larger server called the \"cloud\". Deploying on Digital Ocean Digital Ocean Tutorial: How To Set Up a Node.js Application for Production on Ubuntu 16.04 Deploying on Heroku Getting Started on Heroku with Node.js - Follow this to go from having no Node app to deploying a Node app. Deploying Node.js Apps on Heroku - This includes all the steps you need to follow to deploy an existing application. Advanced \u00b6 Tutorials \u00b6 Building Command Line Applications \u00b6 Creating Your First Node.js Command-line Application Commander.js Creating Modules (aka npm Packages) \u00b6 Creating Public & Private Node Modules How to Create Node.js Modules Build a Static Site Generator \u00b6 Modules \u00b6 Requiring modules in Node.js: Everything you need to know nodemon Awesome Lists \u00b6 awesome-nodejs","title":"Learning Node.js"},{"location":"dev/learning-node/#beginner","text":"Node.js NPM - Node Package Manager (Installed with Node.js) NVM - A tool for managing multiple versions of Node.js (MacOS Only) nvm-windows - Similar to NVM but for Windows","title":"Beginner"},{"location":"dev/learning-node/#documentation","text":"Node.js Documentation - Your primary reference for the Node.js API Node Modules Node.js URL Module: URL Strings and URL Objects - This has a great diagram showing the URL structure and how to parse it using the Node.js API. This matters for routing a request to the correct destination in your Node server (app).","title":"Documentation"},{"location":"dev/learning-node/#books","text":"The Node Beginner Book Professional Node.js: Building Javascript Based Scalable Software by Pedro Teixera","title":"Books"},{"location":"dev/learning-node/#tutorials","text":"","title":"Tutorials"},{"location":"dev/learning-node/#nodejs-tutorials","text":"Node.js Tutorial in VS Code Nodeschool Workshopper List - These are cool. Short terminal-based interactive tutorials on various topics. Node.js Tutorial - Tutorialspoint tutorials that cover the Node API CSE 398 Node.js Tutorial - Great introductory tutorial using Node API to build up to why it makes sense to eventually use Express (Step 13). Node.js for Beginners","title":"Node.js Tutorials"},{"location":"dev/learning-node/#npm-tutorials","text":"npm Tutorial for Beginners - 2:30 mins npm crash course 1 - 24 mins npm crash course 2 - 42 mins","title":"npm Tutorials"},{"location":"dev/learning-node/#intermediate","text":"Node Frameworks Express Frameworks built on Express KeystoneJS - Node.js CMS & web app platform","title":"Intermediate"},{"location":"dev/learning-node/#templating","text":"Pug.js ejs","title":"Templating"},{"location":"dev/learning-node/#tutorials_1","text":"","title":"Tutorials"},{"location":"dev/learning-node/#mvc","text":"How to Build and Structure a Node.js MVC Application - A great tutorial for building a notes board app. This doesn't use Express to build the app, it uses another framework called Hapi.js. Either framework most definitely simplifies the implementation of an app like this.","title":"MVC"},{"location":"dev/learning-node/#express-tutorials","text":"Express Tutorial - By tutorialspoint","title":"Express Tutorials"},{"location":"dev/learning-node/#websocket-tutorials","text":"Websockets Tutorial - By tutorialspoint","title":"Websocket Tutorials"},{"location":"dev/learning-node/#passportjs-tutorials","text":"Passport.js - Simple, unobtrusive authentication for Node.js Learn how to handle authentication with Node using Passport.js Easy Node Authentication: Setup and Local Local Authentication Using Passport in Node.js","title":"Passport.js Tutorials"},{"location":"dev/learning-node/#application-deployment","text":"In order to deploy an application on a server out in the world you need to use a host that supports Node.js and how it runs. Node.js apps require a system that allows a Javascript runtime (process) to run all the time using a process management tool like PM2 . This means a \"shared host\" like Bluehost or another service that offers budget shared hosting typically doesn't support running apps like this. Below are some tutorials from hosts that offer these kinds of servers. Another important thing to mention is when you work with hosts like Digital Ocean or Heroku, you typically have to setup and configure the \"server instance\", which means you become the administrator responsible for installing and configuring the operating system (Ubuntu or another form of Linux or Windows) to be a web server. These hosts are providing whats called a \"Virtual Private Server\" aka a VPS with a dedicated IP address which you can think of like a small piece of a much larger server called the \"cloud\". Deploying on Digital Ocean Digital Ocean Tutorial: How To Set Up a Node.js Application for Production on Ubuntu 16.04 Deploying on Heroku Getting Started on Heroku with Node.js - Follow this to go from having no Node app to deploying a Node app. Deploying Node.js Apps on Heroku - This includes all the steps you need to follow to deploy an existing application.","title":"Application Deployment"},{"location":"dev/learning-node/#advanced","text":"","title":"Advanced"},{"location":"dev/learning-node/#tutorials_2","text":"","title":"Tutorials"},{"location":"dev/learning-node/#building-command-line-applications","text":"Creating Your First Node.js Command-line Application Commander.js","title":"Building Command Line Applications"},{"location":"dev/learning-node/#creating-modules-aka-npm-packages","text":"Creating Public & Private Node Modules How to Create Node.js Modules","title":"Creating Modules (aka npm Packages)"},{"location":"dev/learning-node/#build-a-static-site-generator","text":"","title":"Build a Static Site Generator"},{"location":"dev/learning-node/#modules","text":"Requiring modules in Node.js: Everything you need to know nodemon","title":"Modules"},{"location":"dev/learning-node/#awesome-lists","text":"awesome-nodejs","title":"Awesome Lists"},{"location":"dev/learning-p5js/","text":"This section contains resources for learning how to use Javascript framework p5.js . Note this is a living document and is constantly being updated. Some things may come and go over time. Beginner \u00b6 p5.js p5.js web editor A free-to-use classrooms system for p5.js Javascript Basics (P5.js Wiki Reference) Tutorials \u00b6 TBD Courses \u00b6 Introduction to Programming for the Visual Arts with p5.js (Kadenze) Projects \u00b6 TBD","title":"Learning p5.js"},{"location":"dev/learning-p5js/#beginner","text":"p5.js p5.js web editor A free-to-use classrooms system for p5.js Javascript Basics (P5.js Wiki Reference)","title":"Beginner"},{"location":"dev/learning-p5js/#tutorials","text":"TBD","title":"Tutorials"},{"location":"dev/learning-p5js/#courses","text":"Introduction to Programming for the Visual Arts with p5.js (Kadenze)","title":"Courses"},{"location":"dev/learning-p5js/#projects","text":"TBD","title":"Projects"},{"location":"dev/learning-react/","text":"React https://reactjs.org/ React Native http://facebook.github.io/react-native/","title":"Learning react"},{"location":"dev/learning-terminal/","text":"This section contains resources for learning how to use the MacOS Terminal and related Linux Terminals. Note this is a living document and is constantly being updated. Some things may come and go over time. Beginner \u00b6 To see hidden files on your system (Open Terminal and type): To show all files: defaults write com.apple.finder AppleShowAllFiles YES To hide all files: defaults write com.apple.finder AppleShowAllFiles NO Tips: You can drag and drop a folder from the Finder into the Terminal and see the path. This makes it easy to navigate (via cd ) to a folder without typing the whole path in. You want to be aware of file paths and using spaces in file names and directories. Its much easier to always use no spaces. See: Spaces in file and directory names for more info. Command Line \u00b6 Getting to Know the Command Line Codeacademy: Learn the Command Line Quick Cheat Sheet \u00b6 Ctrl + U : Clear the current line Ctrl + A ---> Ctrl + K : Move to start of line and clear line Ctrl + C : Cancel the current command Ctrl + Y : Recall the deleted line Ctrl + A : Move to the beginning of the line UNIX / Linux / Terminal Cheat Sheets \u00b6 Command Line Cheat Sheet by git-tower - This one is great! MacOS/Linux/Unix Command Line Cheat Sheet List of Command Line Commands An A-Z Index of the Apple macOS command line (OS X) Basic UNIX Commands UNIX / Linux Cheat Sheet Bash Shell \u00b6 What is the bash shell? bash guide for beginners bash startup files (aka \"dotfiles\" - .bash_profile, .profile, etc) An introduction to Dotfiles: how to take control of your development environment How to make your Dotfile management a painless affair Getting Started with BASH Customizations \u00b6 RJ's Bash Profile Nathaniel Landau's Bash Profile Awesome macOS Command Line - Huge list of macOS actions via command line. Bash Scripting \u00b6 What is a Bash Script? bash scripting cheatsheet Logical, arithmetical and comparison operators pure bash bible - A collection of pure bash alternatives to external processes. Nathaniel Landau's Bash Scripting Utilities Aliases \u00b6 An Introduction to Useful Bash Aliases and Functions Bash Tweaks (UI, Color, etc) \u00b6 Tutorial: Customize Your Terminal OG Style \u2014 No Libraries or Plugins! FLOZz' MISC \u00bb bash:tip_colors_and_formatting How to Customize the Command Prompt Files \u00b6 Text Editing with vi (vim) \u00b6 VI: What is VI? Ryans tutorials vi tutorial Cheat Sheets \u00b6 Ryans tutorials vi cheat sheet Lagmonster vi cheat sheet Lagmonster advanced vi cheat sheet Permissions \u00b6 chmod Calculator Encoding \u00b6 ASCII / Unicode Table chardet character encoding detector How to auto detect text file encoding? Workflow Enhancements \u00b6 Display directory structure as tree Mac-CLI Intermediate \u00b6 Terminal Emulators \u00b6 iTerm2 Hyper Terminal Multiplexers \u00b6 screen \u00b6 Linux screen Tutorial How to Kill Screen tmux \u00b6 Getting Started A Gentle Introduction to tmux A Tmux Primer A Quick and Easy Guide to tmux The Tao of tmux - Go deep with this ebook. tmux shortcuts & cheatsheet Customizing Tmux Oh My Tmux! My pretty + versatile tmux configuration that just works (imho the best tmux configuration) Making tmux Pretty and Usable - A Guide to Customizing your tmux.conf Tmux Configuration The Definitive Guide to Customizing the Tmux Status Line","title":"Learning Terminal"},{"location":"dev/learning-terminal/#beginner","text":"To see hidden files on your system (Open Terminal and type): To show all files: defaults write com.apple.finder AppleShowAllFiles YES To hide all files: defaults write com.apple.finder AppleShowAllFiles NO Tips: You can drag and drop a folder from the Finder into the Terminal and see the path. This makes it easy to navigate (via cd ) to a folder without typing the whole path in. You want to be aware of file paths and using spaces in file names and directories. Its much easier to always use no spaces. See: Spaces in file and directory names for more info.","title":"Beginner"},{"location":"dev/learning-terminal/#command-line","text":"Getting to Know the Command Line Codeacademy: Learn the Command Line","title":"Command Line"},{"location":"dev/learning-terminal/#quick-cheat-sheet","text":"Ctrl + U : Clear the current line Ctrl + A ---> Ctrl + K : Move to start of line and clear line Ctrl + C : Cancel the current command Ctrl + Y : Recall the deleted line Ctrl + A : Move to the beginning of the line","title":"Quick Cheat Sheet"},{"location":"dev/learning-terminal/#unix-linux-terminal-cheat-sheets","text":"Command Line Cheat Sheet by git-tower - This one is great! MacOS/Linux/Unix Command Line Cheat Sheet List of Command Line Commands An A-Z Index of the Apple macOS command line (OS X) Basic UNIX Commands UNIX / Linux Cheat Sheet","title":"UNIX / Linux / Terminal Cheat Sheets"},{"location":"dev/learning-terminal/#bash-shell","text":"What is the bash shell? bash guide for beginners bash startup files (aka \"dotfiles\" - .bash_profile, .profile, etc) An introduction to Dotfiles: how to take control of your development environment How to make your Dotfile management a painless affair Getting Started with BASH","title":"Bash Shell"},{"location":"dev/learning-terminal/#customizations","text":"RJ's Bash Profile Nathaniel Landau's Bash Profile Awesome macOS Command Line - Huge list of macOS actions via command line.","title":"Customizations"},{"location":"dev/learning-terminal/#bash-scripting","text":"What is a Bash Script? bash scripting cheatsheet Logical, arithmetical and comparison operators pure bash bible - A collection of pure bash alternatives to external processes. Nathaniel Landau's Bash Scripting Utilities","title":"Bash Scripting"},{"location":"dev/learning-terminal/#aliases","text":"An Introduction to Useful Bash Aliases and Functions","title":"Aliases"},{"location":"dev/learning-terminal/#bash-tweaks-ui-color-etc","text":"Tutorial: Customize Your Terminal OG Style \u2014 No Libraries or Plugins! FLOZz' MISC \u00bb bash:tip_colors_and_formatting How to Customize the Command Prompt","title":"Bash Tweaks (UI, Color, etc)"},{"location":"dev/learning-terminal/#files","text":"","title":"Files"},{"location":"dev/learning-terminal/#text-editing-with-vi-vim","text":"VI: What is VI? Ryans tutorials vi tutorial","title":"Text Editing with vi (vim)"},{"location":"dev/learning-terminal/#cheat-sheets","text":"Ryans tutorials vi cheat sheet Lagmonster vi cheat sheet Lagmonster advanced vi cheat sheet","title":"Cheat Sheets"},{"location":"dev/learning-terminal/#permissions","text":"chmod Calculator","title":"Permissions"},{"location":"dev/learning-terminal/#encoding","text":"ASCII / Unicode Table chardet character encoding detector How to auto detect text file encoding?","title":"Encoding"},{"location":"dev/learning-terminal/#workflow-enhancements","text":"Display directory structure as tree Mac-CLI","title":"Workflow Enhancements"},{"location":"dev/learning-terminal/#intermediate","text":"","title":"Intermediate"},{"location":"dev/learning-terminal/#terminal-emulators","text":"iTerm2 Hyper","title":"Terminal Emulators"},{"location":"dev/learning-terminal/#terminal-multiplexers","text":"","title":"Terminal Multiplexers"},{"location":"dev/learning-terminal/#screen","text":"Linux screen Tutorial How to Kill Screen","title":"screen"},{"location":"dev/learning-terminal/#tmux","text":"Getting Started A Gentle Introduction to tmux A Tmux Primer A Quick and Easy Guide to tmux The Tao of tmux - Go deep with this ebook. tmux shortcuts & cheatsheet Customizing Tmux Oh My Tmux! My pretty + versatile tmux configuration that just works (imho the best tmux configuration) Making tmux Pretty and Usable - A Guide to Customizing your tmux.conf Tmux Configuration The Definitive Guide to Customizing the Tmux Status Line","title":"tmux"},{"location":"dev/learning-threejs/","text":"This section contains resources for learning how to use Javascript framework three.js . Note this is a living document and is constantly being updated. Some things may come and go over time. Beginner \u00b6 three.js WebGL , Does my browser support WebGL? , WebGL Report Tutorials \u00b6 Learning Three.js Workflow: Animation from Blender to three.js Projects \u00b6 TBD","title":"Learning three.js"},{"location":"dev/learning-threejs/#beginner","text":"three.js WebGL , Does my browser support WebGL? , WebGL Report","title":"Beginner"},{"location":"dev/learning-threejs/#tutorials","text":"Learning Three.js Workflow: Animation from Blender to three.js","title":"Tutorials"},{"location":"dev/learning-threejs/#projects","text":"TBD","title":"Projects"},{"location":"dev/learning-webvr/","text":"This section contains resources for learning how to work with WebVR. Note this is a living document and is constantly being updated. Some things may come and go over time. Beginner \u00b6 WebVR Rocks - WebVR is a JavaScript API for creating immersive 3D, Virtual Reality experiences in your browser.This site shows browser compatibility with different VR hardware. WebVR Info - Another site with examples and information about WebVR. WebVR W3 Spec - This will eventually become WebXR GLTF Frameworks \u00b6 A-Frame WebVR Resources - A-Frame Extras, etc Projects \u00b6 Google WebVR Experiments http://ottifox.com/ Hologram Repositories \u00b6 Sketchfab - 3D model repository Utilities \u00b6 WebVR Assets - Unity to WebVR (Mozilla) UnityAFrameExporter - Not maintained UnitySceneWebExporter - Not maintained 360 Panorama Tools \u00b6 Street View Panorama Street View Download 360","title":"Learning WebVR"},{"location":"dev/learning-webvr/#beginner","text":"WebVR Rocks - WebVR is a JavaScript API for creating immersive 3D, Virtual Reality experiences in your browser.This site shows browser compatibility with different VR hardware. WebVR Info - Another site with examples and information about WebVR. WebVR W3 Spec - This will eventually become WebXR GLTF","title":"Beginner"},{"location":"dev/learning-webvr/#frameworks","text":"A-Frame WebVR Resources - A-Frame Extras, etc","title":"Frameworks"},{"location":"dev/learning-webvr/#projects","text":"Google WebVR Experiments http://ottifox.com/ Hologram","title":"Projects"},{"location":"dev/learning-webvr/#repositories","text":"Sketchfab - 3D model repository","title":"Repositories"},{"location":"dev/learning-webvr/#utilities","text":"WebVR Assets - Unity to WebVR (Mozilla) UnityAFrameExporter - Not maintained UnitySceneWebExporter - Not maintained","title":"Utilities"},{"location":"dev/learning-webvr/#360-panorama-tools","text":"Street View Panorama Street View Download 360","title":"360 Panorama Tools"},{"location":"fab/","text":"Mesh Tools \u00b6 Meshlab Meshmixer Netfabb 3D File Viewing \u00b6 Sketchfab 3D File Sharing \u00b6 Thingiverse Pinshape Additive(+) \u00b6 3D Printing \u00b6 Ultimaker 3D Printer , Cura (Slicer) 3D Printing Services \u00b6 Shapeways Sculpteo i.materialise 3D Hubs Fictiv Ponoko Voodoo Manufacturing Subtractive(-) \u00b6 CNC Milling \u00b6 Bantam Desktop CNC Mill - Formerly Othermill Bantam Software - Formerly Otherplan","title":"Tools"},{"location":"fab/#mesh-tools","text":"Meshlab Meshmixer Netfabb","title":"Mesh Tools"},{"location":"fab/#3d-file-viewing","text":"Sketchfab","title":"3D File Viewing"},{"location":"fab/#3d-file-sharing","text":"Thingiverse Pinshape","title":"3D File Sharing"},{"location":"fab/#additive","text":"","title":"Additive(+)"},{"location":"fab/#3d-printing","text":"Ultimaker 3D Printer , Cura (Slicer)","title":"3D Printing"},{"location":"fab/#3d-printing-services","text":"Shapeways Sculpteo i.materialise 3D Hubs Fictiv Ponoko Voodoo Manufacturing","title":"3D Printing Services"},{"location":"fab/#subtractive-","text":"","title":"Subtractive(-)"},{"location":"fab/#cnc-milling","text":"Bantam Desktop CNC Mill - Formerly Othermill Bantam Software - Formerly Otherplan","title":"CNC Milling"},{"location":"fab/bantam-cnc-mill/","text":"Bantam CNC Mill \u00b6 Start Here \u00b6 Bantam Mill Support Must Read \u00b6 Getting Started Projects Basic Project Workflow Setting Up Your Material Inserting and Locating a Tool Materials Safety Read Next \u00b6 Speeds and Feeds Fixturing \u00b6 Double Sided Tape - Works great with flat, thin material like circuit boards, thin metal, or plastic pieces. Hot Glue - A bead of hot glue around the edges of larger or rougher materials \u2014 like wood, plastic, and machining wax \u2014 works great. T-Slots - These little slots in the bed can be used to hold material to the bed. For Advanced use. File Types \u00b6 PCB - brd, gtl, gbr, cmp GCODE - nc, gcode, tap SVG Bantam Plan Files - btm Support Documentation \u00b6 File Support G-Code Reference","title":"Bantam CNC Mill"},{"location":"fab/bantam-cnc-mill/#bantam-cnc-mill","text":"","title":"Bantam CNC Mill"},{"location":"fab/bantam-cnc-mill/#start-here","text":"Bantam Mill Support","title":"Start Here"},{"location":"fab/bantam-cnc-mill/#must-read","text":"Getting Started Projects Basic Project Workflow Setting Up Your Material Inserting and Locating a Tool Materials Safety","title":"Must Read"},{"location":"fab/bantam-cnc-mill/#read-next","text":"Speeds and Feeds","title":"Read Next"},{"location":"fab/bantam-cnc-mill/#fixturing","text":"Double Sided Tape - Works great with flat, thin material like circuit boards, thin metal, or plastic pieces. Hot Glue - A bead of hot glue around the edges of larger or rougher materials \u2014 like wood, plastic, and machining wax \u2014 works great. T-Slots - These little slots in the bed can be used to hold material to the bed. For Advanced use.","title":"Fixturing"},{"location":"fab/bantam-cnc-mill/#file-types","text":"PCB - brd, gtl, gbr, cmp GCODE - nc, gcode, tap SVG Bantam Plan Files - btm","title":"File Types"},{"location":"fab/bantam-cnc-mill/#support-documentation","text":"File Support G-Code Reference","title":"Support Documentation"},{"location":"fab/parts/","text":"The ultimate material / parts / suppliers / fab list. http://molded-urethane.com http://air-filters.org http://blowmoldedplastic.com http://customcarryingcases.net http://conveyor-systems.biz http://floor-gratings.com http://foamfabricating.net http://heating-elements.com http://libertygodwin.com http://hawkrents.com http://linear-bearings.net http://load-cells.org http://o-rings.org http://liquidchillers.com http://rollformedparts.com http://rotationallymoldedplastics.com http://paper-tubes.net http://steelservicecenters.com http://sewing-contractors.com http://screw-conveyors.com http://tubefabricatingservices.com http://ball-screws.net http://hingemanufacturers.org http://filteringsystems.com http://rubber-rolls.com http://aluminum-extrusions.net http://ball-valves.net http://bondedtometalrubber.com http://centrifugalpumps.biz http://cnc-machining.biz http://dipmoldedplastics.com http://fractionalhorsepowermotors.com http://hydraulicseals.net http://leak-detectors.net http://liquid-filters.net http://linearslides.net http://plastic-tubing.biz http://plasticfabricator.com http://strengthofnature.com http://steel-plastic-fibre-drums.com http://electronicconnectors.net http://hydraulic-pumps.org http://greatlakeseng.com http://laser-cutting-services.com http://scalemanufacturers.com http://thepieriswedding.com http://strainsense.com http://songlobal.com","title":"Parts"},{"location":"fab/ultimaker-3d-printer/","text":"3D Printing \u00b6 Ultimaker 3","title":"Ultimaker 3D Printer"},{"location":"fab/ultimaker-3d-printer/#3d-printing","text":"Ultimaker 3","title":"3D Printing"},{"location":"fab/vinyl-cutter/","text":"Roland Vinyl Cutter \u00b6 Getting Started \u00b6 Download and install the Illustrator plugin (You only need to do this once) Choose English > CAMM-1 > GS-24 Download the Users Manual Read through \"Simple! Basic Cutting\" section of the manual Process Make a 2D design file in Illustrator Configure print settings in Window > Extensions > Roland CutStudio Select GX-24 Load material into machine Outline text/shapes Print/Cut!","title":"Roland Vinyl Cutter"},{"location":"fab/vinyl-cutter/#roland-vinyl-cutter","text":"","title":"Roland Vinyl Cutter"},{"location":"fab/vinyl-cutter/#getting-started","text":"Download and install the Illustrator plugin (You only need to do this once) Choose English > CAMM-1 > GS-24 Download the Users Manual Read through \"Simple! Basic Cutting\" section of the manual Process Make a 2D design file in Illustrator Configure print settings in Window > Extensions > Roland CutStudio Select GX-24 Load material into machine Outline text/shapes Print/Cut!","title":"Getting Started"},{"location":"pc/","text":"Parts and Supplies \u00b6 Sparkfun Adafruit Digikey Mouser Arrow Tools for Prototyping Electronics \u00b6 Multimeter - Measuring Voltage, Current, Resistance. Try to do this with the Arduino and its pins. How to use a multimeter Soldering Soldering Tutorial for Beginners: Five Easy Steps (Video) How to Solder (Instructables) Wires Working with wire How to Strip a wire","title":"Tools & Devices"},{"location":"pc/#parts-and-supplies","text":"Sparkfun Adafruit Digikey Mouser Arrow","title":"Parts and Supplies"},{"location":"pc/#tools-for-prototyping-electronics","text":"Multimeter - Measuring Voltage, Current, Resistance. Try to do this with the Arduino and its pins. How to use a multimeter Soldering Soldering Tutorial for Beginners: Five Easy Steps (Video) How to Solder (Instructables) Wires Working with wire How to Strip a wire","title":"Tools for Prototyping Electronics"},{"location":"pc/learning-arduino/","text":"This section contains resources for learning how to work with Arduino microcontrollers. Note this is a living document and is constantly being updated. Some things may come and go over time. Getting Started \u00b6 Arduino - What IS it? - Great overview What is an Arduino? A Beginners Guide to Arduino Massimo Banzi: How Arduino is open-sourcing imagination (TED Talk) Arduino IDE Arduino Language Reference Arduino Hardware Arduino Uno Specs Arduino 101 Serial Monitor (for monitoring board input and output) - Tools > Serial Monitor There are many different shapes and sizes of Arduino's available, how do you choose hardware for a project? Inputs (Sensors) -> Behavior (Software) -> Outputs (Action) Arduino Prototyping Techniques Circuit Simulators \u00b6 Autodesk Tinkercad Circuits / Arduino UNO w/ TinkerCAD Circuits Tutorial - Youtube playlist of how-to videos. Arduino Boards \u00b6 Arduino UNO Sparkfun Arduino Uno Adafruit Arduino Uno Sparkfun Redboard Arduino Pro Mini Arduino Mega Sparkfun ESP32 Thing - Good for WiFi enabled projects! ESP32 ESP8266 Based Boards Sparkfun ESP8266 Thing NodeMCU (ESP8266) ( Amazon ), A Beginner's Guide to the ESP8266 Arduino Products \u00b6 Arduino Buying Guide by Sparkfun Adafruit Arduino Products Sparkfun Arduino Boards Sparkfun Arduino Products Examples / Tutorials \u00b6 Built In Examples Sparkfun Arduino Tutorials Adafruit Arduino Learning System Projects \u00b6 Instructables 20 Unbelievable Arduino Projects Arduino Playground 20 Projects to Celebrate Arduino Day Hackster.io Arduino Projects DIY Hacking Arduino Arduino Projects on Pintrest Arduino Project Hub 20 Arduino Projects with DIY Instructions - A great set of tutorials for building things with Arduino.","title":"Learning Arduino"},{"location":"pc/learning-arduino/#getting-started","text":"Arduino - What IS it? - Great overview What is an Arduino? A Beginners Guide to Arduino Massimo Banzi: How Arduino is open-sourcing imagination (TED Talk) Arduino IDE Arduino Language Reference Arduino Hardware Arduino Uno Specs Arduino 101 Serial Monitor (for monitoring board input and output) - Tools > Serial Monitor There are many different shapes and sizes of Arduino's available, how do you choose hardware for a project? Inputs (Sensors) -> Behavior (Software) -> Outputs (Action) Arduino Prototyping Techniques","title":"Getting Started"},{"location":"pc/learning-arduino/#circuit-simulators","text":"Autodesk Tinkercad Circuits / Arduino UNO w/ TinkerCAD Circuits Tutorial - Youtube playlist of how-to videos.","title":"Circuit Simulators"},{"location":"pc/learning-arduino/#arduino-boards","text":"Arduino UNO Sparkfun Arduino Uno Adafruit Arduino Uno Sparkfun Redboard Arduino Pro Mini Arduino Mega Sparkfun ESP32 Thing - Good for WiFi enabled projects! ESP32 ESP8266 Based Boards Sparkfun ESP8266 Thing NodeMCU (ESP8266) ( Amazon ), A Beginner's Guide to the ESP8266","title":"Arduino Boards"},{"location":"pc/learning-arduino/#arduino-products","text":"Arduino Buying Guide by Sparkfun Adafruit Arduino Products Sparkfun Arduino Boards Sparkfun Arduino Products","title":"Arduino Products"},{"location":"pc/learning-arduino/#examples-tutorials","text":"Built In Examples Sparkfun Arduino Tutorials Adafruit Arduino Learning System","title":"Examples / Tutorials"},{"location":"pc/learning-arduino/#projects","text":"Instructables 20 Unbelievable Arduino Projects Arduino Playground 20 Projects to Celebrate Arduino Day Hackster.io Arduino Projects DIY Hacking Arduino Arduino Projects on Pintrest Arduino Project Hub 20 Arduino Projects with DIY Instructions - A great set of tutorials for building things with Arduino.","title":"Projects"},{"location":"pc/learning-eagle/","text":"This section contains resources for learning how to work with Eagle CAD. Note this is a living document and is constantly being updated. Some things may come and go over time. Beginner \u00b6 Tutorials \u00b6 Sparkfun Using EAGLE: Schematic Sparkfun Using EAGLE: Board Layout Bantam Mill: Intro to Creating Circuits with EAGLE From the Archives: Convert Gerber Files to G-Code with FlatCAM","title":"Learning Eagle (CAD)"},{"location":"pc/learning-eagle/#beginner","text":"","title":"Beginner"},{"location":"pc/learning-eagle/#tutorials","text":"Sparkfun Using EAGLE: Schematic Sparkfun Using EAGLE: Board Layout Bantam Mill: Intro to Creating Circuits with EAGLE From the Archives: Convert Gerber Files to G-Code with FlatCAM","title":"Tutorials"},{"location":"pc/learning-electronics/","text":"This section contains resources for learning the basics of electronics and tools used for working with electronics. Note this is a living document and is constantly being updated. Some things may come and go over time. Basic Electronics \u00b6 What is Electricity? Electricity Explained (Youtube) Sparkfun - Where Do I Start? Ohms Law: Voltage, Current, Resistance, Power Analog vs Digital Series and Parallel Circuits Resistors LEDS ADCs and DACs How to Power a Project","title":"Learning Electronics"},{"location":"pc/learning-electronics/#basic-electronics","text":"What is Electricity? Electricity Explained (Youtube) Sparkfun - Where Do I Start? Ohms Law: Voltage, Current, Resistance, Power Analog vs Digital Series and Parallel Circuits Resistors LEDS ADCs and DACs How to Power a Project","title":"Basic Electronics"},{"location":"pc/learning-rpi/","text":"This section contains resources for learning how to work with Raspberry Pi's. Note this is a living document and is constantly being updated. Some things may come and go over time. Beginner \u00b6 Raspberry Pi Foundation Raspberry Pi Downloads Raspberry Pi Setup Raspberry Pi Help Getting Started \u00b6 I recommend everyone purchase their own Raspberry Pi device and 16 or 32GB MicroSD card(s) . We do have a few Raspberry Pi boards in the shop but are low on MicroSD cards. We have plenty of Arduino boards to use so no need to purchase one unless you want to own one. You can pick up a Raspberry Pi 3 on Amazon or Microcenter (Retail Store in Denver). If you want a more complete starter kit you can find similar systems on Amazon, Sparkfun , and other online retailers. Packages with more components will typically cost more. Note that the Raspberry Pi 3 B+ was just released (on Pi Day 3/14/2018) and it costs a bit more than its predecessor (3 Model B). It doesn't matter if you have this new version or the slightly older version. Typical Raspberry Pi Setup Raspberry Pi 3 ~ $35 16, 32, or 64 GB MicroSD Card (16 GB is a good size to start with) ~ $10 for 16 GB HDMI Cable (To plug in display) ~ $6 USB Keyboard ~ $5-15 Est Total: $66 Terminal / Command Line Learning Terminal ssh, vi, scp (Transferring Data to/from Raspberry Pi's) Raspberry Pi 3 Model B / Amazon Raspberry Pi 3 Model B+ / Amazon Raspberry Pi A+","title":"Learning Raspberry Pi"},{"location":"pc/learning-rpi/#beginner","text":"Raspberry Pi Foundation Raspberry Pi Downloads Raspberry Pi Setup Raspberry Pi Help","title":"Beginner"},{"location":"pc/learning-rpi/#getting-started","text":"I recommend everyone purchase their own Raspberry Pi device and 16 or 32GB MicroSD card(s) . We do have a few Raspberry Pi boards in the shop but are low on MicroSD cards. We have plenty of Arduino boards to use so no need to purchase one unless you want to own one. You can pick up a Raspberry Pi 3 on Amazon or Microcenter (Retail Store in Denver). If you want a more complete starter kit you can find similar systems on Amazon, Sparkfun , and other online retailers. Packages with more components will typically cost more. Note that the Raspberry Pi 3 B+ was just released (on Pi Day 3/14/2018) and it costs a bit more than its predecessor (3 Model B). It doesn't matter if you have this new version or the slightly older version. Typical Raspberry Pi Setup Raspberry Pi 3 ~ $35 16, 32, or 64 GB MicroSD Card (16 GB is a good size to start with) ~ $10 for 16 GB HDMI Cable (To plug in display) ~ $6 USB Keyboard ~ $5-15 Est Total: $66 Terminal / Command Line Learning Terminal ssh, vi, scp (Transferring Data to/from Raspberry Pi's) Raspberry Pi 3 Model B / Amazon Raspberry Pi 3 Model B+ / Amazon Raspberry Pi A+","title":"Getting Started"},{"location":"xr/","text":"XR \u00b6 Platforms \u00b6 HTC Vive Vive Developer Vive Wave - Developer Portal for China Oculus Rift Google Daydream Game Engines \u00b6 Unity Unreal Reality Capture \u00b6 Structure Sensor 3D Scanner Autodesk Remake","title":"Tools"},{"location":"xr/#xr","text":"","title":"XR"},{"location":"xr/#platforms","text":"HTC Vive Vive Developer Vive Wave - Developer Portal for China Oculus Rift Google Daydream","title":"Platforms"},{"location":"xr/#game-engines","text":"Unity Unreal","title":"Game Engines"},{"location":"xr/#reality-capture","text":"Structure Sensor 3D Scanner Autodesk Remake","title":"Reality Capture"},{"location":"xr/learning-unity/","text":"This section contains resources for learning how to work with Unity3D , a game engine for building immersive experiences, games, and more. Note this is a living document and is constantly being updated. Some things may come and go over time. Beginner \u00b6 Development Tools \u00b6 Unity Visual Studio HTC Vive Unity Basics \u00b6 Unity Interface Navigation Hierarchy Windows - Scene, Game Console Inspector Custom Layouts Tools - QUERTY Project / File Organization Assets Folder If you delete it in Unity it deletes it from the folder. Careful. .meta files generated by Unity. They need to go with the source file if you move it in the explorer (windows) or finder (MacOS). Make subdirectories to keep it organized Ex. Scenes, Scripts, Models, Textures, Prefabs, Physical Materials, Materials Adding Objects to a Scene Manipulating Objects Inspecting Objects Nesting Objects - Parents and Children Working with Game Objects Adding Components Rigid Body Game Play Init Objects, Compile Scripts, etc Changing parameters in Unity before and during gameplay Importing Assets Import your own assets (from CAD package - Rhino, Fusion, Maya, Blender, etc) Import assets from Asset store Import assets you find on the web Intro to scripting Scripting...What is scripting? What's in a script? Monodevelop and Visual Studio Make a GameObject Make a new script and add it as a Component to your new GameObject Print to the console from your script Debug.Log(\"Hello World!!\"); Unity + SteamVR \u00b6 The SteamVR Plugin is an easy way to integrate VR functionality into Unity. It's recommended to import the Unity package via Asset store within Unity. Note that SteamVR won't work unless there is VR capable hardware connected (ie. HTC VIVE) and you are running the Unity project on a Windows 10 machine. Required Software Unity 2018 and up - Installed via Unity Hub. SteamVR Runtime 1.2.10 - Installed via Steam. SteamVR Plugin 2.2.0 (Last Update: Jan 30, 2019) Github Docs Unity Asset Store OpenVR - SteamVR is using OpenVR behind the scenes to communicate with the SteamVR Runtime. The Wiki for OpenVR talks about more of the underlying API. You don't need to download anything else. Build a Unity project and add the SteamVR plugin Make a new Unity project. Name it \"MySteamVRProject.\" Import plugin SteamVR from asset store Search for SteamVR and click Import. Click Import when prompted. A dialog comes up that shows what files will be included.It may take a moment to include everything in the package. Click Accept All when prompted with the recommended project settings. You will see a confirmation that says \u201cYou have made the right choice\u201d. Click Ok. Now you should see the SteamVR folder under Assets. Disable or remove the default Main Camera in the Inspector Keep the included Directional Light or add a Point Light and disable any unused lights. Add a Plane and Cube to the scene Move the Cube up in the Z direction by 1 unit. Add the Player prefab found under SteamVR/InteractionSystem/Core/Prefabs. This includes the camera and controller objects. Generate the action.js file by navigating to Unity menu Window > SteamVR Input. Click Yes when prompted to save a copy of the example json files. Click Save and Generate on the SteamVR Input dialog. Once that\u2019s done there will be an example scene file in Assets/SteamVR/InteractionSystem/Samples/Interactions_Example.unity. Explore this scene or go back to the default SampleScene file you started with. Start adding other objects into the scene. Hit play and put on the VIVE References Player How to Add Teleportation Create an empty GameObject Locate and add the Teleporting prefab found under SteamVR/InteractionSystem/Teleport/Prefabs. 3. This is the primary object for managing teleportation functionality. Add one or more TeleportPoint game objects found under SteamVR/InteractionSystem/Teleport/Prefabs. These should be places at specific locations you would like to teleport to. Add one or more Teleport Areas Create a Plane and adjust the size and location. Rename the game object to TeleportArea Position the plane object 0.05 units in the Y direction so it\u2019s just above the ground plane. Add the Teleport Area component Hit play and put on the VIVE References Getting Started with the Interaction System Teleport TeleportPoint TeleportArea How to Add Object Interaction (Pickup & Throw) Add a Cube GameObject to the scene Add the Interactable component to enable interaction features such as highlighting. Add the Throwable component to be able to pick up and throw the object. References Getting Started with the Interaction System Interactable Throwable Intermediate \u00b6 C# Scripting \u00b6 Unity Scripting References Scripting Manual Scripting API Scripting Tutorials Execution Order of Event Functions Unity Scripting Tutorials Conventions and Syntax Data Types Variables and Functions Vector Maths If Statements Loops Enabling and Disabling Components Activating GameObjects Translate and Rotate GetButton and GetKey Colliders Colliders as Triggers C# References The C# Player's Guide (3rd Edition) / pdf Microsoft C# Quick Start Tutorials Unity Scripts Unity Script Collection - Great resource! Scripting Behavior \u00b6 The Nature of Code ( Processing Examples ) Q: How do you go about translating code from one language to another? A: Learn enough of the syntax for both programming lanages to translate from one language to another. Oscillation Examples Teleporter Examples Making Objects Slide w/ Physic Materials","title":"Learning Unity"},{"location":"xr/learning-unity/#beginner","text":"","title":"Beginner"},{"location":"xr/learning-unity/#development-tools","text":"Unity Visual Studio HTC Vive","title":"Development Tools"},{"location":"xr/learning-unity/#unity-basics","text":"Unity Interface Navigation Hierarchy Windows - Scene, Game Console Inspector Custom Layouts Tools - QUERTY Project / File Organization Assets Folder If you delete it in Unity it deletes it from the folder. Careful. .meta files generated by Unity. They need to go with the source file if you move it in the explorer (windows) or finder (MacOS). Make subdirectories to keep it organized Ex. Scenes, Scripts, Models, Textures, Prefabs, Physical Materials, Materials Adding Objects to a Scene Manipulating Objects Inspecting Objects Nesting Objects - Parents and Children Working with Game Objects Adding Components Rigid Body Game Play Init Objects, Compile Scripts, etc Changing parameters in Unity before and during gameplay Importing Assets Import your own assets (from CAD package - Rhino, Fusion, Maya, Blender, etc) Import assets from Asset store Import assets you find on the web Intro to scripting Scripting...What is scripting? What's in a script? Monodevelop and Visual Studio Make a GameObject Make a new script and add it as a Component to your new GameObject Print to the console from your script Debug.Log(\"Hello World!!\");","title":"Unity Basics"},{"location":"xr/learning-unity/#unity-steamvr","text":"The SteamVR Plugin is an easy way to integrate VR functionality into Unity. It's recommended to import the Unity package via Asset store within Unity. Note that SteamVR won't work unless there is VR capable hardware connected (ie. HTC VIVE) and you are running the Unity project on a Windows 10 machine. Required Software Unity 2018 and up - Installed via Unity Hub. SteamVR Runtime 1.2.10 - Installed via Steam. SteamVR Plugin 2.2.0 (Last Update: Jan 30, 2019) Github Docs Unity Asset Store OpenVR - SteamVR is using OpenVR behind the scenes to communicate with the SteamVR Runtime. The Wiki for OpenVR talks about more of the underlying API. You don't need to download anything else. Build a Unity project and add the SteamVR plugin Make a new Unity project. Name it \"MySteamVRProject.\" Import plugin SteamVR from asset store Search for SteamVR and click Import. Click Import when prompted. A dialog comes up that shows what files will be included.It may take a moment to include everything in the package. Click Accept All when prompted with the recommended project settings. You will see a confirmation that says \u201cYou have made the right choice\u201d. Click Ok. Now you should see the SteamVR folder under Assets. Disable or remove the default Main Camera in the Inspector Keep the included Directional Light or add a Point Light and disable any unused lights. Add a Plane and Cube to the scene Move the Cube up in the Z direction by 1 unit. Add the Player prefab found under SteamVR/InteractionSystem/Core/Prefabs. This includes the camera and controller objects. Generate the action.js file by navigating to Unity menu Window > SteamVR Input. Click Yes when prompted to save a copy of the example json files. Click Save and Generate on the SteamVR Input dialog. Once that\u2019s done there will be an example scene file in Assets/SteamVR/InteractionSystem/Samples/Interactions_Example.unity. Explore this scene or go back to the default SampleScene file you started with. Start adding other objects into the scene. Hit play and put on the VIVE References Player How to Add Teleportation Create an empty GameObject Locate and add the Teleporting prefab found under SteamVR/InteractionSystem/Teleport/Prefabs. 3. This is the primary object for managing teleportation functionality. Add one or more TeleportPoint game objects found under SteamVR/InteractionSystem/Teleport/Prefabs. These should be places at specific locations you would like to teleport to. Add one or more Teleport Areas Create a Plane and adjust the size and location. Rename the game object to TeleportArea Position the plane object 0.05 units in the Y direction so it\u2019s just above the ground plane. Add the Teleport Area component Hit play and put on the VIVE References Getting Started with the Interaction System Teleport TeleportPoint TeleportArea How to Add Object Interaction (Pickup & Throw) Add a Cube GameObject to the scene Add the Interactable component to enable interaction features such as highlighting. Add the Throwable component to be able to pick up and throw the object. References Getting Started with the Interaction System Interactable Throwable","title":"Unity + SteamVR"},{"location":"xr/learning-unity/#intermediate","text":"","title":"Intermediate"},{"location":"xr/learning-unity/#c-scripting","text":"Unity Scripting References Scripting Manual Scripting API Scripting Tutorials Execution Order of Event Functions Unity Scripting Tutorials Conventions and Syntax Data Types Variables and Functions Vector Maths If Statements Loops Enabling and Disabling Components Activating GameObjects Translate and Rotate GetButton and GetKey Colliders Colliders as Triggers C# References The C# Player's Guide (3rd Edition) / pdf Microsoft C# Quick Start Tutorials Unity Scripts Unity Script Collection - Great resource!","title":"C# Scripting"},{"location":"xr/learning-unity/#scripting-behavior","text":"The Nature of Code ( Processing Examples ) Q: How do you go about translating code from one language to another? A: Learn enough of the syntax for both programming lanages to translate from one language to another. Oscillation Examples Teleporter Examples Making Objects Slide w/ Physic Materials","title":"Scripting Behavior"},{"location":"xr/reality-capture/","text":"Download the pre-compiled binary for macos and try it out. https://github.com/wjakob/instant-meshes This is an article about the tool and its use in a cad program called MODO. It talks about the next steps in scanning and points at the following research. https://www.foundry.com/%20insights/vr-ar-mr/mitsuba-renderer-instant-meshes Field-Aligned Online Surface Reconstruction. Check out the video. http://rgl.epfl.ch/publications/Schertler2017Field","title":"Reality capture"}]}